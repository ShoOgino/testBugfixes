{"path":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 1);\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 2); \n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 1);\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 2); \n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 1);\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 2); \n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 1);\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 2); \n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 1);\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(tempSourceCollectionName, tempSourceSlice.getName(), Replica.Type.NRT, 2); \n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS, timeSource);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      waitUntil.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS, timeSource);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      waitUntil.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        OverseerCollectionMessageHandler.NUM_SLICES, 1,\n        OverseerCollectionMessageHandler.COLL_CONF, configName,\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(OverseerCollectionMessageHandler.COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS, timeSource);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      waitUntil.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS, timeSource);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      waitUntil.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        NRT_REPLICAS, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceLeader.getCoreName();\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(),\n        zkStateReader.getClusterState().getCollection(tempSourceCollectionName), tempSourceSlice.getName(), Replica.Type.NRT);\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","61c45e99cf6676da48f19d7511c73712ad39402b"],"a52341299179de5479672f7cf518bf4b173f34b3":["61c45e99cf6676da48f19d7511c73712ad39402b","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"61c45e99cf6676da48f19d7511c73712ad39402b":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}