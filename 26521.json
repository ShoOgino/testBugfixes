{"path":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}