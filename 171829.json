{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/dedup/RetainMostRecentUpdateConflictResolver#getMaximum(Iterator[SolrInputDocument],String,Comparator,Context).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/dedup/RetainMostRecentUpdateConflictResolver#getMaximum(Iterator[SolrInputDocument],String,Comparator,Context).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the most recent document among the colliding updates */\n  protected Iterator<SolrInputDocument> getMaximum(Iterator<SolrInputDocument> updates, String fieldName,\n      Comparator child, Context context) {\n    \n    SolrInputDocumentComparator comp = new SolrInputDocumentComparator(fieldName, child);\n    SolrInputDocument max = null;\n    long numDupes = 0;\n    long numOutdated = 0;\n    while (updates.hasNext()) {\n      SolrInputDocument next = updates.next(); \n      assert next != null;\n      if (max == null) {\n        max = next;\n      } else {\n        int c = comp.compare(next, max);\n        if (c == 0) {\n          LOG.debug(\"Ignoring document version because it is a duplicate: {}\", next);\n          numDupes++;\n        } else if (c > 0) {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", max);\n          max = next;\n          numOutdated++;\n        } else {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", next);        \n          numOutdated++;\n        }\n      }\n    }\n    \n    assert max != null;\n    if (numDupes > 0) {\n      context.getCounter(COUNTER_GROUP, DUPLICATES_COUNTER_NAME).increment(numDupes);\n    }\n    if (numOutdated > 0) {\n      context.getCounter(COUNTER_GROUP, OUTDATED_COUNTER_NAME).increment(numOutdated);\n    }\n    return Collections.singletonList(max).iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/dedup/RetainMostRecentUpdateConflictResolver#getMaximum(Iterator[SolrInputDocument],String,Comparator,Context).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/dedup/RetainMostRecentUpdateConflictResolver#getMaximum(Iterator[SolrInputDocument],String,Comparator,Context).mjava","sourceNew":"  /** Returns the most recent document among the colliding updates */\n  protected Iterator<SolrInputDocument> getMaximum(Iterator<SolrInputDocument> updates, String fieldName,\n      Comparator child, Context context) {\n    \n    SolrInputDocumentComparator comp = new SolrInputDocumentComparator(fieldName, child);\n    SolrInputDocument max = null;\n    long numDupes = 0;\n    long numOutdated = 0;\n    while (updates.hasNext()) {\n      SolrInputDocument next = updates.next(); \n      assert next != null;\n      if (max == null) {\n        max = next;\n      } else {\n        int c = comp.compare(next, max);\n        if (c == 0) {\n          LOG.debug(\"Ignoring document version because it is a duplicate: {}\", next);\n          numDupes++;\n        } else if (c > 0) {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", max);\n          max = next;\n          numOutdated++;\n        } else {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", next);        \n          numOutdated++;\n        }\n      }\n    }\n    \n    assert max != null;\n    if (numDupes > 0) {\n      context.getCounter(COUNTER_GROUP, DUPLICATES_COUNTER_NAME).increment(numDupes);\n    }\n    if (numOutdated > 0) {\n      context.getCounter(COUNTER_GROUP, OUTDATED_COUNTER_NAME).increment(numOutdated);\n    }\n    return Collections.singletonList(max).iterator();\n  }\n\n","sourceOld":"  /** Returns the most recent document among the colliding updates */\n  protected Iterator<SolrInputDocument> getMaximum(Iterator<SolrInputDocument> updates, String fieldName,\n      Comparator child, Context context) {\n    \n    SolrInputDocumentComparator comp = new SolrInputDocumentComparator(fieldName, child);\n    SolrInputDocument max = null;\n    long numDupes = 0;\n    long numOutdated = 0;\n    while (updates.hasNext()) {\n      SolrInputDocument next = updates.next(); \n      assert next != null;\n      if (max == null) {\n        max = next;\n      } else {\n        int c = comp.compare(next, max);\n        if (c == 0) {\n          LOG.debug(\"Ignoring document version because it is a duplicate: {}\", next);\n          numDupes++;\n        } else if (c > 0) {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", max);\n          max = next;\n          numOutdated++;\n        } else {\n          LOG.debug(\"Ignoring document version because it is outdated: {}\", next);        \n          numOutdated++;\n        }\n      }\n    }\n    \n    assert max != null;\n    if (numDupes > 0) {\n      context.getCounter(COUNTER_GROUP, DUPLICATES_COUNTER_NAME).increment(numDupes);\n    }\n    if (numOutdated > 0) {\n      context.getCounter(COUNTER_GROUP, OUTDATED_COUNTER_NAME).increment(numOutdated);\n    }\n    return Collections.singletonList(max).iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}