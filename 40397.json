{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  public ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3db2112612e0e0723af2415cfbdd18553f96b804","date":1378284810,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  public ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3db2112612e0e0723af2415cfbdd18553f96b804":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["3db2112612e0e0723af2415cfbdd18553f96b804"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3db2112612e0e0723af2415cfbdd18553f96b804":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["99eb4a732d1a908f4636ace52928876136bf1896","0a570bec4aec8585a4eea44849bfb2bc264208c4","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3db2112612e0e0723af2415cfbdd18553f96b804","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}