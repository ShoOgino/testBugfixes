{"path":"src/java/org/apache/lucene/search/PhraseQuery#scorer(IndexReader).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  final Scorer scorer(IndexReader reader) throws IOException {\n    if (terms.size() == 0)\t\t\t  // optimize zero-term case\n      return null;\n    if (terms.size() == 1) {\t\t\t  // optimize one-term case\n      Term term = (Term)terms.elementAt(0);\n      TermDocs docs = reader.termDocs(term);\n      if (docs == null)\n\treturn null;\n      return new TermScorer(docs, reader.norms(term.field()), weight);\n    }\n\n    TermPositions[] tps = new TermPositions[terms.size()];\n    for (int i = 0; i < terms.size(); i++) {\n      TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n      if (p == null)\n\treturn null;\n      tps[i] = p;\n    }\n\n    if (slop == 0)\t\t\t\t  // optimize exact case\n      return new ExactPhraseScorer(tps, reader.norms(field), weight);\n    else\n      return\n\tnew SloppyPhraseScorer(tps, slop, reader.norms(field), weight);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#scorer(IndexReader,Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#scorer(IndexReader).mjava","sourceNew":"  final Scorer scorer(IndexReader reader, Similarity similarity)\n    throws IOException {\n    if (terms.size() == 0)\t\t\t  // optimize zero-term case\n      return null;\n    if (terms.size() == 1) {\t\t\t  // optimize one-term case\n      Term term = (Term)terms.elementAt(0);\n      TermDocs docs = reader.termDocs(term);\n      if (docs == null)\n\treturn null;\n      return new TermScorer(docs, similarity,\n                            reader.norms(term.field()), weight);\n    }\n\n    TermPositions[] tps = new TermPositions[terms.size()];\n    for (int i = 0; i < terms.size(); i++) {\n      TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n      if (p == null)\n\treturn null;\n      tps[i] = p;\n    }\n\n    if (slop == 0)\t\t\t\t  // optimize exact case\n      return new ExactPhraseScorer(tps, similarity,\n                                   reader.norms(field), weight);\n    else\n      return\n\tnew SloppyPhraseScorer(tps, similarity, slop,\n                               reader.norms(field), weight);\n\n  }\n\n","sourceOld":"  final Scorer scorer(IndexReader reader) throws IOException {\n    if (terms.size() == 0)\t\t\t  // optimize zero-term case\n      return null;\n    if (terms.size() == 1) {\t\t\t  // optimize one-term case\n      Term term = (Term)terms.elementAt(0);\n      TermDocs docs = reader.termDocs(term);\n      if (docs == null)\n\treturn null;\n      return new TermScorer(docs, reader.norms(term.field()), weight);\n    }\n\n    TermPositions[] tps = new TermPositions[terms.size()];\n    for (int i = 0; i < terms.size(); i++) {\n      TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n      if (p == null)\n\treturn null;\n      tps[i] = p;\n    }\n\n    if (slop == 0)\t\t\t\t  // optimize exact case\n      return new ExactPhraseScorer(tps, reader.norms(field), weight);\n    else\n      return\n\tnew SloppyPhraseScorer(tps, slop, reader.norms(field), weight);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f5efa46fb27648cd98137d9898d819e115911bc":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f5efa46fb27648cd98137d9898d819e115911bc"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6f5efa46fb27648cd98137d9898d819e115911bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}