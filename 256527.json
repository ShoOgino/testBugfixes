{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new FloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity();\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new FloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new FloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity();\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new FloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new LegacyFloatField(\"weeks\", 0.0F, Store.YES);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(reader);\n    artistDocValues = ar.getSortedDocValues(\"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.valueOf(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // populate an index with documents - artist, song and weeksAtNumberOne\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Field yearField = newTextField(\"year\", \"\", Field.Store.NO);\n    SortedDocValuesField artistField = new SortedDocValuesField(\"artist\",\n        new BytesRef(\"\"));\n    Field weeksAtNumberOneField = new FloatDocValuesField(\"weeksAtNumberOne\",\n        0.0F);\n    Field weeksStoredField = new StoredField(\"weeks\", 0.0F);\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field songField = newTextField(\"song\", \"\", Field.Store.NO);\n    Field storedArtistField = newTextField(\"artistName\", \"\", Field.Store.NO);\n\n    doc.add(idField);\n    doc.add(weeksAtNumberOneField);\n    doc.add(storedArtistField);\n    doc.add(songField);\n    doc.add(weeksStoredField);\n    doc.add(yearField);\n    doc.add(artistField);\n\n    parsedRecords.clear();\n    for (int i = 0; i < hitsOfThe60s.length; i++) {\n      String cols[] = hitsOfThe60s[i].split(\"\\t\");\n      Record record = new Record(String.valueOf(i), cols[0], cols[1], cols[2],\n          Float.parseFloat(cols[3]));\n      parsedRecords.put(record.id, record);\n      idField.setStringValue(record.id);\n      yearField.setStringValue(record.year);\n      storedArtistField.setStringValue(record.artist);\n      artistField.setBytesValue(new BytesRef(record.artist));\n      songField.setStringValue(record.song);\n      weeksStoredField.setFloatValue(record.weeks);\n      weeksAtNumberOneField.setFloatValue(record.weeks);\n      writer.addDocument(doc);\n      if (i % 10 == 0) {\n        // Causes the creation of multiple segments for our test\n        writer.commit();\n      }\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    artistDocValues = MultiDocValues.getSortedValues(reader, \"artist\");\n\n    // All searches sort by song popularity \n    final Similarity base = searcher.getSimilarity(true);\n    searcher.setSimilarity(new DocValueSimilarity(base, \"weeksAtNumberOne\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d470c8182e92b264680e34081b75e70a9f2b3c89","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"485545da3b4429d6f138b4baac573a97820ee93b":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["770342641f7b505eaa8dccdc666158bff2419109","3d33e731a93d4b57e662ff094f64f94a745422d4"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d470c8182e92b264680e34081b75e70a9f2b3c89","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["485545da3b4429d6f138b4baac573a97820ee93b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["770342641f7b505eaa8dccdc666158bff2419109","0ad30c6a479e764150a3316e57263319775f1df2"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["770342641f7b505eaa8dccdc666158bff2419109","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"ab68488225b6a6c357dda72ed11dedca9914a192":["403d05f7f8d69b65659157eff1bc1d2717f04c66","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"485545da3b4429d6f138b4baac573a97820ee93b":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"770342641f7b505eaa8dccdc666158bff2419109":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["485545da3b4429d6f138b4baac573a97820ee93b"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}