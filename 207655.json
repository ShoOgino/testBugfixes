{"path":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","commits":[{"id":"e6ea410f5b876f6fa92ac261542678209d4a4037","date":1177884620,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorting() throws Exception {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( SolrParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( SolrParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( SolrParams.SORT );\n    args.put( SolrParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( SolrParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( SolrParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( SolrParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( SolrParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( SolrParams.SORT );\n    args.put( SolrParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( SolrParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( SolrCore.getSolrCore(), new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20488c09bb5de9b6254d9749bfa3c670a1221975","date":1194442775,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d78adeb55f063e66286f439a0e0e6c1a31abfe72","date":1196347009,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76a8547f21cb89c5512cb81bf55cb3f419c7e691","date":1235781390,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s asc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"e6ea410f5b876f6fa92ac261542678209d4a4037":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"20488c09bb5de9b6254d9749bfa3c670a1221975":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d78adeb55f063e66286f439a0e0e6c1a31abfe72":["20488c09bb5de9b6254d9749bfa3c670a1221975"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["76a8547f21cb89c5512cb81bf55cb3f419c7e691"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76a8547f21cb89c5512cb81bf55cb3f419c7e691":["d78adeb55f063e66286f439a0e0e6c1a31abfe72"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["6d6338c87060be5f66757a94945975f3bbd377a9"],"e6ea410f5b876f6fa92ac261542678209d4a4037":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"6d6338c87060be5f66757a94945975f3bbd377a9":["20488c09bb5de9b6254d9749bfa3c670a1221975"],"20488c09bb5de9b6254d9749bfa3c670a1221975":["d78adeb55f063e66286f439a0e0e6c1a31abfe72"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d78adeb55f063e66286f439a0e0e6c1a31abfe72":["76a8547f21cb89c5512cb81bf55cb3f419c7e691"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"76a8547f21cb89c5512cb81bf55cb3f419c7e691":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}