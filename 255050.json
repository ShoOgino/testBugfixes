{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","commits":[{"id":"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4","date":1385109382,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(classificationResult.getScore()), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(classificationResult.getScore()), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(classificationResult.getScore()), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(classificationResult.getScore()), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44","date":1415781486,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(classificationResult.getScore()), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n      updateSampleIndex();\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n      updateSampleIndex(analyzer);\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    populateSampleIndex(analyzer);\n\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n    updateSampleIndex();\n    ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n    assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n    assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n  }\n\n","sourceOld":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n      updateSampleIndex();\n      ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n      assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n      assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkOnlineClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    getSampleIndex(analyzer);\n\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n    updateSampleIndex();\n    ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n    assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n    assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n  }\n\n","sourceOld":"  protected void checkOnlineClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    populateSampleIndex(analyzer);\n\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got: \" + score, score <= 1 && score >= 0);\n    updateSampleIndex();\n    ClassificationResult<T> secondClassificationResult = classifier.assignClass(inputDoc);\n    assertEquals(classificationResult.getAssignedClass(), secondClassificationResult.getAssignedClass());\n    assertEquals(Double.valueOf(score), Double.valueOf(secondClassificationResult.getScore()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["360ff513ddb24a30ffa2111a3ef0f91038803100"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}