{"path":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c220849f876de24a79f756f65b3eb045db59f63f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}