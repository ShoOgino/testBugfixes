{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","commits":[{"id":"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7","date":1347426169,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb4b4651ba335fd70d51cf8448325add98f71c6","date":1348862946,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) ctx.readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":["da956410d7a790f567af4e7e94584fb0930212f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) ctx.readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9cb4b4651ba335fd70d51cf8448325add98f71c6":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"]},"commit2Childs":{"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9cb4b4651ba335fd70d51cf8448325add98f71c6":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}