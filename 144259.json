{"path":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","commits":[{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: default LockFactory assigns different lock prefixes:\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.10\", true);\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.11\", true);\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.10\");\n      rmDir(\"TestLockFactory.11\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93a838d8ba57e85e9db126e862958dafc7da4d5b","date":1168639785,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir = FSDirectory.getDirectory(\"TestLockFactory.10\", true);\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","sourceOld":"    // Verify: default LockFactory assigns different lock prefixes:\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.10\", true);\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.11\", true);\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.10\");\n      rmDir(\"TestLockFactory.11\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      Directory dir = FSDirectory.getDirectory(\"TestLockFactory.10\");\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","sourceOld":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir = FSDirectory.getDirectory(\"TestLockFactory.10\", true);\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      Directory dir = FSDirectory.open(new File(\"TestLockFactory.10\"));\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","sourceOld":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      Directory dir = FSDirectory.getDirectory(\"TestLockFactory.10\");\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7faff7550034759516ce7f4898cd16c1816cde","date":1245778901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      File dirName = _TestUtil.getTempDir(\"TestLockFactory.10\");\n      Directory dir = FSDirectory.open(dirName);\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      Directory dir = FSDirectory.open(new File(\"TestLockFactory.10\"));\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      rmDir(\"TestLockFactory.10\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      File dirName = _TestUtil.getTempDir(\"TestLockFactory.10\");\n      Directory dir = FSDirectory.open(dirName);\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Verify: default LockFactory has no prefix (ie\n    // write.lock is stored in index):\n    public void testDefaultFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get null prefix:\n      File dirName = _TestUtil.getTempDir(\"TestLockFactory.10\");\n      Directory dir = FSDirectory.open(dirName);\n\n      String prefix = dir.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Default lock prefix should be null\", null == prefix);\n\n      _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66b12ba4967665216eeb706b58d424c51fb3641a":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["66b12ba4967665216eeb706b58d424c51fb3641a"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f7faff7550034759516ce7f4898cd16c1816cde":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8f7faff7550034759516ce7f4898cd16c1816cde"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66b12ba4967665216eeb706b58d424c51fb3641a":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["8f7faff7550034759516ce7f4898cd16c1816cde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"8f7faff7550034759516ce7f4898cd16c1816cde":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}