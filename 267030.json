{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","sourceNew":"  static void writeBitSet(DocIdSetIterator it, IndexOutput out) throws IOException {\n    int i = 0;\n    final FixedBitSet buffer = new FixedBitSet(1<<16);\n    int prevBlock = -1;\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int block = doc >>> 16;\n      if (prevBlock != -1 && block != prevBlock) {\n        flush(prevBlock, buffer, i, out);\n        buffer.clear(0, buffer.length());\n        prevBlock = block;\n        i = 0;\n      }\n      buffer.set(doc & 0xFFFF);\n      i++;\n      prevBlock = block;\n    }\n    if (i > 0) {\n      flush(prevBlock, buffer, i, out);\n      buffer.clear(0, buffer.length());\n    }\n    // NO_MORE_DOCS is stored explicitly\n    buffer.set(DocIdSetIterator.NO_MORE_DOCS & 0xFFFF);\n    flush(DocIdSetIterator.NO_MORE_DOCS >>> 16, buffer, 1, out);\n  }\n\n","sourceOld":"  static void writeBitSet(DocIdSetIterator it, IndexOutput out) throws IOException {\n    int i = 0;\n    final FixedBitSet buffer = new FixedBitSet(1<<16);\n    int prevBlock = -1;\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int block = doc >>> 16;\n      if (prevBlock != -1 && block != prevBlock) {\n        flush(prevBlock, buffer, i, out);\n        buffer.clear(0, buffer.length());\n        prevBlock = block;\n        i = 0;\n      }\n      buffer.set(doc & 0xFFFF);\n      i++;\n      prevBlock = block;\n    }\n    if (i > 0) {\n      flush(prevBlock, buffer, i, out);\n      buffer.clear(0, buffer.length());\n    }\n    // NO_MORE_DOCS is stored explicitly\n    buffer.set(DocIdSetIterator.NO_MORE_DOCS & 0xFFFF);\n    flush(DocIdSetIterator.NO_MORE_DOCS >>> 16, buffer, 1, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","sourceNew":"  static void writeBitSet(DocIdSetIterator it, IndexOutput out) throws IOException {\n    int i = 0;\n    final FixedBitSet buffer = new FixedBitSet(1<<16);\n    int prevBlock = -1;\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int block = doc >>> 16;\n      if (prevBlock != -1 && block != prevBlock) {\n        flush(prevBlock, buffer, i, out);\n        buffer.clear(0, buffer.length());\n        prevBlock = block;\n        i = 0;\n      }\n      buffer.set(doc & 0xFFFF);\n      i++;\n      prevBlock = block;\n    }\n    if (i > 0) {\n      flush(prevBlock, buffer, i, out);\n      buffer.clear(0, buffer.length());\n    }\n    // NO_MORE_DOCS is stored explicitly\n    buffer.set(DocIdSetIterator.NO_MORE_DOCS & 0xFFFF);\n    flush(DocIdSetIterator.NO_MORE_DOCS >>> 16, buffer, 1, out);\n  }\n\n","sourceOld":"  static void writeBitSet(DocIdSetIterator it, IndexOutput out) throws IOException {\n    int i = 0;\n    final FixedBitSet buffer = new FixedBitSet(1<<16);\n    int prevBlock = -1;\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int block = doc >>> 16;\n      if (prevBlock != -1 && block != prevBlock) {\n        flush(prevBlock, buffer, i, out);\n        buffer.clear(0, buffer.length());\n        prevBlock = block;\n        i = 0;\n      }\n      buffer.set(doc & 0xFFFF);\n      i++;\n      prevBlock = block;\n    }\n    if (i > 0) {\n      flush(prevBlock, buffer, i, out);\n      buffer.clear(0, buffer.length());\n    }\n    // NO_MORE_DOCS is stored explicitly\n    buffer.set(DocIdSetIterator.NO_MORE_DOCS & 0xFFFF);\n    flush(DocIdSetIterator.NO_MORE_DOCS >>> 16, buffer, 1, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#writeBitSet(DocIdSetIterator,IndexOutput).mjava","sourceNew":null,"sourceOld":"  static void writeBitSet(DocIdSetIterator it, IndexOutput out) throws IOException {\n    int i = 0;\n    final FixedBitSet buffer = new FixedBitSet(1<<16);\n    int prevBlock = -1;\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int block = doc >>> 16;\n      if (prevBlock != -1 && block != prevBlock) {\n        flush(prevBlock, buffer, i, out);\n        buffer.clear(0, buffer.length());\n        prevBlock = block;\n        i = 0;\n      }\n      buffer.set(doc & 0xFFFF);\n      i++;\n      prevBlock = block;\n    }\n    if (i > 0) {\n      flush(prevBlock, buffer, i, out);\n      buffer.clear(0, buffer.length());\n    }\n    // NO_MORE_DOCS is stored explicitly\n    buffer.set(DocIdSetIterator.NO_MORE_DOCS & 0xFFFF);\n    flush(DocIdSetIterator.NO_MORE_DOCS >>> 16, buffer, 1, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}