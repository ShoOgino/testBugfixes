{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","commits":[{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b34acf30a377e146cfc8f7da3ec9a01e944403e1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b34acf30a377e146cfc8f7da3ec9a01e944403e1","date":1469718024,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","bugFix":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false, true));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n     * ICUTokenizer+CJKBigramFilter\n     */\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        TokenStream result = new CJKBigramFilter(source);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n    /*\n     * ICUTokenizer+ICUNormalizer2Filter+CJKBigramFilter.\n     * \n     * ICUNormalizer2Filter uses nfkc_casefold by default, so this is a language-independent\n     * superset of CJKWidthFilter's foldings.\n     */\n    analyzer2 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ICUTokenizer(newAttributeFactory(), new DefaultICUTokenizerConfig(false));\n        // we put this before the CJKBigramFilter, because the normalization might combine\n        // some halfwidth katakana forms, which will affect the bigramming.\n        TokenStream result = new ICUNormalizer2Filter(source);\n        result = new CJKBigramFilter(result);\n        return new TokenStreamComponents(source, new StopFilter(result, CharArraySet.EMPTY_SET));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b34acf30a377e146cfc8f7da3ec9a01e944403e1":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a56958d7f71a28824f20031ffbb2e13502a0274e","b34acf30a377e146cfc8f7da3ec9a01e944403e1"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a56958d7f71a28824f20031ffbb2e13502a0274e","b34acf30a377e146cfc8f7da3ec9a01e944403e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b34acf30a377e146cfc8f7da3ec9a01e944403e1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b34acf30a377e146cfc8f7da3ec9a01e944403e1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b34acf30a377e146cfc8f7da3ec9a01e944403e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}