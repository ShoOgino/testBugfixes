{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":"  public void testBigramTokenizer() throws Exception {\n\tSlowSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"687e86054415a85f912c6eaa38f995038e5c1cd8","date":1336447427,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":"  public void testBigramTokenizer() throws Exception {\n\tSlowSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSlowSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tBaseTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testBigramTokenizer().mjava","sourceNew":null,"sourceOld":"  public void testBigramTokenizer() throws Exception {\n\tSlowSynonymMap synMap;\n\t\n\t// prepare bi-gram tokenizer factory\n\tTokenizerFactory tf = new NGramTokenizerFactory();\n\tMap<String, String> args = new HashMap<String, String>();\n\targs.put(\"minGramSize\",\"2\");\n\targs.put(\"maxGramSize\",\"2\");\n\ttf.init( args );\n\n    // (ab)->(bc)->(cd)->[ef][fg][gh]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"abcd=>efgh\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, tf);\n    assertEquals( 1, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"ab\" ).submap.size() );\n    assertEquals( 1, getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"ef\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"fg\" );\n    assertTokIncludes( getSubSynonymMap( getSubSynonymMap( synMap, \"ab\" ), \"bc\" ), \"cd\", \"gh\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}