{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/email/UAX29URLEmailTokenizerImpl#zzRefill().mjava","commits":[{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":1,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/email/UAX29URLEmailTokenizerImpl#zzRefill().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;\n    if (requested == 0) {\n      return true;\n    }\n    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);\n\n    /* not supposed to occur according to specification of java.io.Reader */\n    if (numRead == 0) {\n      throw new java.io.IOException(\"Reader returned 0 characters. See JFlex examples for workaround.\");\n    }\n    if (numRead > 0) {\n      zzEndRead += numRead;\n      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n        if (numRead == requested) { // We might have requested too few chars to encode a full Unicode character.\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (numRead == 1) {\n            return true;\n          }\n        } else {                    // There is room in the buffer for at least one more char\n          int c = zzReader.read();  // Expecting to read a low surrogate char\n          if (c == -1) {\n            return true;\n          } else {\n            zzBuffer[zzEndRead++] = (char)c;\n            return false;\n          }\n        }\n      }\n      /* potentially more input available */\n      return false;\n    }\n\n    /* numRead < 0 ==> end of stream */\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      zzEndRead += zzFinalHighSurrogate;\n      zzFinalHighSurrogate = 0;\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n\n    /* fill the buffer with new input */\n    int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;\n    if (requested == 0) {\n      return true;\n    }\n    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);\n\n    /* not supposed to occur according to specification of java.io.Reader */\n    if (numRead == 0) {\n      throw new java.io.IOException(\"Reader returned 0 characters. See JFlex examples for workaround.\");\n    }\n    if (numRead > 0) {\n      zzEndRead += numRead;\n      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n        if (numRead == requested) { // We might have requested too few chars to encode a full Unicode character.\n          --zzEndRead;\n          zzFinalHighSurrogate = 1;\n          if (numRead == 1) {\n            return true;\n          }\n        } else {                    // There is room in the buffer for at least one more char\n          int c = zzReader.read();  // Expecting to read a low surrogate char\n          if (c == -1) {\n            return true;\n          } else {\n            zzBuffer[zzEndRead++] = (char)c;\n            return false;\n          }\n        }\n      }\n      /* potentially more input available */\n      return false;\n    }\n\n    /* numRead < 0 ==> end of stream */\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}