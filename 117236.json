{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.replaceForFlush(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.replaceForFlush(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.replaceForFlush(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.replaceForFlush(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.replaceForFlush(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    } finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    }finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5898ca35059bc3a89ba6a275ec92a5c32057aedc","date":1436893905,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    } finally {\n      perThread.unlock();\n    }\n  }\n\n","sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread, closed);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    } finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutAndBlock(ThreadState).mjava","sourceNew":null,"sourceOld":"  private void checkoutAndBlock(ThreadState perThread) {\n    perThread.lock();\n    try {\n      assert perThread.flushPending : \"can not block non-pending threadstate\";\n      assert fullFlush : \"can not block if fullFlush == false\";\n      final DocumentsWriterPerThread dwpt;\n      final long bytes = perThread.bytesUsed;\n      dwpt = perThreadPool.reset(perThread);\n      numPending--;\n      blockedFlushes.add(new BlockedFlush(dwpt, bytes));\n    } finally {\n      perThread.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["7af110b00ea8df9429309d83e38e0533d82e144f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["9299079153fd7895bf3cf6835cf7019af2ba89b3"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","9299079153fd7895bf3cf6835cf7019af2ba89b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}