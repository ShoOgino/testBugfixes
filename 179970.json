{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/FixedShingleFilterTest#testShingleCountLimits().mjava","commits":[{"id":"89b8d38d08ee2b91459a65e16393722e4548f37c","date":1521980569,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/FixedShingleFilterTest#testShingleCountLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testShingleCountLimits() {\n\n    Token[] tokens = new Token[5000];\n    tokens[0] = new Token(\"term\", 1, 0, 1);\n    tokens[1] = new Token(\"term1\", 1, 2, 3);\n    for (int i = 2; i < 5000; i++) {\n      tokens[i] = new Token(\"term\" + i, 0, 2, 3);\n    }\n\n    Exception e = expectThrows(IllegalStateException.class, () -> {\n      TokenStream ts = new FixedShingleFilter(new CannedTokenStream(tokens), 2);\n      ts.reset();\n      while (ts.incrementToken()) {}\n    });\n    assertEquals(\"Too many shingles (> 1000) at term [term]\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91286985ff2a4aea4ce949a9bd6dc750db6c207a","date":1521994854,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/FixedShingleFilterTest#testShingleCountLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testShingleCountLimits() {\n\n    Token[] tokens = new Token[5000];\n    tokens[0] = new Token(\"term\", 1, 0, 1);\n    tokens[1] = new Token(\"term1\", 1, 2, 3);\n    for (int i = 2; i < 5000; i++) {\n      tokens[i] = new Token(\"term\" + i, 0, 2, 3);\n    }\n\n    Exception e = expectThrows(IllegalStateException.class, () -> {\n      TokenStream ts = new FixedShingleFilter(new CannedTokenStream(tokens), 2);\n      ts.reset();\n      while (ts.incrementToken()) {}\n    });\n    assertEquals(\"Too many shingles (> 1000) at term [term]\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7836a9b132efc1162fb9d817b3e766f0a82212be","date":1543916862,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/FixedShingleFilterTest#testShingleCountLimits().mjava","sourceNew":null,"sourceOld":"  public void testShingleCountLimits() {\n\n    Token[] tokens = new Token[5000];\n    tokens[0] = new Token(\"term\", 1, 0, 1);\n    tokens[1] = new Token(\"term1\", 1, 2, 3);\n    for (int i = 2; i < 5000; i++) {\n      tokens[i] = new Token(\"term\" + i, 0, 2, 3);\n    }\n\n    Exception e = expectThrows(IllegalStateException.class, () -> {\n      TokenStream ts = new FixedShingleFilter(new CannedTokenStream(tokens), 2);\n      ts.reset();\n      while (ts.incrementToken()) {}\n    });\n    assertEquals(\"Too many shingles (> 1000) at term [term]\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91286985ff2a4aea4ce949a9bd6dc750db6c207a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89b8d38d08ee2b91459a65e16393722e4548f37c"],"7836a9b132efc1162fb9d817b3e766f0a82212be":["91286985ff2a4aea4ce949a9bd6dc750db6c207a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89b8d38d08ee2b91459a65e16393722e4548f37c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7836a9b132efc1162fb9d817b3e766f0a82212be"]},"commit2Childs":{"91286985ff2a4aea4ce949a9bd6dc750db6c207a":["7836a9b132efc1162fb9d817b3e766f0a82212be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91286985ff2a4aea4ce949a9bd6dc750db6c207a","89b8d38d08ee2b91459a65e16393722e4548f37c"],"7836a9b132efc1162fb9d817b3e766f0a82212be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"89b8d38d08ee2b91459a65e16393722e4548f37c":["91286985ff2a4aea4ce949a9bd6dc750db6c207a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}