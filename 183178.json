{"path":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","commits":[{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"/dev/null","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n    \n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5, bucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"/dev/null","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n    \n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5, bucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316","date":1573886531,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5, bucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n    \n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5, bucket.get(\"count\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100L, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50L, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50L, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45L, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1L, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8L, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5L, bucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5, bucket.get(\"count\"));\n    }\n  }\n\n","bugFix":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#sanityCheckIndividualShards().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100L, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50L, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50L, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45L, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1L, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8L, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5L, bucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":"  private void sanityCheckIndividualShards() throws Exception {\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    SolrParams req = params( \"q\", \"*:*\", \"distrib\", \"false\", \"json.facet\",\n                             \" { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}\");\n\n    List<NamedList>[] shardFooBuckets = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardFooBuckets[i] = (List<NamedList>)\n        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardFooBuckets[i].size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertEquals(bucket.toString(), \"aaa\"+j, bucket.get(\"val\"));\n        assertEquals(bucket.toString(), 100L, bucket.get(\"count\"));\n      }\n    }\n    // top 6-10 same on shard0 & shard1\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        NamedList bucket = shardFooBuckets[i].get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"bbb\"));\n        assertEquals(bucket.toString(), 50L, bucket.get(\"count\"));\n      }\n    }\n\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardFooBuckets[2].get(5).get(\"val\"));\n    assertEquals(50L, shardFooBuckets[2].get(5).get(\"count\"));\n    assertEquals(\"tail\", shardFooBuckets[2].get(6).get(\"val\"));\n    assertEquals(45L, shardFooBuckets[2].get(6).get(\"count\"));\n    for (int j = 7; j < 10; j++) {\n      NamedList bucket = shardFooBuckets[2].get(j);\n      assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ZZZ\"));\n      assertEquals(bucket.toString(), 1L, bucket.get(\"count\"));\n    }\n    \n    // check 'bar' sub buckets on \"tail\" from shard2\n    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get(\"bar\")).get(\"buckets\");\n      assertEquals(6, bar_buckets.size());\n      for (int j = 0; j < 5; j++) {\n        NamedList bucket = bar_buckets.get(j);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"junkB\"));\n        assertEquals(bucket.toString(), 8L, bucket.get(\"count\"));\n      }\n      NamedList bucket = bar_buckets.get(5);\n      assertEquals(\"tailB\", bucket.get(\"val\"));\n      assertEquals(5L, bucket.get(\"count\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["e98520789adb1d5ad05afb4956eca0944a929688"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["1c841e27891873cab110ebeb89f124a8ec470176"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}