{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","commits":[{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * publishes the flushed segment, segment private deletes if any and its\n   * associated global delete if present to the index writer. the actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}\n   * 's delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * publishes the flushed segment, segment private deletes if any and its\n   * associated global delete if present to the index writer. the actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}\n   * 's delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream != null) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        message(\"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream != null) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}