{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","commits":[{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","pathOld":"/dev/null","sourceNew":"    public boolean offsetsAreCorrect() {\n      // nocommit: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c","date":1334160067,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","sourceNew":"    public boolean offsetsAreCorrect() {\n      // TODO: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","sourceOld":"    public boolean offsetsAreCorrect() {\n      // nocommit: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","pathOld":"/dev/null","sourceNew":"    public boolean offsetsAreCorrect() {\n      // TODO: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#offsetsAreCorrect().mjava","sourceNew":"    public boolean offsetsAreCorrect() {\n      // TODO: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","sourceOld":"    public boolean offsetsAreCorrect() {\n      // TODO: can we not do the full chain here!?\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      TokenFilterSpec filterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      return filterSpec.offsetsAreCorrect;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}