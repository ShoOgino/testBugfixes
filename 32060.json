{"path":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","commits":[{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3800dc8cdd8c46b4863712aacac0db52566f146","6d0fc107895562138b4cc92eccac979d28579b98","6d0fc107895562138b4cc92eccac979d28579b98","6d0fc107895562138b4cc92eccac979d28579b98","09517fe4d278fb37c05202d2a897d77a48f3e002","09517fe4d278fb37c05202d2a897d77a48f3e002","09517fe4d278fb37c05202d2a897d77a48f3e002"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3800dc8cdd8c46b4863712aacac0db52566f146","date":1307555993,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","bugFix":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":["6d0fc107895562138b4cc92eccac979d28579b98","6d0fc107895562138b4cc92eccac979d28579b98","6d0fc107895562138b4cc92eccac979d28579b98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["4e8cc373c801e54cec75daf9f52792cb4b17f536","a3800dc8cdd8c46b4863712aacac0db52566f146"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["a3800dc8cdd8c46b4863712aacac0db52566f146","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3800dc8cdd8c46b4863712aacac0db52566f146":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["3bb13258feba31ab676502787ab2e1779f129b7a","a3800dc8cdd8c46b4863712aacac0db52566f146"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a3800dc8cdd8c46b4863712aacac0db52566f146"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3800dc8cdd8c46b4863712aacac0db52566f146":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","a3800dc8cdd8c46b4863712aacac0db52566f146","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}