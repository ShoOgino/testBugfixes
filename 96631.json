{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets)\n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n\n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets)\n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n\n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets)\n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n\n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets)\n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n\n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finishDocument().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finishDocument().mjava","sourceNew":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final TermVectorsWriter tv = termsWriter.writer;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tv.startField(fieldInfo, numPostings, doVectorPositions, doVectorOffsets);\n    \n    final ByteSliceReader posReader = doVectorPositions ? termsWriter.vectorSliceReaderPos : null;\n    final ByteSliceReader offReader = doVectorOffsets ? termsWriter.vectorSliceReaderOff : null;\n    \n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n      tv.startTerm(flushTerm, freq);\n      \n      if (doVectorPositions || doVectorOffsets) {\n        if (posReader != null) {\n          termsHashPerField.initReader(posReader, termID, 0);\n        }\n        if (offReader != null) {\n          termsHashPerField.initReader(offReader, termID, 1);\n        }\n        tv.addProx(freq, posReader, offReader);\n      }\n    }\n\n    termsHashPerField.reset();\n    // commit the termVectors once successful success - FI will otherwise reset them\n    fieldInfo.commitVectors();\n  }\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n    final IndexOutput tvf = termsWriter.tvf;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets)\n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n\n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n\n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","833a7987bc1c94455fde83e3311f72bddedcfb93"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}