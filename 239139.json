{"path":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","commits":[{"id":"dce5052794a4efcecae840f6c07db4eacae55ce3","date":1192141968,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","pathOld":"/dev/null","sourceNew":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"id\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='1']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a48c0fe230530bd2b1e52e00bab51dc742acd0db","date":1207854443,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","sourceNew":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"id\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='1']\"\n            );\n\n    // with an alternate + max length\n    args.put(\"hl.alternateField\", \"t_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"15\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']\"\n            );\n  }\n\n","sourceOld":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"id\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ed0a7b881c158dbc99d1a416742fc590315d43","date":1249506522,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","sourceNew":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"foo_t\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='hi']\"\n            );\n\n    // with an alternate + max length\n    args.put(\"hl.alternateField\", \"t_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"15\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']\"\n            );\n  }\n\n","sourceOld":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"id\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='1']\"\n            );\n\n    // with an alternate + max length\n    args.put(\"hl.alternateField\", \"t_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"15\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummary().mjava","sourceNew":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"foo_t\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='hi']\"\n            );\n\n    // with an alternate + max length\n    args.put(\"hl.alternateField\", \"t_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"15\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']\"\n            );\n  }\n\n","sourceOld":"  public void testAlternateSummary() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // do summarization\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n\n    // no alternate\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=0]\"\n            );\n\n    // with an alternate\n    args.put(\"hl.alternateField\", \"foo_t\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='hi']\"\n            );\n\n    // with an alternate + max length\n    args.put(\"hl.alternateField\", \"t_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"15\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dce5052794a4efcecae840f6c07db4eacae55ce3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a48c0fe230530bd2b1e52e00bab51dc742acd0db":["dce5052794a4efcecae840f6c07db4eacae55ce3"],"ad94625fb8d088209f46650c8097196fec67f00c":["96ed0a7b881c158dbc99d1a416742fc590315d43"],"96ed0a7b881c158dbc99d1a416742fc590315d43":["a48c0fe230530bd2b1e52e00bab51dc742acd0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dce5052794a4efcecae840f6c07db4eacae55ce3":["a48c0fe230530bd2b1e52e00bab51dc742acd0db"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dce5052794a4efcecae840f6c07db4eacae55ce3"],"a48c0fe230530bd2b1e52e00bab51dc742acd0db":["96ed0a7b881c158dbc99d1a416742fc590315d43"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"96ed0a7b881c158dbc99d1a416742fc590315d43":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}