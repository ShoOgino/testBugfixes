{"path":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"/dev/null","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        //todo handle properly\n        log.error(\"\",e);\n      } catch (InterruptedException e) {\n        //todo handle properly\n\n        log.error(\"\",e);\n      }\n\n    }\n    return requestParams;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320","date":1419447031,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else if(requestParams == null) {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        //todo handle properly\n        log.error(\"\",e);\n      } catch (InterruptedException e) {\n        //todo handle properly\n\n        log.error(\"\",e);\n      }\n\n    }\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0426db639e5d76d8bfcea5969a4442c88debdae","date":1420472697,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else  {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else if(requestParams == null) {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams){\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath()+\"/\"+ RequestParams.RESOURCE,null,true);\n        if(stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP,-1);\n        } else if(requestParams == null ||  stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0],(Integer)o[1]);\n          log.info(\"request params refreshed to version {}\",requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else  {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\": stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\": stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\": stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\": stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fbf45fdc4c578b71b38d70a03617829161f4bd","date":1471870345,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320","c2d72c3e6563e08675f940d4c74139309c5e3db2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getFreshRequestParams(SolrResourceLoader,RequestParams).mjava","sourceNew":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        if (log.isDebugEnabled()) {\n          log.debug(\"latest version of {}/{} in ZK  is : {}\", resourceLoader.getConfigSetZkPath(), RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        }\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          if (log.isInfoEnabled()) {\n            log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n          }\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","sourceOld":"  public static RequestParams getFreshRequestParams(SolrResourceLoader loader, RequestParams requestParams) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader resourceLoader = (ZkSolrResourceLoader) loader;\n      try {\n        Stat stat = resourceLoader.getZkController().getZkClient().exists(resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, null, true);\n        log.debug(\"latest version of {} in ZK  is : {}\", resourceLoader.getConfigSetZkPath() + \"/\" + RequestParams.RESOURCE, stat == null ? \"\" : stat.getVersion());\n        if (stat == null) {\n          requestParams = new RequestParams(Collections.EMPTY_MAP, -1);\n        } else if (requestParams == null || stat.getVersion() > requestParams.getZnodeVersion()) {\n          Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n          requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n          log.info(\"request params refreshed to version {}\", requestParams.getZnodeVersion());\n        }\n      } catch (KeeperException | InterruptedException e) {\n        SolrZkClient.checkInterrupted(e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n\n    } else {\n      Object[] o = getMapAndVersion(loader, RequestParams.RESOURCE);\n      requestParams = new RequestParams((Map) o[0], (Integer) o[1]);\n    }\n\n    return requestParams;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"389d072b64597cdcf75c2d536aaec3e8afe3393f":["2330174b38007b9942205a2679db9ddffe35af89"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["b5991832ae4bac45cecfff0fc33125aeac823d3d","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"c0426db639e5d76d8bfcea5969a4442c88debdae":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b5991832ae4bac45cecfff0fc33125aeac823d3d","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"2330174b38007b9942205a2679db9ddffe35af89":["c0426db639e5d76d8bfcea5969a4442c88debdae"],"140be51d03394488536f4aacedace29f9b318347":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["389d072b64597cdcf75c2d536aaec3e8afe3393f","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"fab172655716b96f7e42376116235017a922de3a":["2330174b38007b9942205a2679db9ddffe35af89","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["b5991832ae4bac45cecfff0fc33125aeac823d3d","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"389d072b64597cdcf75c2d536aaec3e8afe3393f":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d","fab172655716b96f7e42376116235017a922de3a"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"c0426db639e5d76d8bfcea5969a4442c88debdae":["2330174b38007b9942205a2679db9ddffe35af89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"2330174b38007b9942205a2679db9ddffe35af89":["389d072b64597cdcf75c2d536aaec3e8afe3393f","fab172655716b96f7e42376116235017a922de3a"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["0c82557b0a8c9d4012f208e5de912ae7500ea351","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60fbf45fdc4c578b71b38d70a03617829161f4bd","a5296efc4b319f5647b606629c093a94b23692c6","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["c0426db639e5d76d8bfcea5969a4442c88debdae"],"fab172655716b96f7e42376116235017a922de3a":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","140be51d03394488536f4aacedace29f9b318347"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a5296efc4b319f5647b606629c093a94b23692c6","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}