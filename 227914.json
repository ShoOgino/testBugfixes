{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_31, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_31, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_31, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), IOUtils.CHARSET_UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(Version.LUCENE_CURRENT, 16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-Analyzer],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends Analyzer> aClass, final String resource,\n      final String comment) throws IOException {\n    Reader reader = null;\n    try {\n      reader = IOUtils.getDecodingReader(aClass.getResourceAsStream(resource), StandardCharsets.UTF_8);\n      return WordlistLoader.getWordSet(reader, comment, new CharArraySet(16, ignoreCase));\n    } finally {\n      IOUtils.close(reader);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","7d89d7e4e5101347833eea558851bf4209218619"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"7d89d7e4e5101347833eea558851bf4209218619":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}