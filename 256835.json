{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","commits":[{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","sourceNew":"  public void testSanity() {\n    assertTrue(sizeOf(new String(\"test string\")) > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        new String(\"test string\"),\n        new String(\"hollow\"), \n        new String(\"catchmaster\")\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testBasic() {\n    assertTrue(sizeOf(new String(\"test strin\")) > shallowSizeOfInstance(String.class));\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertEquals(shallowSizeOfInstance(Holder.class), shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7","date":1490708104,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","sourceNew":"  public void testSanity() {\n    assertTrue(sizeOf(\"test string\") > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        \"test string\",\n        \"hollow\",\n        \"catchmaster\"\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testSanity() {\n    assertTrue(sizeOf(new String(\"test string\")) > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        new String(\"test string\"),\n        new String(\"hollow\"), \n        new String(\"catchmaster\")\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57df4f31144a04dc0e8382aed10ebfa82ef71a4d","date":1490873945,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","sourceNew":"  public void testSanity() {\n    assertTrue(sizeOf(\"test string\") > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        \"test string\",\n        \"hollow\",\n        \"catchmaster\"\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testSanity() {\n    assertTrue(sizeOf(new String(\"test string\")) > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        new String(\"test string\"),\n        new String(\"hollow\"), \n        new String(\"catchmaster\")\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","sourceNew":"  public void testSanity() {\n    assertTrue(sizeOf(\"test string\") > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testSanity() {\n    assertTrue(sizeOf(\"test string\") > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        \"test string\",\n        \"hollow\",\n        \"catchmaster\"\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe90d104db258964b96e50418b9caa0c156eafda":["2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe90d104db258964b96e50418b9caa0c156eafda"]},"commit2Childs":{"fe90d104db258964b96e50418b9caa0c156eafda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":[],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["fe90d104db258964b96e50418b9caa0c156eafda"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["57df4f31144a04dc0e8382aed10ebfa82ef71a4d","2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["57df4f31144a04dc0e8382aed10ebfa82ef71a4d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}