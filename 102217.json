{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","sourceNew":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs = new FixedBitSet(numBits);\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","sourceOld":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs = new FixedBitSet(numBits);\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","sourceNew":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs;\n    if (random().nextBoolean()) {\n      int bits2words = FixedBitSet.bits2words(numBits);\n      long[] words = new long[bits2words + random().nextInt(100)];\n      for (int i = bits2words; i < words.length; i++) {\n        words[i] = random().nextLong();\n      }\n      bs = new FixedBitSet(words, numBits);\n\n    } else {\n      bs = new FixedBitSet(numBits);\n    }\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","sourceOld":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs = new FixedBitSet(numBits);\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","bugFix":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","sourceNew":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs;\n    if (random().nextBoolean()) {\n      int bits2words = FixedBitSet.bits2words(numBits);\n      long[] words = new long[bits2words + random().nextInt(100)];\n      for (int i = bits2words; i < words.length; i++) {\n        words[i] = random().nextLong();\n      }\n      bs = new FixedBitSet(words, numBits);\n\n    } else {\n      bs = new FixedBitSet(numBits);\n    }\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","sourceOld":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs = new FixedBitSet(numBits);\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#makeFixedBitSet(int[],int).mjava","sourceNew":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs;\n    if (random().nextBoolean()) {\n      int bits2words = FixedBitSet.bits2words(numBits);\n      long[] words = new long[bits2words + random().nextInt(100)];\n      bs = new FixedBitSet(words, numBits);\n    } else {\n      bs = new FixedBitSet(numBits);\n    }\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","sourceOld":"  private FixedBitSet makeFixedBitSet(int[] a, int numBits) {\n    FixedBitSet bs;\n    if (random().nextBoolean()) {\n      int bits2words = FixedBitSet.bits2words(numBits);\n      long[] words = new long[bits2words + random().nextInt(100)];\n      for (int i = bits2words; i < words.length; i++) {\n        words[i] = random().nextLong();\n      }\n      bs = new FixedBitSet(words, numBits);\n\n    } else {\n      bs = new FixedBitSet(numBits);\n    }\n    for (int e: a) {\n      bs.set(e);\n    }\n    return bs;\n  }\n\n","bugFix":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4015cd39dff8d4dec562d909f9766debac53aa6","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["c4015cd39dff8d4dec562d909f9766debac53aa6","af918c7c328775f9fadd5870c21f0fafc2a059cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}