{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replace a templatized string with parameter substituted string. First applies the overrides, then defaults and then systemParams.\n   */\n  public static String resolve(String str, Map<String, String> defaults, Map<String, String> overrides, Map<String, String> systemParams) {\n    // TODO: Should perhaps use Matchers etc. instead of this clumsy replaceAll().\n\n    if (str == null) return null;\n    for (String param: defaults.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.containsKey(param)? overrides.get(param): defaults.get(param));\n    }\n    for (String param: overrides.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.get(param));\n    }\n    for (String param: systemParams.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", systemParams.get(param));\n    }\n    return str;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf95e850bc9618b5f30fa8cd94976c14733961d","date":1576732114,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","sourceNew":"  /**\n   * Replace a templatized string with parameter substituted string. First applies the overrides, then defaults and then systemParams.\n   */\n  public static String resolve(String str, Map<String, String> defaults, Map<String, String> overrides, Map<String, String> systemParams) {\n    // TODO: Should perhaps use Matchers etc. instead of this clumsy replaceAll().\n\n    if (str == null) return null;\n    if (defaults != null) {\n      for (String param: defaults.keySet()) {\n        str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.containsKey(param)? overrides.get(param): defaults.get(param));\n      }\n    }\n    for (String param: overrides.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.get(param));\n    }\n    for (String param: systemParams.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", systemParams.get(param));\n    }\n    return str;\n  }\n\n","sourceOld":"  /**\n   * Replace a templatized string with parameter substituted string. First applies the overrides, then defaults and then systemParams.\n   */\n  public static String resolve(String str, Map<String, String> defaults, Map<String, String> overrides, Map<String, String> systemParams) {\n    // TODO: Should perhaps use Matchers etc. instead of this clumsy replaceAll().\n\n    if (str == null) return null;\n    for (String param: defaults.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.containsKey(param)? overrides.get(param): defaults.get(param));\n    }\n    for (String param: overrides.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.get(param));\n    }\n    for (String param: systemParams.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", systemParams.get(param));\n    }\n    return str;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageUtils#resolve(String,Map[String,String],Map[String,String],Map[String,String]).mjava","sourceNew":"  /**\n   * Replace a templatized string with parameter substituted string. First applies the overrides, then defaults and then systemParams.\n   */\n  public static String resolve(String str, Map<String, String> defaults, Map<String, String> overrides, Map<String, String> systemParams) {\n    // TODO: Should perhaps use Matchers etc. instead of this clumsy replaceAll().\n\n    if (str == null) return null;\n    if (defaults != null) {\n      for (String param: defaults.keySet()) {\n        str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.containsKey(param)? overrides.get(param): defaults.get(param));\n      }\n    }\n    for (String param: overrides.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.get(param));\n    }\n    for (String param: systemParams.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", systemParams.get(param));\n    }\n    return str;\n  }\n\n","sourceOld":"  /**\n   * Replace a templatized string with parameter substituted string. First applies the overrides, then defaults and then systemParams.\n   */\n  public static String resolve(String str, Map<String, String> defaults, Map<String, String> overrides, Map<String, String> systemParams) {\n    // TODO: Should perhaps use Matchers etc. instead of this clumsy replaceAll().\n\n    if (str == null) return null;\n    for (String param: defaults.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.containsKey(param)? overrides.get(param): defaults.get(param));\n    }\n    for (String param: overrides.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", overrides.get(param));\n    }\n    for (String param: systemParams.keySet()) {\n      str = str.replaceAll(\"\\\\$\\\\{\"+param+\"\\\\}\", systemParams.get(param));\n    }\n    return str;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf95e850bc9618b5f30fa8cd94976c14733961d":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["120bc33d5cbe83eca2e5fce597baf4fef208d579","3cf95e850bc9618b5f30fa8cd94976c14733961d"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cf95e850bc9618b5f30fa8cd94976c14733961d"]},"commit2Childs":{"3cf95e850bc9618b5f30fa8cd94976c14733961d":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["3cf95e850bc9618b5f30fa8cd94976c14733961d","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}