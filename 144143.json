{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","commits":[{"id":"6842f2837919389de395b2bb61824335f40e5431","date":1337865715,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n\n    final String version = input.readString();\n\n    // nocommit: we ignore this and use the incoming arg: don't write this\n    input.readString();\n\n    final int docCount = input.readInt();\n    // nocommit: dont write this\n    final long delGen = input.readLong();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    // nocommit: don't write this\n    assert 1 == b : \"expected 1 but was: \"+ b;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    // nocommit: unused, dont write this\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit: unused, dont write this\n    final int hasVectors = input.readByte();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb579626a6376d3070a0353a64c484f55cfabc6","date":1337866286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","sourceNew":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n\n    final String version = input.readString();\n\n    // nocommit: we ignore this and use the incoming arg: don't write this\n    input.readString();\n\n    final int docCount = input.readInt();\n    // nocommit: dont write this\n    final long delGen = input.readLong();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    // nocommit: don't write this\n    assert 1 == b : \"expected 1 but was: \"+ b;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    // nocommit: unused, dont write this\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit: unused, dont write this\n    final int hasVectors = input.readByte();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee3df95012e016c229172f87a6c4077957246c4a","date":1337867023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","sourceNew":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_START,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","sourceNew":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_START,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_START,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    // nocommit: convert normgen into attributes?\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, normGen, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_START,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readUpgradedSegmentInfo(String,Directory,IndexInput).mjava","sourceNew":null,"sourceOld":"  private SegmentInfo readUpgradedSegmentInfo(String name, Directory dir, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_START,\n                                 Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n    final String version = input.readString();\n\n    final int docCount = input.readInt();\n    \n    final Map<String,String> attributes = input.readStringStringMap();\n\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final Set<String> files = input.readStringSet();\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile,\n                                       null, diagnostics, Collections.unmodifiableMap(attributes));\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee3df95012e016c229172f87a6c4077957246c4a":["dbb579626a6376d3070a0353a64c484f55cfabc6"],"dbb579626a6376d3070a0353a64c484f55cfabc6":["6842f2837919389de395b2bb61824335f40e5431"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","764b942fd30efcae6e532c19771f32eeeb0037b2"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["ee3df95012e016c229172f87a6c4077957246c4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6842f2837919389de395b2bb61824335f40e5431":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"ee3df95012e016c229172f87a6c4077957246c4a":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"dbb579626a6376d3070a0353a64c484f55cfabc6":["ee3df95012e016c229172f87a6c4077957246c4a"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6842f2837919389de395b2bb61824335f40e5431"],"6842f2837919389de395b2bb61824335f40e5431":["dbb579626a6376d3070a0353a64c484f55cfabc6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}