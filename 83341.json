{"path":"src/java/org/apache/solr/handler/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException \n  {\n    ResponseBuilder builder = new ResponseBuilder();\n    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );\n    \n    // The semantics of debugging vs not debugging are different enough that \n    // it makes sense to have two control loops\n    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {\n      // Prepare\n      for( SearchComponent c : components ) {\n        c.prepare( req, rsp );\n      }\n  \n      // Process\n      for( SearchComponent c : components ) {\n        c.process( req, rsp );\n      }\n    }\n    else {\n      builder.setDebug( true );\n      RTimer timer = new RTimer();\n      \n      // Prepare\n      RTimer subt = timer.sub( \"prepare\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.prepare( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n  \n      // Process\n      subt = timer.sub( \"process\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.process( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n      timer.stop();\n      \n      // add the timing info\n      if( builder.getDebugInfo() == null ) {\n        builder.setDebugInfo( new SimpleOrderedMap<Object>() );\n      }\n      builder.getDebugInfo().add( \"timing\", timer.asNamedList() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f896937cecbd003415d5fd0616436eaa1fb336","date":1197098869,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException \n  {\n    ResponseBuilder builder = new ResponseBuilder();\n    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );\n    \n    if( components == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"SearchHandler not initialized properly.  No components registered.\" );\n    }\n    \n    // The semantics of debugging vs not debugging are distinct enough \n    // to justify two control loops\n    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {\n      // Prepare\n      for( SearchComponent c : components ) {\n        c.prepare( req, rsp );\n      }\n  \n      // Process\n      for( SearchComponent c : components ) {\n        c.process( req, rsp );\n      }\n    }\n    else {\n      builder.setDebug( true );\n      RTimer timer = new RTimer();\n      \n      // Prepare\n      RTimer subt = timer.sub( \"prepare\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.prepare( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n  \n      // Process\n      subt = timer.sub( \"process\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.process( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n      timer.stop();\n      \n      // add the timing info\n      builder.addDebugInfo( \"timing\", timer.asNamedList() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException \n  {\n    ResponseBuilder builder = new ResponseBuilder();\n    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );\n    \n    // The semantics of debugging vs not debugging are different enough that \n    // it makes sense to have two control loops\n    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {\n      // Prepare\n      for( SearchComponent c : components ) {\n        c.prepare( req, rsp );\n      }\n  \n      // Process\n      for( SearchComponent c : components ) {\n        c.process( req, rsp );\n      }\n    }\n    else {\n      builder.setDebug( true );\n      RTimer timer = new RTimer();\n      \n      // Prepare\n      RTimer subt = timer.sub( \"prepare\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.prepare( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n  \n      // Process\n      subt = timer.sub( \"process\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.process( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n      timer.stop();\n      \n      // add the timing info\n      if( builder.getDebugInfo() == null ) {\n        builder.setDebugInfo( new SimpleOrderedMap<Object>() );\n      }\n      builder.getDebugInfo().add( \"timing\", timer.asNamedList() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7c1e9928d771e4e47fc17bc23aa91a2454b133a","date":1199894278,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SearchHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException \n  {\n    ResponseBuilder builder = new ResponseBuilder();\n    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );\n    \n    if( components == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"SearchHandler not initialized properly.  No components registered.\" );\n    }\n    \n    // The semantics of debugging vs not debugging are distinct enough \n    // to justify two control loops\n    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {\n      // Prepare\n      for( SearchComponent c : components ) {\n        c.prepare( req, rsp );\n      }\n  \n      // Process\n      for( SearchComponent c : components ) {\n        c.process( req, rsp );\n      }\n    }\n    else {\n      builder.setDebug( true );\n      RTimer timer = new RTimer();\n      \n      // Prepare\n      RTimer subt = timer.sub( \"prepare\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.prepare( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n  \n      // Process\n      subt = timer.sub( \"process\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.process( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n      timer.stop();\n      \n      // add the timing info\n      builder.addDebugInfo( \"timing\", timer.asNamedList() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException \n  {\n    ResponseBuilder builder = new ResponseBuilder();\n    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );\n    \n    if( components == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"SearchHandler not initialized properly.  No components registered.\" );\n    }\n    \n    // The semantics of debugging vs not debugging are distinct enough \n    // to justify two control loops\n    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {\n      // Prepare\n      for( SearchComponent c : components ) {\n        c.prepare( req, rsp );\n      }\n  \n      // Process\n      for( SearchComponent c : components ) {\n        c.process( req, rsp );\n      }\n    }\n    else {\n      builder.setDebug( true );\n      RTimer timer = new RTimer();\n      \n      // Prepare\n      RTimer subt = timer.sub( \"prepare\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.prepare( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n  \n      // Process\n      subt = timer.sub( \"process\" );\n      for( SearchComponent c : components ) {\n        builder.setTimer( subt.sub( c.getName() ) );\n        c.process( req, rsp );\n        builder.getTimer().stop();\n      }\n      subt.stop();\n      timer.stop();\n      \n      // add the timing info\n      builder.addDebugInfo( \"timing\", timer.asNamedList() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"68f896937cecbd003415d5fd0616436eaa1fb336":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"d7c1e9928d771e4e47fc17bc23aa91a2454b133a":["68f896937cecbd003415d5fd0616436eaa1fb336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["68f896937cecbd003415d5fd0616436eaa1fb336"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68f896937cecbd003415d5fd0616436eaa1fb336":["d7c1e9928d771e4e47fc17bc23aa91a2454b133a"],"d7c1e9928d771e4e47fc17bc23aa91a2454b133a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7c1e9928d771e4e47fc17bc23aa91a2454b133a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}