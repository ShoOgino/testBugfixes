{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4faf5124b4b354fe3f62334db03e25aef2098617","date":1501582472,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"889865904ccb84e97569ba35ada9860df9ae6f0d","date":1502460448,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info,\n            String.valueOf(core.hashCode()));\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info,\n            String.valueOf(core.hashCode()));\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","f90f26c648df8320685eb76fec8bb9972e1994c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info,\n            String.valueOf(core.hashCode()));\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadShardReporters(PluginInfo[],SolrCore).mjava","sourceNew":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo={}\", info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    // don't load for non-cloud cores\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    // prepare default plugin if none present in the config\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    // collect infos and normalize\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"43564cbb30b064675027cfb569564e8531096e97":["f90f26c648df8320685eb76fec8bb9972e1994c4","bfc52860e6d13d034226a760813c59d984c6817a"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["4faf5124b4b354fe3f62334db03e25aef2098617","889865904ccb84e97569ba35ada9860df9ae6f0d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4faf5124b4b354fe3f62334db03e25aef2098617"],"bfc52860e6d13d034226a760813c59d984c6817a":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"889865904ccb84e97569ba35ada9860df9ae6f0d":["4faf5124b4b354fe3f62334db03e25aef2098617"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"4faf5124b4b354fe3f62334db03e25aef2098617":["816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"43564cbb30b064675027cfb569564e8531096e97":["9df8125ba9193a2e2e285ed92157810b1952a244"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["f90f26c648df8320685eb76fec8bb9972e1994c4","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"816521ebaad5add9cb96bb88c577394e2938c40b":["4faf5124b4b354fe3f62334db03e25aef2098617"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"889865904ccb84e97569ba35ada9860df9ae6f0d":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"4faf5124b4b354fe3f62334db03e25aef2098617":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","889865904ccb84e97569ba35ada9860df9ae6f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}