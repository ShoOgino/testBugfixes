{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":null,"sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}