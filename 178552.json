{"path":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}