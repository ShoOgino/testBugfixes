{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ValueAtEvaluator#doWork(Object...).mjava","commits":[{"id":"cf1d9fafc37d38653a61d38a03af732cb227a0dc","date":1523640711,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ValueAtEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values[0] instanceof List) {\n\n      List<Number> c = (List<Number>) values[0];\n      int index = -1;\n      if(values.length == 2) {\n        index = ((Number)values[1]).intValue();\n        if(index >= c.size()) {\n          throw new IOException(\"Index out of bounds: \"+index);\n        }\n      } else {\n        throw new IOException(\"The valueAt function expects an array and array index as parameters.\");\n      }\n      return c.get(index);\n\n    } else if(values[0] instanceof Matrix) {\n\n      Matrix c = (Matrix) values[0];\n      double[][] data = c.getData();\n      int row = -1;\n      int col = -1;\n      if(values.length == 3) {\n        row = ((Number)values[1]).intValue();\n        if(row >= data.length) {\n          throw new IOException(\"Row index out of bounds: \"+row);\n        }\n\n        col = ((Number)values[2]).intValue();\n        if(col >= data[0].length) {\n          throw new IOException(\"Column index out of bounds: \"+col);\n        }\n\n      } else {\n        throw new IOException(\"The valueAt function expects a matrix and row and column indexes\");\n      }\n      return data[row][col];\n    } else {\n      throw new IOException(\"The valueAt function expects a numeric array or matrix as the first parameter\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ValueAtEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ValueAtEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values[0] instanceof List) {\n\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> c = (List<Number>) values[0];\n      int index = -1;\n      if(values.length == 2) {\n        index = ((Number)values[1]).intValue();\n        if(index >= c.size()) {\n          throw new IOException(\"Index out of bounds: \"+index);\n        }\n      } else {\n        throw new IOException(\"The valueAt function expects an array and array index as parameters.\");\n      }\n      return c.get(index);\n\n    } else if(values[0] instanceof Matrix) {\n\n      Matrix c = (Matrix) values[0];\n      double[][] data = c.getData();\n      int row = -1;\n      int col = -1;\n      if(values.length == 3) {\n        row = ((Number)values[1]).intValue();\n        if(row >= data.length) {\n          throw new IOException(\"Row index out of bounds: \"+row);\n        }\n\n        col = ((Number)values[2]).intValue();\n        if(col >= data[0].length) {\n          throw new IOException(\"Column index out of bounds: \"+col);\n        }\n\n      } else {\n        throw new IOException(\"The valueAt function expects a matrix and row and column indexes\");\n      }\n      return data[row][col];\n    } else {\n      throw new IOException(\"The valueAt function expects a numeric array or matrix as the first parameter\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values[0] instanceof List) {\n\n      List<Number> c = (List<Number>) values[0];\n      int index = -1;\n      if(values.length == 2) {\n        index = ((Number)values[1]).intValue();\n        if(index >= c.size()) {\n          throw new IOException(\"Index out of bounds: \"+index);\n        }\n      } else {\n        throw new IOException(\"The valueAt function expects an array and array index as parameters.\");\n      }\n      return c.get(index);\n\n    } else if(values[0] instanceof Matrix) {\n\n      Matrix c = (Matrix) values[0];\n      double[][] data = c.getData();\n      int row = -1;\n      int col = -1;\n      if(values.length == 3) {\n        row = ((Number)values[1]).intValue();\n        if(row >= data.length) {\n          throw new IOException(\"Row index out of bounds: \"+row);\n        }\n\n        col = ((Number)values[2]).intValue();\n        if(col >= data[0].length) {\n          throw new IOException(\"Column index out of bounds: \"+col);\n        }\n\n      } else {\n        throw new IOException(\"The valueAt function expects a matrix and row and column indexes\");\n      }\n      return data[row][col];\n    } else {\n      throw new IOException(\"The valueAt function expects a numeric array or matrix as the first parameter\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cf1d9fafc37d38653a61d38a03af732cb227a0dc"],"cf1d9fafc37d38653a61d38a03af732cb227a0dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1d9fafc37d38653a61d38a03af732cb227a0dc":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1d9fafc37d38653a61d38a03af732cb227a0dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}