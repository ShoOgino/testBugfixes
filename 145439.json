{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#getNumClausesCheckVisitor().mjava","commits":[{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#getNumClausesCheckVisitor().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a QueryVisitor which recursively checks the total\n   * number of clauses that a query and its children cumulatively\n   * have and validates that the total number does not exceed\n   * the specified limit\n   */\n  private static QueryVisitor getNumClausesCheckVisitor() {\n    return new QueryVisitor() {\n\n      int numClauses;\n\n      @Override\n      public QueryVisitor getSubVisitor(BooleanClause.Occur occur, Query parent) {\n        // Return this instance even for MUST_NOT and not an empty QueryVisitor\n        return this;\n      }\n\n      @Override\n      public void visitLeaf(Query query) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1bc3639daa2b0731b0eac4b50e518f492d3a23","date":1588151945,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#getNumClausesCheckVisitor().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#getNumClausesCheckVisitor().mjava","sourceNew":"  /** Returns a QueryVisitor which recursively checks the total\n   * number of clauses that a query and its children cumulatively\n   * have and validates that the total number does not exceed\n   * the specified limit\n   */\n  private static QueryVisitor getNumClausesCheckVisitor() {\n    return new QueryVisitor() {\n\n      int numClauses;\n\n      @Override\n      public QueryVisitor getSubVisitor(BooleanClause.Occur occur, Query parent) {\n        // Return this instance even for MUST_NOT and not an empty QueryVisitor\n        return this;\n      }\n\n      @Override\n      public void visitLeaf(Query query) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n\n      @Override\n      public void consumeTermsMatching(Query query, String field, Supplier<ByteRunAutomaton> automaton) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a QueryVisitor which recursively checks the total\n   * number of clauses that a query and its children cumulatively\n   * have and validates that the total number does not exceed\n   * the specified limit\n   */\n  private static QueryVisitor getNumClausesCheckVisitor() {\n    return new QueryVisitor() {\n\n      int numClauses;\n\n      @Override\n      public QueryVisitor getSubVisitor(BooleanClause.Occur occur, Query parent) {\n        // Return this instance even for MUST_NOT and not an empty QueryVisitor\n        return this;\n      }\n\n      @Override\n      public void visitLeaf(Query query) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        if (numClauses > maxClauseCount) {\n          throw new TooManyClauses();\n        }\n        ++numClauses;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"]},"commit2Childs":{"fe1bc3639daa2b0731b0eac4b50e518f492d3a23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["fe1bc3639daa2b0731b0eac4b50e518f492d3a23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}