{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560e2ea4254f72003898bd4d74a0971828130864","date":1348686997,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length()-VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","7d89d7e4e5101347833eea558851bf4209218619","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), VALUE);\n    if (type == TYPE_STRING) {\n      byte[] bytes = new byte[scratch.length() - VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, bytes, 0, bytes.length);\n      visitor.stringField(fieldInfo, bytes);\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length()-VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length()-VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), VALUE);\n    if (type == TYPE_STRING) {\n      byte[] bytes = new byte[scratch.length() - VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, bytes, 0, bytes.length);\n      visitor.stringField(fieldInfo, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length()-VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), VALUE);\n    if (type == TYPE_STRING) {\n      byte[] bytes = new byte[scratch.length() - VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, bytes, 0, bytes.length);\n      visitor.stringField(fieldInfo, bytes);\n    } else if (type == TYPE_BINARY) {\n      byte[] copy = new byte[scratch.length()-VALUE.length];\n      System.arraycopy(scratch.bytes(), VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy);\n    } else if (type == TYPE_INT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      scratchUTF16.copyUTF8Bytes(scratch.bytes(), VALUE.length, scratch.length()-VALUE.length);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["560e2ea4254f72003898bd4d74a0971828130864","7d89d7e4e5101347833eea558851bf4209218619"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["560e2ea4254f72003898bd4d74a0971828130864"],"560e2ea4254f72003898bd4d74a0971828130864":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["560e2ea4254f72003898bd4d74a0971828130864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["500188ac33da6ce742a5b18858f34701ef16c77a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"560e2ea4254f72003898bd4d74a0971828130864":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}