{"path":"lucene/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.ParametricDescription#unpack(long[],int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.ParametricDescription#unpack(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    protected int unpack(long[] data, int index, int bitsPerValue) {\n      final long bitLoc = bitsPerValue * index;\n      final int dataLoc = (int) (bitLoc >> 6);\n      final int bitStart = (int) (bitLoc & 63);\n      //System.out.println(\"index=\" + index + \" dataLoc=\" + dataLoc + \" bitStart=\" + bitStart + \" bitsPerV=\" + bitsPerValue);\n      if (bitStart + bitsPerValue <= 64) {\n        // not split\n        return (int) ((data[dataLoc] >> bitStart) & MASKS[bitsPerValue-1]);\n      } else {\n        // split\n        final int part = 64-bitStart;\n        return (int) (((data[dataLoc] >> bitStart) & MASKS[part-1]) +\n                      ((data[1+dataLoc] & MASKS[bitsPerValue-part-1]) << part));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.ParametricDescription#unpack(long[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.ParametricDescription#unpack(long[],int,int).mjava","sourceNew":"    protected int unpack(long[] data, int index, int bitsPerValue) {\n      final long bitLoc = bitsPerValue * index;\n      final int dataLoc = (int) (bitLoc >> 6);\n      final int bitStart = (int) (bitLoc & 63);\n      //System.out.println(\"index=\" + index + \" dataLoc=\" + dataLoc + \" bitStart=\" + bitStart + \" bitsPerV=\" + bitsPerValue);\n      if (bitStart + bitsPerValue <= 64) {\n        // not split\n        return (int) ((data[dataLoc] >> bitStart) & MASKS[bitsPerValue-1]);\n      } else {\n        // split\n        final int part = 64-bitStart;\n        return (int) (((data[dataLoc] >> bitStart) & MASKS[part-1]) +\n                      ((data[1+dataLoc] & MASKS[bitsPerValue-part-1]) << part));\n      }\n    }\n\n","sourceOld":"    protected int unpack(long[] data, int index, int bitsPerValue) {\n      final long bitLoc = bitsPerValue * index;\n      final int dataLoc = (int) (bitLoc >> 6);\n      final int bitStart = (int) (bitLoc & 63);\n      //System.out.println(\"index=\" + index + \" dataLoc=\" + dataLoc + \" bitStart=\" + bitStart + \" bitsPerV=\" + bitsPerValue);\n      if (bitStart + bitsPerValue <= 64) {\n        // not split\n        return (int) ((data[dataLoc] >> bitStart) & MASKS[bitsPerValue-1]);\n      } else {\n        // split\n        final int part = 64-bitStart;\n        return (int) (((data[dataLoc] >> bitStart) & MASKS[part-1]) +\n                      ((data[1+dataLoc] & MASKS[bitsPerValue-part-1]) << part));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}