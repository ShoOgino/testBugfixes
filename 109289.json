{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION) {\n      // don't ever write an index, we dont want to use RAM :)\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }  \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION) {\n      // don't ever write an index, we dont want to use RAM :)\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }  \n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION) {\n      // don't ever write an index, we dont want to use RAM :)\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }  \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION) {\n      // don't ever write an index, we dont want to use RAM :)\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }  \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DiskDocValuesFormat.DATA_CODEC, \n                                            DiskDocValuesFormat.DATA_EXTENSION, \n                                            DiskDocValuesFormat.META_CODEC, \n                                            DiskDocValuesFormat.META_EXTENSION) {\n      // don't ever write an index, we dont want to use RAM :)\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }  \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["0ad01348544f9eb6ee985c300245013a75addfc6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0ad01348544f9eb6ee985c300245013a75addfc6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0ad01348544f9eb6ee985c300245013a75addfc6"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0ad01348544f9eb6ee985c300245013a75addfc6":["11a746437bc5c0a0b3df0337ed249c387c812871","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}