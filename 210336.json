{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsWriter.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsWriter.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11764865fb318bf86302eab36bdf9cd00c50c110"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","sourceNew":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","sourceOld":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsWriter.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsWriter.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2684bcb2a921b6b5b76f64ba986564ab1ef0649d","date":1202988124,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","sourceNew":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n        assert vectorFieldsInOrder(fieldInfo);\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","sourceOld":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#writeVectors(FieldInfo).mjava","sourceNew":null,"sourceOld":"      /** Called once per field per document if term vectors\n       *  are enabled, to write the vectors to *\n       *  RAMOutputStream, which is then quickly flushed to\n       *  * the real term vectors files in the Directory. */\n      void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n        assert fieldInfo.storeTermVector;\n        assert vectorFieldsInOrder(fieldInfo);\n\n        vectorFieldNumbers[numVectorFields] = fieldInfo.number;\n        vectorFieldPointers[numVectorFields] = tvfLocal.getFilePointer();\n        numVectorFields++;\n\n        final int numPostingsVectors = postingsVectorsUpto;\n\n        tvfLocal.writeVInt(numPostingsVectors);\n        byte bits = 0x0;\n        if (doVectorPositions)\n          bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n        if (doVectorOffsets) \n          bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n        tvfLocal.writeByte(bits);\n\n        doVectorSort(postingsVectors, numPostingsVectors);\n\n        Posting lastPosting = null;\n\n        final ByteSliceReader reader = vectorSliceReader;\n\n        for(int j=0;j<numPostingsVectors;j++) {\n          PostingVector vector = postingsVectors[j];\n          Posting posting = vector.p;\n          final int freq = posting.docFreq;\n          \n          final int prefix;\n          final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];\n          final int start2 = posting.textStart & CHAR_BLOCK_MASK;\n          int pos2 = start2;\n\n          // Compute common prefix between last term and\n          // this term\n          if (lastPosting == null)\n            prefix = 0;\n          else {\n            final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];\n            final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;\n            int pos1 = start1;\n            while(true) {\n              final char c1 = text1[pos1];\n              final char c2 = text2[pos2];\n              if (c1 != c2 || c1 == 0xffff) {\n                prefix = pos1-start1;\n                break;\n              }\n              pos1++;\n              pos2++;\n            }\n          }\n          lastPosting = posting;\n\n          // Compute length\n          while(text2[pos2] != 0xffff)\n            pos2++;\n\n          final int suffix = pos2 - start2 - prefix;\n          tvfLocal.writeVInt(prefix);\n          tvfLocal.writeVInt(suffix);\n          tvfLocal.writeChars(text2, start2 + prefix, suffix);\n          tvfLocal.writeVInt(freq);\n\n          if (doVectorPositions) {\n            reader.init(vectorsPool, vector.posStart, vector.posUpto);\n            reader.writeTo(tvfLocal);\n          }\n\n          if (doVectorOffsets) {\n            reader.init(vectorsPool, vector.offsetStart, vector.offsetUpto);\n            reader.writeTo(tvfLocal);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["11764865fb318bf86302eab36bdf9cd00c50c110"],"11764865fb318bf86302eab36bdf9cd00c50c110":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["5a0af3a442be522899177e5e11384a45a6784a3f"],"11764865fb318bf86302eab36bdf9cd00c50c110":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["11764865fb318bf86302eab36bdf9cd00c50c110"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}