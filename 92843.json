{"path":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#detectParser(Record).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#detectParser(Record).mjava","pathOld":"/dev/null","sourceNew":"    private Parser detectParser(Record record) {\n      if (!hasAtLeastOneMimeType(record)) {\n        return null;\n      }\n      String mediaTypeStr = (String) record.getFirstValue(Fields.ATTACHMENT_MIME_TYPE); //ExtractingParams.STREAM_TYPE);\n      assert mediaTypeStr != null;\n      \n      MediaType mediaType = parseMediaType(mediaTypeStr).getBaseType();\n      Parser parser = mediaTypeToParserMap.get(mediaType); // fast path\n      if (parser != null) {\n        return parser;\n      }\n      // wildcard matching\n      for (Map.Entry<MediaType, Parser> entry : mediaTypeToParserMap.entrySet()) {\n        if (isMediaTypeMatch(mediaType, entry.getKey())) {\n          return entry.getValue();\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No supported MIME type parser found for \" + Fields.ATTACHMENT_MIME_TYPE + \"=\" + mediaTypeStr);\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#detectParser(Record).mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#detectParser(Record).mjava","sourceNew":"    private Parser detectParser(Record record) {\n      if (!hasAtLeastOneMimeType(record)) {\n        return null;\n      }\n      String mediaTypeStr = (String) record.getFirstValue(Fields.ATTACHMENT_MIME_TYPE); //ExtractingParams.STREAM_TYPE);\n      assert mediaTypeStr != null;\n      \n      MediaType mediaType = parseMediaType(mediaTypeStr).getBaseType();\n      Parser parser = mediaTypeToParserMap.get(mediaType); // fast path\n      if (parser != null) {\n        return parser;\n      }\n      // wildcard matching\n      for (Map.Entry<MediaType, Parser> entry : mediaTypeToParserMap.entrySet()) {\n        if (isMediaTypeMatch(mediaType, entry.getKey())) {\n          return entry.getValue();\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No supported MIME type parser found for \" + Fields.ATTACHMENT_MIME_TYPE + \"=\" + mediaTypeStr);\n      }\n      return null;\n    }\n\n","sourceOld":"    private Parser detectParser(Record record) {\n      if (!hasAtLeastOneMimeType(record)) {\n        return null;\n      }\n      String mediaTypeStr = (String) record.getFirstValue(Fields.ATTACHMENT_MIME_TYPE); //ExtractingParams.STREAM_TYPE);\n      assert mediaTypeStr != null;\n      \n      MediaType mediaType = parseMediaType(mediaTypeStr).getBaseType();\n      Parser parser = mediaTypeToParserMap.get(mediaType); // fast path\n      if (parser != null) {\n        return parser;\n      }\n      // wildcard matching\n      for (Map.Entry<MediaType, Parser> entry : mediaTypeToParserMap.entrySet()) {\n        if (isMediaTypeMatch(mediaType, entry.getKey())) {\n          return entry.getValue();\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No supported MIME type parser found for \" + Fields.ATTACHMENT_MIME_TYPE + \"=\" + mediaTypeStr);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}