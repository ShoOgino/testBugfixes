{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset);\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","e4db7734414fc682d619339760cc21cc16cd0b1d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset);\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4db7734414fc682d619339760cc21cc16cd0b1d","date":1295892961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset);\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset);\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff28d83336d21b964812b94574b7e8cea46a3cc","date":1297437050,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipInterval) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    //System.out.println(\"StandardR.nextTerm seg=\" + segment);\n    final boolean isFirstTerm = termState.termCount == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    //System.out.println(\"  dF=\" + termState.docFreq);\n    //System.out.println(\"  freqFP=\" + termState.freqOffset);\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      //System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVInt();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["aff28d83336d21b964812b94574b7e8cea46a3cc"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"e4db7734414fc682d619339760cc21cc16cd0b1d":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["e4db7734414fc682d619339760cc21cc16cd0b1d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","e4db7734414fc682d619339760cc21cc16cd0b1d"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4db7734414fc682d619339760cc21cc16cd0b1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"e4db7734414fc682d619339760cc21cc16cd0b1d":["aff28d83336d21b964812b94574b7e8cea46a3cc","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e4db7734414fc682d619339760cc21cc16cd0b1d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}