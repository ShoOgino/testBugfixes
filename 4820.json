{"path":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","commits":[{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"/dev/null","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decRef() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decRef() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decRef() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decRef() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653534f92e19662cbe285c9c01801afbe2247da3","date":1260576498,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this point\n        if (freqStream != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"699a9764d08bf474798b93a3479e02814b280e0d","date":1264612605,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initialzing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldcAche.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this point\n        if (freqStream != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23eb7e2a53bccd576220598251f35f24ee17c147","date":1264613134,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initialzing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initialzing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldcAche.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bddac3df48f833e877e223b7ec7adf3c63f0d60","date":1264613295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initialzing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#decRef().mjava","sourceNew":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void decRef() throws IOException {\n\n      if (ref.decrementAndGet() == 0) {\n\n        // close everything, nothing is shared anymore with other readers\n        if (tis != null) {\n          tis.close();\n          // null so if an app hangs on to us we still free most ram\n          tis = null;\n        }\n        \n        if (tisNoIndex != null) {\n          tisNoIndex.close();\n        }\n        \n        if (freqStream != null) {\n          freqStream.close();\n        }\n\n        if (proxStream != null) {\n          proxStream.close();\n        }\n\n        if (termVectorsReaderOrig != null) {\n          termVectorsReaderOrig.close();\n        }\n  \n        if (fieldsReaderOrig != null) {\n          fieldsReaderOrig.close();\n        }\n  \n        if (cfsReader != null) {\n          cfsReader.close();\n        }\n  \n        if (storeCFSReader != null) {\n          storeCFSReader.close();\n        }\n\n        // Force FieldCache to evict our entries at this\n        // point.  If the exception occurred while\n        // initializing the core readers, then\n        // origInstance will be null, and we don't want\n        // to call FieldCache.purge (it leads to NPE):\n        if (origInstance != null) {\n          FieldCache.DEFAULT.purge(origInstance);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"653534f92e19662cbe285c9c01801afbe2247da3":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"4bddac3df48f833e877e223b7ec7adf3c63f0d60":["23eb7e2a53bccd576220598251f35f24ee17c147"],"23eb7e2a53bccd576220598251f35f24ee17c147":["699a9764d08bf474798b93a3479e02814b280e0d"],"961159f13aece73fbb30aea720e77a2237e8bafd":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"699a9764d08bf474798b93a3479e02814b280e0d":["653534f92e19662cbe285c9c01801afbe2247da3"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4bddac3df48f833e877e223b7ec7adf3c63f0d60"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"653534f92e19662cbe285c9c01801afbe2247da3":["699a9764d08bf474798b93a3479e02814b280e0d"],"4bddac3df48f833e877e223b7ec7adf3c63f0d60":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"23eb7e2a53bccd576220598251f35f24ee17c147":["4bddac3df48f833e877e223b7ec7adf3c63f0d60"],"961159f13aece73fbb30aea720e77a2237e8bafd":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"699a9764d08bf474798b93a3479e02814b280e0d":["23eb7e2a53bccd576220598251f35f24ee17c147"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["653534f92e19662cbe285c9c01801afbe2247da3"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}