{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile.toPath());\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      if (!tmpfile.delete()) {\n        tmpfile.deleteOnExit();\n      }\n\n      return map;\n    }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          Files.newInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile);\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          new FileInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile.toPath());\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf30702df55f3384decc4b0e1033e8bc322e4c71","date":1465480090,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      try (DataInputStream in = new DataInputStream(new BufferedInputStream(\n          Files.newInputStream(tmpfile)))) {\n        map = new int[in.readInt()];\n        // NOTE: The current code assumes here that the map is complete,\n        // i.e., every ordinal gets one and exactly one value. Otherwise,\n        // we may run into an EOF here, or vice versa, not read everything.\n        for (int i=0; i<map.length; i++) {\n          int origordinal = in.readInt();\n          int newordinal = in.readInt();\n          map[origordinal] = newordinal;\n        }\n      }\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile);\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          Files.newInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile);\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.DiskOrdinalMap#getMap().mjava","sourceNew":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      try (DataInputStream in = new DataInputStream(new BufferedInputStream(\n          Files.newInputStream(tmpfile)))) {\n        map = new int[in.readInt()];\n        // NOTE: The current code assumes here that the map is complete,\n        // i.e., every ordinal gets one and exactly one value. Otherwise,\n        // we may run into an EOF here, or vice versa, not read everything.\n        for (int i=0; i<map.length; i++) {\n          int origordinal = in.readInt();\n          int newordinal = in.readInt();\n          map[origordinal] = newordinal;\n        }\n      }\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile);\n\n      return map;\n    }\n\n","sourceOld":"    @Override\n    public int[] getMap() throws IOException {\n      if (map!=null) {\n        return map;\n      }\n      addDone(); // in case this wasn't previously called\n      DataInputStream in = new DataInputStream(new BufferedInputStream(\n          Files.newInputStream(tmpfile)));\n      map = new int[in.readInt()];\n      // NOTE: The current code assumes here that the map is complete,\n      // i.e., every ordinal gets one and exactly one value. Otherwise,\n      // we may run into an EOF here, or vice versa, not read everything.\n      for (int i=0; i<map.length; i++) {\n        int origordinal = in.readInt();\n        int newordinal = in.readInt();\n        map[origordinal] = newordinal;\n      }\n      in.close();\n\n      // Delete the temporary file, which is no longer needed.\n      Files.delete(tmpfile);\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf30702df55f3384decc4b0e1033e8bc322e4c71":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f4abec28b874149a7223e32cc7a01704c27790de","bf30702df55f3384decc4b0e1033e8bc322e4c71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf30702df55f3384decc4b0e1033e8bc322e4c71"]},"commit2Childs":{"bf30702df55f3384decc4b0e1033e8bc322e4c71":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["bf30702df55f3384decc4b0e1033e8bc322e4c71","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d0d579490a72f2e6297eaa648940611234c57cf1":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}