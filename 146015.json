{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncodingPermutations(int,int,int,int,int,int).mjava","commits":[{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncodingPermutations(int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  //[a,b,c] == [c,a,b] == [b,c,a] == [c,b,a] == [b,a,c] == [a,c,b]\n  public void verifyEncodingPermutations(int alatEnc, int alonEnc, int blatEnc, int blonEnc, int clatEnc, int clonEnc) {\n    //this is only valid when points are not co-planar\n    assertTrue(GeoUtils.orient(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc) != 0);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    //[a,b,c]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encodedABC = new int[6];\n    LatLonShape.decodeTriangle(b, encodedABC);\n    //[c,a,b]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, alatEnc, alonEnc, blatEnc, blonEnc);\n    int[] encodedCAB = new int[6];\n    LatLonShape.decodeTriangle(b, encodedCAB);\n    assertTrue(Arrays.equals(encodedABC, encodedCAB));\n    //[b,c,a]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, clatEnc, clonEnc, alatEnc, alonEnc);\n    int[] encodedBCA = new int[6];\n    LatLonShape.decodeTriangle(b, encodedBCA);\n    assertTrue(Arrays.equals(encodedABC, encodedBCA));\n    //[c,b,a]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, blatEnc, blonEnc, alatEnc, alonEnc);\n    int[] encodedCBA= new int[6];\n    LatLonShape.decodeTriangle(b, encodedCBA);\n    assertTrue(Arrays.equals(encodedABC, encodedCBA));\n    //[b,a,c]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, alatEnc, alonEnc, clatEnc, clonEnc);\n    int[] encodedBAC= new int[6];\n    LatLonShape.decodeTriangle(b, encodedBAC);\n    assertTrue(Arrays.equals(encodedABC, encodedBAC));\n    //[a,c,b]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, clatEnc, clonEnc, blatEnc, blonEnc);\n    int[] encodedACB= new int[6];\n    LatLonShape.decodeTriangle(b, encodedACB);\n    assertTrue(Arrays.equals(encodedABC, encodedACB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a7c6b3c53318581ef3ddb386d90298695de120d","date":1550591901,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#verifyEncodingPermutations(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncodingPermutations(int,int,int,int,int,int).mjava","sourceNew":"  //[a,b,c] == [c,a,b] == [b,c,a] == [c,b,a] == [b,a,c] == [a,c,b]\n  public void verifyEncodingPermutations(int alatEnc, int alonEnc, int blatEnc, int blonEnc, int clatEnc, int clonEnc) {\n    //this is only valid when points are not co-planar\n    assertTrue(GeoUtils.orient(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc) != 0);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    //[a,b,c]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encodedABC = new int[6];\n    LatLonShape.decodeTriangle(b, encodedABC);\n    //[c,a,b]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, alatEnc, alonEnc, blatEnc, blonEnc);\n    int[] encodedCAB = new int[6];\n    LatLonShape.decodeTriangle(b, encodedCAB);\n    assertTrue(Arrays.equals(encodedABC, encodedCAB));\n    //[b,c,a]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, clatEnc, clonEnc, alatEnc, alonEnc);\n    int[] encodedBCA = new int[6];\n    LatLonShape.decodeTriangle(b, encodedBCA);\n    assertTrue(Arrays.equals(encodedABC, encodedBCA));\n    //[c,b,a]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, blatEnc, blonEnc, alatEnc, alonEnc);\n    int[] encodedCBA= new int[6];\n    LatLonShape.decodeTriangle(b, encodedCBA);\n    assertTrue(Arrays.equals(encodedABC, encodedCBA));\n    //[b,a,c]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, alatEnc, alonEnc, clatEnc, clonEnc);\n    int[] encodedBAC= new int[6];\n    LatLonShape.decodeTriangle(b, encodedBAC);\n    assertTrue(Arrays.equals(encodedABC, encodedBAC));\n    //[a,c,b]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, clatEnc, clonEnc, blatEnc, blonEnc);\n    int[] encodedACB= new int[6];\n    LatLonShape.decodeTriangle(b, encodedACB);\n    assertTrue(Arrays.equals(encodedABC, encodedACB));\n  }\n\n","sourceOld":"  //[a,b,c] == [c,a,b] == [b,c,a] == [c,b,a] == [b,a,c] == [a,c,b]\n  public void verifyEncodingPermutations(int alatEnc, int alonEnc, int blatEnc, int blonEnc, int clatEnc, int clonEnc) {\n    //this is only valid when points are not co-planar\n    assertTrue(GeoUtils.orient(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc) != 0);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    //[a,b,c]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encodedABC = new int[6];\n    LatLonShape.decodeTriangle(b, encodedABC);\n    //[c,a,b]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, alatEnc, alonEnc, blatEnc, blonEnc);\n    int[] encodedCAB = new int[6];\n    LatLonShape.decodeTriangle(b, encodedCAB);\n    assertTrue(Arrays.equals(encodedABC, encodedCAB));\n    //[b,c,a]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, clatEnc, clonEnc, alatEnc, alonEnc);\n    int[] encodedBCA = new int[6];\n    LatLonShape.decodeTriangle(b, encodedBCA);\n    assertTrue(Arrays.equals(encodedABC, encodedBCA));\n    //[c,b,a]\n    LatLonShape.encodeTriangle(b, clatEnc, clonEnc, blatEnc, blonEnc, alatEnc, alonEnc);\n    int[] encodedCBA= new int[6];\n    LatLonShape.decodeTriangle(b, encodedCBA);\n    assertTrue(Arrays.equals(encodedABC, encodedCBA));\n    //[b,a,c]\n    LatLonShape.encodeTriangle(b, blatEnc, blonEnc, alatEnc, alonEnc, clatEnc, clonEnc);\n    int[] encodedBAC= new int[6];\n    LatLonShape.decodeTriangle(b, encodedBAC);\n    assertTrue(Arrays.equals(encodedABC, encodedBAC));\n    //[a,c,b]\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, clatEnc, clonEnc, blatEnc, blonEnc);\n    int[] encodedACB= new int[6];\n    LatLonShape.decodeTriangle(b, encodedACB);\n    assertTrue(Arrays.equals(encodedABC, encodedACB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["2aeefba8262036d422d639e48c49d51316bea138"],"2aeefba8262036d422d639e48c49d51316bea138":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a7c6b3c53318581ef3ddb386d90298695de120d"]},"commit2Childs":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2aeefba8262036d422d639e48c49d51316bea138":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}