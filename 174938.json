{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["32ef722831135736529762b4b97a13dd58b06f66"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}