{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","commits":[{"id":"a54220739e069bc527a5e0a9982e5a9e1367493d","date":1453803260,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","pathOld":"/dev/null","sourceNew":"  public void testScaleUnscaleIsStable() throws Exception {\n    int iters = atLeast(1000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n\n      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":0,"author":"jbernste","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","pathOld":"/dev/null","sourceNew":"  public void testScaleUnscaleIsStable() throws Exception {\n    int iters = atLeast(1000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n\n      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","pathOld":"/dev/null","sourceNew":"  public void testScaleUnscaleIsStable() throws Exception {\n    int iters = atLeast(1000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n\n      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","sourceNew":null,"sourceOld":"  public void testScaleUnscaleIsStable() throws Exception {\n    int iters = atLeast(1000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n\n      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testScaleUnscaleIsStable().mjava","sourceNew":null,"sourceOld":"  public void testScaleUnscaleIsStable() throws Exception {\n    int iters = atLeast(1000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n\n      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a54220739e069bc527a5e0a9982e5a9e1367493d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac88193d9fe80e165a43bb0555c43afa83da8330"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ac88193d9fe80e165a43bb0555c43afa83da8330","94ee361295fb38310ac4d53cb4773d1622423d68"],"a54220739e069bc527a5e0a9982e5a9e1367493d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["94ee361295fb38310ac4d53cb4773d1622423d68","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac88193d9fe80e165a43bb0555c43afa83da8330","1e6acbaae7af722f17204ceccf0f7db5753eccf3","a54220739e069bc527a5e0a9982e5a9e1367493d"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a54220739e069bc527a5e0a9982e5a9e1367493d":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}