{"path":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","commits":[{"id":"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a","date":1478684774,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c99b4c76a5295b578ef0f73f93244c59d6800ea3","date":1487772940,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/ReplicaListTransformerTest#testTransform().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ReplicaListTransformerTest#testTransform().mjava","sourceNew":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTransform() throws Exception {\n\n    final String regex = \".*\" + random().nextInt(10) + \".*\";\n\n    final ReplicaListTransformer transformer;\n    if (random().nextBoolean()) {\n\n      transformer = new ToyMatchingReplicaListTransformer(regex);\n\n    } else {\n\n      transformer = new HttpShardHandlerFactory() {\n\n        @Override\n        protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n        {\n          final SolrParams params = req.getParams();\n\n          if (params.getBool(\"toyNoTransform\", false)) {\n            return new ToyNoOpReplicaListTransformer();\n          }\n\n          final String regex = params.get(\"toyRegEx\");\n          if (regex != null) {\n            return new ToyMatchingReplicaListTransformer(regex);\n          }\n\n          return super.getReplicaListTransformer(req);\n        }\n\n      }.getReplicaListTransformer(\n          new LocalSolrQueryRequest(null,\n              new ModifiableSolrParams().add(\"toyRegEx\", regex)));\n    }\n\n    final List<Replica> inputs = new ArrayList<>();\n    final List<Replica> expectedTransformed = new ArrayList<>();\n\n    final List<String> urls = createRandomUrls();\n    for (int ii=0; ii<urls.size(); ++ii) {\n\n      final String name = \"replica\"+(ii+1);\n      final String url = urls.get(ii);\n      final Map<String,Object> propMap = new HashMap<String,Object>();\n      propMap.put(\"base_url\", url);\n      // a skeleton replica, good enough for this test's purposes\n      final Replica replica = new Replica(name, propMap);\n\n      inputs.add(replica);\n      if (url.matches(regex)) {\n        expectedTransformed.add(replica);\n      }\n    }\n\n    final List<Replica> actualTransformed = new ArrayList<>(inputs);\n    transformer.transform(actualTransformed);\n\n    assertEquals(expectedTransformed.size(), actualTransformed.size());\n    for (int ii=0; ii<expectedTransformed.size(); ++ii) {\n      assertEquals(\"mismatch for ii=\"+ii, expectedTransformed.get(ii), actualTransformed.get(ii));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["c99b4c76a5295b578ef0f73f93244c59d6800ea3"],"c99b4c76a5295b578ef0f73f93244c59d6800ea3":["f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c99b4c76a5295b578ef0f73f93244c59d6800ea3":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["c99b4c76a5295b578ef0f73f93244c59d6800ea3","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}