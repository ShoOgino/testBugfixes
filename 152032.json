{"path":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllFieldNames().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllFieldNames().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asks the LukeRequestHandler on the control client for a list of the fields in the schema - excluding _version_\n   */\n  private Collection<String> getAllFieldNames() throws SolrServerException, IOException {\n    LukeRequest req = new LukeRequest(\"/admin/luke\");\n    req.setShowSchema(true); \n    NamedList<Object> rsp = controlClient.request(req);\n    NamedList<Object> fields = (NamedList) ((NamedList)rsp.get(\"schema\")).get(\"fields\");\n    ArrayList<String> names = new ArrayList<String>(fields.size());\n    for (Map.Entry<String,Object> item : fields) {\n      String f = item.getKey();\n      if (! f.equals(\"_version_\")) {\n        names.add(item.getKey());\n      }\n    }\n    return Collections.<String>unmodifiableCollection(names);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd6d2ce12ab9b3bef6559744b54e95242cf5747","date":1390347163,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllFieldNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllFieldNames().mjava","sourceNew":"  /**\n   * Asks the LukeRequestHandler on the control client for a list of the fields in the \n   * schema (excluding _version_) and then returns the field names in a deterministically \n   * random order.\n   */\n  private List<String> getAllFieldNames() throws SolrServerException, IOException {\n    LukeRequest req = new LukeRequest(\"/admin/luke\");\n    req.setShowSchema(true); \n    NamedList<Object> rsp = controlClient.request(req);\n    NamedList<Object> fields = (NamedList) ((NamedList)rsp.get(\"schema\")).get(\"fields\");\n    ArrayList<String> names = new ArrayList<String>(fields.size());\n    for (Map.Entry<String,Object> item : fields) {\n      String f = item.getKey();\n      if (! f.equals(\"_version_\")) {\n        names.add(item.getKey());\n      }\n    }\n    Collections.sort(names);\n    Collections.shuffle(names,random());\n    return Collections.<String>unmodifiableList(names);\n  }\n\n","sourceOld":"  /**\n   * Asks the LukeRequestHandler on the control client for a list of the fields in the schema - excluding _version_\n   */\n  private Collection<String> getAllFieldNames() throws SolrServerException, IOException {\n    LukeRequest req = new LukeRequest(\"/admin/luke\");\n    req.setShowSchema(true); \n    NamedList<Object> rsp = controlClient.request(req);\n    NamedList<Object> fields = (NamedList) ((NamedList)rsp.get(\"schema\")).get(\"fields\");\n    ArrayList<String> names = new ArrayList<String>(fields.size());\n    for (Map.Entry<String,Object> item : fields) {\n      String f = item.getKey();\n      if (! f.equals(\"_version_\")) {\n        names.add(item.getKey());\n      }\n    }\n    return Collections.<String>unmodifiableCollection(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","date":1390935815,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllSortFieldNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#getAllFieldNames().mjava","sourceNew":"  /**\n   * Asks the LukeRequestHandler on the control client for a list of the fields in the \n   * schema and then prunes that list down to just the fields that can be used for sorting,\n   * and returns them as an immutable list in a deterministically random order.\n   */\n  private List<String> getAllSortFieldNames() throws SolrServerException, IOException {\n    LukeRequest req = new LukeRequest(\"/admin/luke\");\n    req.setShowSchema(true); \n    NamedList<Object> rsp = controlClient.request(req);\n    NamedList<Object> fields = (NamedList) ((NamedList)rsp.get(\"schema\")).get(\"fields\");\n    ArrayList<String> names = new ArrayList<String>(fields.size());\n    for (Map.Entry<String,Object> item : fields) {\n      names.add(item.getKey());\n    }\n    \n    return CursorPagingTest.pruneAndDeterministicallySort(names);\n  }\n\n","sourceOld":"  /**\n   * Asks the LukeRequestHandler on the control client for a list of the fields in the \n   * schema (excluding _version_) and then returns the field names in a deterministically \n   * random order.\n   */\n  private List<String> getAllFieldNames() throws SolrServerException, IOException {\n    LukeRequest req = new LukeRequest(\"/admin/luke\");\n    req.setShowSchema(true); \n    NamedList<Object> rsp = controlClient.request(req);\n    NamedList<Object> fields = (NamedList) ((NamedList)rsp.get(\"schema\")).get(\"fields\");\n    ArrayList<String> names = new ArrayList<String>(fields.size());\n    for (Map.Entry<String,Object> item : fields) {\n      String f = item.getKey();\n      if (! f.equals(\"_version_\")) {\n        names.add(item.getKey());\n      }\n    }\n    Collections.sort(names);\n    Collections.shuffle(names,random());\n    return Collections.<String>unmodifiableList(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["cbd6d2ce12ab9b3bef6559744b54e95242cf5747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"cbd6d2ce12ab9b3bef6559744b54e95242cf5747":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["cbd6d2ce12ab9b3bef6559744b54e95242cf5747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbd6d2ce12ab9b3bef6559744b54e95242cf5747":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}