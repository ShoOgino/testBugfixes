{"path":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5f000280bc18391509bbb40c4a2a2c7515d54d3","date":1339339354,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer(reader) {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery.Builder mqb = new MultiPhraseQuery.Builder();\n    mqb.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mqb.build(), 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery.Builder mqb = new MultiPhraseQuery.Builder();\n    mqb.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mqb.build(), 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiTerms.getTermPostingsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiTerms.getTermPostingsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery.Builder mqb = new MultiPhraseQuery.Builder();\n    mqb.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mqb.build(), 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new Tokenizer() {\n          // TODO: use CannedTokenStream\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, analyzer);\n    Document d = new Document();\n    d.add(newTextField(\"field\", \"bogus\", Field.Store.YES));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    PostingsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery(\"field\", \"1\", \"2\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, using the builder with implicit positions\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"));\n    builder.add(new Term(\"field\", \"2\"));\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 1);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"1\"), 0);\n    builder.add(new Term(\"field\", \"2\"), 2);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"3\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"4\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    builder = new PhraseQuery.Builder();\n    builder.add(new Term(\"field\", \"3\"), 0);\n    builder.add(new Term(\"field\", \"9\"), 0);\n    q = builder.build();\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery.Builder mqb = new MultiPhraseQuery.Builder();\n    mqb.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mqb.build(), 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"4\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"3\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"4\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery(\"field\", \"2\", \"5\");\n    hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["e9e1499c5d26c936238506df90a3c02c76707722"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0f4464508ee83288c8c4585b533f9faaa93aa314","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e9e1499c5d26c936238506df90a3c02c76707722":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}