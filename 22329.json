{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","commits":[{"id":"355e2dd55d9b49981e73c768a54a747cd9368043","date":1491217809,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    // TODO: use debugQuery\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40036548b3665dfcf4d03aaf89048c52bed8202d","date":1491220876,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","sourceNew":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    if (debugQuery) {\n      assertJQ(\"/query\" + query.toQueryString(),\n          \"/debug/explain/\"+docId+\"=='\\n\"+origScoreFeatureValue+\" = LinearModel(name=\"+modelName+\",featureWeights=[\"+origScoreFeatureName+\"=1.0]) model applied to features, sum of:\\n  \"+origScoreFeatureValue+\" = prod of:\\n    1.0 = weight on feature\\n    \"+origScoreFeatureValue+\" = OriginalScoreFeature [query:\"+query.getQuery()+\"]\\n'\");\n    }\n  }\n\n","sourceOld":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    // TODO: use debugQuery\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","date":1491296430,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    // TODO: use debugQuery\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e18edf2fddf9b92ee8a51545fdaee23f3b527f73","date":1491296430,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,SolrQuery,int,int,String,String,String,String,boolean).mjava","sourceNew":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    if (debugQuery) {\n      assertJQ(\"/query\" + query.toQueryString(),\n          \"/debug/explain/\"+docId+\"=='\\n\"+origScoreFeatureValue+\" = LinearModel(name=\"+modelName+\",featureWeights=[\"+origScoreFeatureName+\"=1.0]) model applied to features, sum of:\\n  \"+origScoreFeatureValue+\" = prod of:\\n    1.0 = weight on feature\\n    \"+origScoreFeatureValue+\" = OriginalScoreFeature [query:\"+query.getQuery()+\"]\\n'\");\n    }\n  }\n\n","sourceOld":"  private static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      SolrQuery query, int docIdx, int docId,\n      String origScoreFeatureName, String origScoreFeatureValue,\n      String nonScoringFeatureName, String nonScoringFeatureValue,\n      boolean debugQuery) throws Exception {\n\n    final String fv;\n    if (nonScoringFeatureName == null) {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue);\n    } else {\n      fv = FeatureLoggerTestUtils.toFeatureVector(origScoreFeatureName, origScoreFeatureValue, nonScoringFeatureName, nonScoringFeatureValue);\n    }\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[\"+docIdx+\"]/fv=='\"+fv+\"'\");\n    // TODO: use debugQuery\n  }\n\n","bugFix":["0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"355e2dd55d9b49981e73c768a54a747cd9368043":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18edf2fddf9b92ee8a51545fdaee23f3b527f73":["0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"40036548b3665dfcf4d03aaf89048c52bed8202d":["355e2dd55d9b49981e73c768a54a747cd9368043"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["40036548b3665dfcf4d03aaf89048c52bed8202d"]},"commit2Childs":{"355e2dd55d9b49981e73c768a54a747cd9368043":["40036548b3665dfcf4d03aaf89048c52bed8202d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["355e2dd55d9b49981e73c768a54a747cd9368043","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"e18edf2fddf9b92ee8a51545fdaee23f3b527f73":[],"40036548b3665dfcf4d03aaf89048c52bed8202d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}