{"path":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#assertNumSegments(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertNumSegments(String indexDir, int numSegs) {\n    File file = new File(indexDir);\n    File[] segs = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return file.getName().endsWith(\"cfs\");\n      }\n    });\n\n    //\n    // TODO: we need a method that does not rely on physical inspection of the directory.\n    //\n    // assertTrue(\"Wrong number of segments: \" + segs.length + \" does not equal: \" + numSegs, segs.length == numSegs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7530de27b87b961b51f01bd1299b7004d46e8823","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7530de27b87b961b51f01bd1299b7004d46e8823","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}