{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","commits":[{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (!applyAllDeletes) {\n      // If deletes alone are consuming > 1/2 our RAM\n      // buffer, force them all to apply now. This is to\n      // prevent too-frequent flushing of a long tail of\n      // tiny segments:\n      if ((config.getRAMBufferSizeMB() != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n           bufferedDeletesStream.bytesUsed() > (1024*1024*config.getRAMBufferSizeMB()/2))) {\n        applyAllDeletes = true;\n        if (infoStream != null) {\n          message(\"force apply deletes bytesUsed=\" + bufferedDeletesStream.bytesUsed() + \" vs ramBuffer=\" + (1024*1024*config.getRAMBufferSizeMB()));\n        }\n      }\n    }\n\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f","e4f3b0a30c9d521b86f768348f832af93505b4eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (!applyAllDeletes) {\n      // nocommit -- shouldn't this move into the default\n      // flush policy?\n      // If deletes alone are consuming > 1/2 our RAM\n      // buffer, force them all to apply now. This is to\n      // prevent too-frequent flushing of a long tail of\n      // tiny segments:\n      if ((config.getRAMBufferSizeMB() != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n           bufferedDeletesStream.bytesUsed() > (1024*1024*config.getRAMBufferSizeMB()/2))) {\n        applyAllDeletes = true;\n        if (infoStream != null) {\n          message(\"force apply deletes bytesUsed=\" + bufferedDeletesStream.bytesUsed() + \" vs ramBuffer=\" + (1024*1024*config.getRAMBufferSizeMB()));\n        }\n      }\n    }\n\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (!applyAllDeletes) {\n      // If deletes alone are consuming > 1/2 our RAM\n      // buffer, force them all to apply now. This is to\n      // prevent too-frequent flushing of a long tail of\n      // tiny segments:\n      if ((config.getRAMBufferSizeMB() != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n           bufferedDeletesStream.bytesUsed() > (1024*1024*config.getRAMBufferSizeMB()/2))) {\n        applyAllDeletes = true;\n        if (infoStream != null) {\n          message(\"force apply deletes bytesUsed=\" + bufferedDeletesStream.bytesUsed() + \" vs ramBuffer=\" + (1024*1024*config.getRAMBufferSizeMB()));\n        }\n      }\n    }\n\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (!applyAllDeletes) {\n      // nocommit -- shouldn't this move into the default\n      // flush policy?\n      // If deletes alone are consuming > 1/2 our RAM\n      // buffer, force them all to apply now. This is to\n      // prevent too-frequent flushing of a long tail of\n      // tiny segments:\n      if ((config.getRAMBufferSizeMB() != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n           bufferedDeletesStream.bytesUsed() > (1024*1024*config.getRAMBufferSizeMB()/2))) {\n        applyAllDeletes = true;\n        if (infoStream != null) {\n          message(\"force apply deletes bytesUsed=\" + bufferedDeletesStream.bytesUsed() + \" vs ramBuffer=\" + (1024*1024*config.getRAMBufferSizeMB()));\n        }\n      }\n    }\n\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n\n  }\n\n","bugFix":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        message(\"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      message(\"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      infoStream.message(\"IW\", \"apply all deletes during flush\");\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream != null) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      infoStream.message(\"IW\", \"apply all deletes during flush\");\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      infoStream.message(\"IW\", \"apply all deletes during flush\");\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maybeApplyDeletes(boolean).mjava","sourceNew":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","sourceOld":"  final synchronized void maybeApplyDeletes(boolean applyAllDeletes) throws IOException {\n    if (applyAllDeletes) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"apply all deletes during flush\");\n      }\n      applyAllDeletes();\n    } else if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"don't apply deletes now delTermCount=\" + bufferedDeletesStream.numTerms() + \" bytesUsed=\" + bufferedDeletesStream.bytesUsed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f","a3776dccca01c11e7046323cfad46a3b4a471233"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7d45e9e2ad7f57776540627c78f5e22e469ccdc1","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}