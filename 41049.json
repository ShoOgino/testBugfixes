{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(PointWriter,long,int,int).mjava","sourceNew":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (FutureArrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","sourceOld":"  private byte[] getMin(PointWriter p, long size, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.getReader(0, size)) {\n      byte[] value = new byte[bytesPerDimension];\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (FutureArrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","sourceNew":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (FutureArrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","sourceOld":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (FutureArrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","sourceNew":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (Arrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","sourceOld":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (FutureArrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDConfig,BKDRadixSelector.PathSlice,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMin(BKDRadixSelector.PathSlice,int,int).mjava","sourceNew":"  private byte[] getMin(BKDConfig config, BKDRadixSelector.PathSlice pathSlice, int dimension) throws  IOException {\n    byte[] min = new byte[config.bytesPerDim];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = pathSlice.writer.getReader(pathSlice.start, pathSlice.count)) {\n      byte[] value = new byte[config.bytesPerDim];\n\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * config.bytesPerDim, value, 0, config.bytesPerDim);\n        if (Arrays.compareUnsigned(min, 0, config.bytesPerDim, value, 0, config.bytesPerDim) > 0) {\n          System.arraycopy(value, 0, min, 0, config.bytesPerDim);\n        }\n      }\n    }\n    return min;\n  }\n\n","sourceOld":"  private byte[] getMin(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension) throws  IOException {\n    byte[] min = new byte[bytesPerDimension];\n    Arrays.fill(min, (byte) 0xff);\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[bytesPerDimension];\n\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        System.arraycopy(packedValue.bytes, packedValue.offset + dimension * bytesPerDimension, value, 0, bytesPerDimension);\n        if (Arrays.compareUnsigned(min, 0, bytesPerDimension, value, 0, bytesPerDimension) > 0) {\n          System.arraycopy(value, 0, min, 0, bytesPerDimension);\n        }\n      }\n    }\n    return min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}