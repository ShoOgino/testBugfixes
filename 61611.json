{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","commits":[{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrShardReporter) {\n        ((SolrShardReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrClusterReporter) {\n        ((SolrClusterReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return instance of newly created and registered reporter\n   * @throws Exception if any argument is missing or invalid\n   */\n  public SolrMetricReporter loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n    return reporter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d08eb5e0605b54669b5498a5a5db3502fc932b","date":1511883595,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrShardReporter) {\n        ((SolrShardReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrClusterReporter) {\n        ((SolrClusterReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrShardReporter) {\n        ((SolrShardReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrClusterReporter) {\n        ((SolrClusterReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b967cd91d9adf8137e96f0776fd2f2b63b05bd47","date":1533212987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   *\n   * @param registry      reporter is associated with this registry\n   * @param loader        loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore      optional solr core\n   * @param pluginInfo    plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag           optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                      component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter) reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter) reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5005b977107bba28c700351216f1595e7abe4f","date":1585964712,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   *\n   * @param registry      reporter is associated with this registry\n   * @param loader        loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore      optional solr core\n   * @param pluginInfo    plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag           optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                      component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setCoreDescriptor(coreContainer, solrCore == null ? null : solrCore.getCoreDescriptor());\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter) reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter) reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   *\n   * @param registry      reporter is associated with this registry\n   * @param loader        loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore      optional solr core\n   * @param pluginInfo    plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag           optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                      component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter) reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter) reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,CoreContainer,SolrCore,PluginInfo,String).mjava","sourceNew":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   *\n   * @param registry      reporter is associated with this registry\n   * @param loader        loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore      optional solr core\n   * @param pluginInfo    plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag           optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                      component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n    new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setCoreDescriptor(coreContainer, solrCore == null ? null : solrCore.getCoreDescriptor());\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter) reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter) reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   *\n   * @param registry      reporter is associated with this registry\n   * @param loader        loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore      optional solr core\n   * @param pluginInfo    plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag           optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                      component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setCoreDescriptor(coreContainer, solrCore == null ? null : solrCore.getCoreDescriptor());\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter) reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter) reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f90f26c648df8320685eb76fec8bb9972e1994c4","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed5005b977107bba28c700351216f1595e7abe4f":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["ed5005b977107bba28c700351216f1595e7abe4f"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"ed5005b977107bba28c700351216f1595e7abe4f":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["1aad05eeff7818b0833c02ac6b743aa72054963b","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["ed5005b977107bba28c700351216f1595e7abe4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}