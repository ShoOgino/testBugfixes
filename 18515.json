{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = (IndexInput) one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92d5794f857688c529ea7d229b3d1605411101c","date":1392773920,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(isSimpleFSIndexInput(expected));\n        assertTrue(isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22c378dfd7d922a48b48093933404133eb253fe7","date":1410711399,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        // this test only works for FSIndexInput\n        assertTrue(isSimpleFSIndexInput(expected));\n        assertTrue(isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":null,"sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":null,"sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random()), false);\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n\n        IndexInput two = one.clone();\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7460755aa94143153400f49c8ac2746f5d092e1a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["22c378dfd7d922a48b48093933404133eb253fe7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["22c378dfd7d922a48b48093933404133eb253fe7","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22c378dfd7d922a48b48093933404133eb253fe7":["e92d5794f857688c529ea7d229b3d1605411101c"],"e92d5794f857688c529ea7d229b3d1605411101c":["7460755aa94143153400f49c8ac2746f5d092e1a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22c378dfd7d922a48b48093933404133eb253fe7":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"e92d5794f857688c529ea7d229b3d1605411101c":["22c378dfd7d922a48b48093933404133eb253fe7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","e92d5794f857688c529ea7d229b3d1605411101c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}