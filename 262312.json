{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea57d3346f0253c68dee891939b8cf9fba455b8","date":1532682688,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    if (current.length > MAX_TERM_LENGTH) {\n      throw new IllegalArgumentException(\"This builder doesn't allow terms that are larger than 1,000 characters, got \" + current);\n    }\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ea57d3346f0253c68dee891939b8cf9fba455b8":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ea57d3346f0253c68dee891939b8cf9fba455b8"]},"commit2Childs":{"3ea57d3346f0253c68dee891939b8cf9fba455b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["3ea57d3346f0253c68dee891939b8cf9fba455b8","fe33227f6805edab2036cbb80645cc4e2d1fa424","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}