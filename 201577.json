{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","commits":[{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b3e07e133490ed38c90c0c915c44c30f7d2523c","date":1454437146,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c","date":1454808351,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(collection, con.getSchema());\n      con.setSchema(collection);\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(collection, con.getSchema());\n      con.setSchema(collection);\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa9b48fdb08e049dc94a4077226b510eb68f2b24","date":1458766161,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(collection, con.getSchema());\n      con.setSchema(collection);\n      assertEquals(collection, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(acollection, rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CATALOG\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68858f6a73fc9f9de87216d140cf8d9caa0c7f55","date":1458772139,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc31ac5f90047da49b5f81fb52a0b874e352549","date":1461164441,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6d4d8974630b55c3dc0a5284a40650588bffa2","date":1461181703,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        assertEquals(0, statement.getFetchSize());\n        statement.setFetchSize(0);\n        assertEquals(0, statement.getFetchSize());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      // TODO fix getCatalogs, getSchemas, and getTables\n      /*\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n      */\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4e02c1bc1dfaeb78fdc5b24a5901398721a6a28","date":1461938222,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkServer.getZkAddress(), \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      // TODO fix getCatalogs, getSchemas, and getTables\n      /*\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n      */\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkServer.getZkAddress(), \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n      con.setCatalog(zkServer.getZkAddress());\n      assertEquals(zkServer.getZkAddress(), con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkServer.getZkAddress(), null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkServer.getZkAddress(), rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304f75a2a17bf5438a631f849ecd01694dd6c16","date":1483738361,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n      Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      Set<String> aliases = zkStateReader.getAliases().getCollectionAliasMap().keySet();\n      tables.addAll(collections);\n      tables.addAll(aliases);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(acollection, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c856adfa3e94de7334ef0c05b456cec536ab1","date":1485970079,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases != null) {\n        Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n        if(collectionAliasMap != null) {\n          Set<String> aliasesSet = collectionAliasMap.keySet();\n          tables.addAll(aliasesSet);\n        }\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertEquals(\"metadata\", rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n      Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      Set<String> aliases = zkStateReader.getAliases().getCollectionAliasMap().keySet();\n      tables.addAll(collections);\n      tables.addAll(aliases);\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases != null) {\n        Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n        if(collectionAliasMap != null) {\n          Set<String> aliasesSet = collectionAliasMap.keySet();\n          tables.addAll(aliasesSet);\n        }\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n        assertFalse(rs.next());\n      }\n\n      List<String> collections = new ArrayList<>();\n      collections.addAll(cluster.getSolrClient().getZkStateReader().getClusterState().getCollectionsMap().keySet());\n      Collections.sort(collections);\n\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertFalse(rs.next());\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(zkHost, null, \"%\", null)) {\n        for(String acollection : collections) {\n          assertTrue(rs.next());\n          assertEquals(zkHost, rs.getString(\"TABLE_CAT\"));\n          assertNull(rs.getString(\"TABLE_SCHEM\"));\n          assertEquals(acollection, rs.getString(\"TABLE_NAME\"));\n          assertEquals(\"TABLE\", rs.getString(\"TABLE_TYPE\"));\n          assertNull(rs.getString(\"REMARKS\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases != null) {\n        Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n        if(collectionAliasMap != null) {\n          Set<String> aliasesSet = collectionAliasMap.keySet();\n          tables.addAll(aliasesSet);\n        }\n      }\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"516e808864a6eba434bf1e9474d586b30808115c","date":1578079495,"type":3,"author":"Nick Vercammen","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      SortedSet<String> tables = new TreeSet<>(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n      try {\n        con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n        fail(\"should not have been able to set transaction isolation\");\n      } catch (SQLException e) {\n        assertEquals(UnsupportedOperationException.class, e.getCause().getClass());\n      }\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      SortedSet<String> tables = new TreeSet<>(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n      try {\n        con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n        fail(\"should not have been able to set transaction isolation\");\n      } catch (SQLException e) {\n        assertEquals(UnsupportedOperationException.class, e.getCause().getClass());\n      }\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      SortedSet<String> tables = new TreeSet<>();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      tables.addAll(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d49c0243afe9fb53937436c1001a5ab07b318901","date":1579792363,"type":3,"author":"Nick Vercammen","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testJDBCMethods(String,String,Properties,String).mjava","sourceNew":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertTrue(\"connection should be valid when checked with timeout = 0 -> con.isValid(0)\", con.isValid(0));\n\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      SortedSet<String> tables = new TreeSet<>(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n      try {\n        con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n        fail(\"should not have been able to set transaction isolation\");\n      } catch (SQLException e) {\n        assertEquals(UnsupportedOperationException.class, e.getCause().getClass());\n      }\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {\n    try (Connection con = DriverManager.getConnection(connectionString, properties)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n\n      assertEquals(zkHost, con.getCatalog());\n      con.setCatalog(zkHost);\n      assertEquals(zkHost, con.getCatalog());\n\n      assertEquals(null, con.getSchema());\n      con.setSchema(\"myschema\");\n      assertEquals(null, con.getSchema());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertEquals(4, databaseMetaData.getJDBCMajorVersion());\n      assertEquals(0, databaseMetaData.getJDBCMinorVersion());\n\n      assertEquals(\"Apache Solr\", databaseMetaData.getDatabaseProductName());\n\n      // The following tests require package information that is not available when running via Maven\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());\n//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());\n\n//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());\n//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());\n//      assertEquals(0, databaseMetaData.getDriverMajorVersion());\n//      assertEquals(0, databaseMetaData.getDriverMinorVersion());\n\n      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, \"metadata\"));\n      try(ResultSet rs = databaseMetaData.getSchemas()) {\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertTrue(rs.next());\n        assertTrue(tableSchemas.contains(rs.getString(\"tableSchem\")));\n        tableSchemas.remove(rs.getString(\"tableSchem\"));\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n        assertTrue(tableSchemas.isEmpty());\n      }\n\n      try(ResultSet rs = databaseMetaData.getCatalogs()) {\n        assertTrue(rs.next());\n        assertNull(rs.getString(\"tableCat\"));\n        assertFalse(rs.next());\n      }\n\n      CloudSolrClient solrClient = cluster.getSolrClient();\n      solrClient.connect();\n      ZkStateReader zkStateReader = solrClient.getZkStateReader();\n\n      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();\n      SortedSet<String> tables = new TreeSet<>(collectionsSet);\n\n      Aliases aliases = zkStateReader.getAliases();\n      tables.addAll(aliases.getCollectionAliasListMap().keySet());\n\n      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, \"%\", null)) {\n        for(String table : tables) {\n          assertTrue(rs.next());\n          assertNull(rs.getString(\"tableCat\"));\n          assertEquals(zkHost, rs.getString(\"tableSchem\"));\n          assertEquals(table, rs.getString(\"tableName\"));\n          assertEquals(\"TABLE\", rs.getString(\"tableType\"));\n          assertNull(rs.getString(\"remarks\"));\n        }\n        assertFalse(rs.next());\n      }\n\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n      try {\n        con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n        fail(\"should not have been able to set transaction isolation\");\n      } catch (SQLException e) {\n        assertEquals(UnsupportedOperationException.class, e.getCause().getClass());\n      }\n      assertEquals(Connection.TRANSACTION_NONE, con.getTransactionIsolation());\n\n      assertTrue(con.isReadOnly());\n      con.setReadOnly(true);\n      assertTrue(con.isReadOnly());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n\n      try (PreparedStatement statement = con.prepareStatement(sql)) {\n        checkStatement(con, statement);\n\n        try (ResultSet rs = statement.executeQuery()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute());\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"acd1f5a977dc3b97799ed300423294e2c457774f":["d2af3708aa5f155e8f27905be60c119be0e39be8","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"d49c0243afe9fb53937436c1001a5ab07b318901":["516e808864a6eba434bf1e9474d586b30808115c"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","516e808864a6eba434bf1e9474d586b30808115c"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["73450c0955930295d34703e7ddbfc6973b7a121a","7f6c856adfa3e94de7334ef0c05b456cec536ab1"],"7f6c856adfa3e94de7334ef0c05b456cec536ab1":["c304f75a2a17bf5438a631f849ecd01694dd6c16"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["9b701e0fcef214f86bab1daf107adce0b0131212","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d6d4d8974630b55c3dc0a5284a40650588bffa2":["6bc31ac5f90047da49b5f81fb52a0b874e352549"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c39fd399a800c79eff2beaad702c9b6190d499fd"],"9b701e0fcef214f86bab1daf107adce0b0131212":["68858f6a73fc9f9de87216d140cf8d9caa0c7f55","9d6d4d8974630b55c3dc0a5284a40650588bffa2"],"34960db40f081388a12ae7131547fb03236705fd":["9b701e0fcef214f86bab1daf107adce0b0131212"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"f4e02c1bc1dfaeb78fdc5b24a5901398721a6a28":["34960db40f081388a12ae7131547fb03236705fd"],"68858f6a73fc9f9de87216d140cf8d9caa0c7f55":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"73450c0955930295d34703e7ddbfc6973b7a121a":["9b701e0fcef214f86bab1daf107adce0b0131212","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"c304f75a2a17bf5438a631f849ecd01694dd6c16":["7dc08f02757dd10637b16a5c65eaaef839a91a9a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"8b3e07e133490ed38c90c0c915c44c30f7d2523c":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"b940572a59da1b42b6c20ab5278155b12816807a":["9b701e0fcef214f86bab1daf107adce0b0131212"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["f4e02c1bc1dfaeb78fdc5b24a5901398721a6a28","b940572a59da1b42b6c20ab5278155b12816807a"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["b940572a59da1b42b6c20ab5278155b12816807a"],"6bc31ac5f90047da49b5f81fb52a0b874e352549":["68858f6a73fc9f9de87216d140cf8d9caa0c7f55"],"516e808864a6eba434bf1e9474d586b30808115c":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d49c0243afe9fb53937436c1001a5ab07b318901"]},"commit2Childs":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["acd1f5a977dc3b97799ed300423294e2c457774f","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"acd1f5a977dc3b97799ed300423294e2c457774f":[],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["68858f6a73fc9f9de87216d140cf8d9caa0c7f55"],"d49c0243afe9fb53937436c1001a5ab07b318901":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"7f6c856adfa3e94de7334ef0c05b456cec536ab1":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"9d6d4d8974630b55c3dc0a5284a40650588bffa2":["9b701e0fcef214f86bab1daf107adce0b0131212"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"9b701e0fcef214f86bab1daf107adce0b0131212":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","34960db40f081388a12ae7131547fb03236705fd","73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a"],"34960db40f081388a12ae7131547fb03236705fd":["f4e02c1bc1dfaeb78fdc5b24a5901398721a6a28"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","516e808864a6eba434bf1e9474d586b30808115c"],"f4e02c1bc1dfaeb78fdc5b24a5901398721a6a28":["bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"73450c0955930295d34703e7ddbfc6973b7a121a":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","7dc08f02757dd10637b16a5c65eaaef839a91a9a"],"68858f6a73fc9f9de87216d140cf8d9caa0c7f55":["9b701e0fcef214f86bab1daf107adce0b0131212","6bc31ac5f90047da49b5f81fb52a0b874e352549"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["c304f75a2a17bf5438a631f849ecd01694dd6c16"],"c304f75a2a17bf5438a631f849ecd01694dd6c16":["7f6c856adfa3e94de7334ef0c05b456cec536ab1"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dd75f58072bba84066e89d61bd7028de1bd5b632"],"8b3e07e133490ed38c90c0c915c44c30f7d2523c":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","dd75f58072bba84066e89d61bd7028de1bd5b632"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["7dc08f02757dd10637b16a5c65eaaef839a91a9a"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"6bc31ac5f90047da49b5f81fb52a0b874e352549":["9d6d4d8974630b55c3dc0a5284a40650588bffa2"],"516e808864a6eba434bf1e9474d586b30808115c":["d49c0243afe9fb53937436c1001a5ab07b318901","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["acd1f5a977dc3b97799ed300423294e2c457774f","ca62564055241632cd20d65b5ecb8c8e93bd60c4","dd75f58072bba84066e89d61bd7028de1bd5b632","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}