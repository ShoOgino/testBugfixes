{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","commits":[{"id":"9aa8b576db3a2ef44791da3c24b9d0b61c236c11","date":1359387145,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n   \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":0,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n   \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"620f2c9cd3df8f77948c19b3165b5dc20700a5d5","date":1375193294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n   \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n   \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa296dfe1eb42df2bff22b952e189a68100fc2b","date":1381330075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0af84f7eb1ce29d521e0890c71cb77a167b910","date":1395997467,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70947d9d0eaaa0a692a6c0815045affb9dc6d484","date":1453799770,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score >= search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":3,"author":"jbernste","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score >= search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score >= search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score > search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score >= search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.5f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(0.49f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n      assertTrue(search.scoreDocs[1].score >= search.scoreDocs[2].score);\n    }\n    \n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(4.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(search.scoreDocs[1].score, search.scoreDocs[2].score, 0.0f);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      // doc 2 and 3 only get a score from low freq terms\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"2\", \"3\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[1].doc).get(\"id\"),\n              r.document(search.scoreDocs[2].doc).get(\"id\"))));\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 4);\n    }\n    \n    {\n      // only high freq terms around - check that min should match is applied\n      CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"the\"));\n      query.setLowFreqMinimumNumberShouldMatch(1.0f);\n      query.setHighFreqMinimumNumberShouldMatch(2.0f);\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\n          new HashSet<>(Arrays.asList(\"0\", \"2\")),\n          new HashSet<>(Arrays.asList(\n              r.document(search.scoreDocs[0].doc).get(\"id\"),\n              r.document(search.scoreDocs[1].doc).get(\"id\"))));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e1151ecb4798f5c31137aec032c241638018ed20","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["a56958d7f71a28824f20031ffbb2e13502a0274e","70947d9d0eaaa0a692a6c0815045affb9dc6d484"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["caa296dfe1eb42df2bff22b952e189a68100fc2b","e1151ecb4798f5c31137aec032c241638018ed20"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a56958d7f71a28824f20031ffbb2e13502a0274e","ac88193d9fe80e165a43bb0555c43afa83da8330"],"de522d9303bd67c8473a269a1319125d1f3700e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["e1151ecb4798f5c31137aec032c241638018ed20"],"e1151ecb4798f5c31137aec032c241638018ed20":["caa296dfe1eb42df2bff22b952e189a68100fc2b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"9aa8b576db3a2ef44791da3c24b9d0b61c236c11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70947d9d0eaaa0a692a6c0815045affb9dc6d484":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"caa296dfe1eb42df2bff22b952e189a68100fc2b":["620f2c9cd3df8f77948c19b3165b5dc20700a5d5"],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ac88193d9fe80e165a43bb0555c43afa83da8330":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"e1151ecb4798f5c31137aec032c241638018ed20":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9aa8b576db3a2ef44791da3c24b9d0b61c236c11":["de522d9303bd67c8473a269a1319125d1f3700e0","620f2c9cd3df8f77948c19b3165b5dc20700a5d5","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"70947d9d0eaaa0a692a6c0815045affb9dc6d484":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de522d9303bd67c8473a269a1319125d1f3700e0","9aa8b576db3a2ef44791da3c24b9d0b61c236c11"],"caa296dfe1eb42df2bff22b952e189a68100fc2b":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["caa296dfe1eb42df2bff22b952e189a68100fc2b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ac88193d9fe80e165a43bb0555c43afa83da8330","1e6acbaae7af722f17204ceccf0f7db5753eccf3","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","70947d9d0eaaa0a692a6c0815045affb9dc6d484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","1e6acbaae7af722f17204ceccf0f7db5753eccf3","de522d9303bd67c8473a269a1319125d1f3700e0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}