{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","commits":[{"id":"1ca9b34b5f6a506cf375d1dd57cd1e5a44637514","date":1432858801,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConversion() {\n    final double pLat = 0.123;\n    final double pLon = -0.456;\n    final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, pLat, pLon);\n    assertEquals(pLat, p1.getLatitude(), 1e-12);\n    assertEquals(pLon, p1.getLongitude(), 1e-12);\n    final GeoPoint p2 = new GeoPoint(PlanetModel.WGS84, pLat, pLon);\n    assertEquals(pLat, p2.getLatitude(), 1e-12);\n    assertEquals(pLon, p2.getLongitude(), 1e-12);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"148ad19ffd7f49db4faef398b2f2fac3fe771ee9","date":1432865275,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","sourceNew":"  @Test\n  public void testConversion() {\n    final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, pLat, pLon);\n    assertEquals(pLat, p1.getLatitude(), 1e-12);\n    assertEquals(pLon, p1.getLongitude(), 1e-12);\n    final GeoPoint p2 = new GeoPoint(PlanetModel.WGS84, pLat, pLon);\n    assertEquals(pLat, p2.getLatitude(), 1e-12);\n    assertEquals(pLon, p2.getLongitude(), 1e-12);\n    \n  }\n\n","sourceOld":"  @Test\n  public void testConversion() {\n    final double pLat = 0.123;\n    final double pLon = -0.456;\n    final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, pLat, pLon);\n    assertEquals(pLat, p1.getLatitude(), 1e-12);\n    assertEquals(pLon, p1.getLongitude(), 1e-12);\n    final GeoPoint p2 = new GeoPoint(PlanetModel.WGS84, pLat, pLon);\n    assertEquals(pLat, p2.getLatitude(), 1e-12);\n    assertEquals(pLon, p2.getLongitude(), 1e-12);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfb390f37bc8aad924d0f0d4804ff075f37ca5f8","date":1433040621,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","sourceNew":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.SPHERE, -90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, -90, 0, 1e-12);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConversion() {\n    final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, pLat, pLon);\n    assertEquals(pLat, p1.getLatitude(), 1e-12);\n    assertEquals(pLon, p1.getLongitude(), 1e-12);\n    final GeoPoint p2 = new GeoPoint(PlanetModel.WGS84, pLat, pLon);\n    assertEquals(pLat, p2.getLatitude(), 1e-12);\n    assertEquals(pLon, p2.getLongitude(), 1e-12);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.SPHERE, -90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, -90, 0, 1e-12);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","sourceNew":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.SPHERE, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.SPHERE, -90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, -90, 0, 1e-12);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","sourceNew":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.SPHERE, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.SPHERE, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testConversion().mjava","sourceNew":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.SPHERE, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.SPHERE, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, 90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n    testPointRoundTrip(PlanetModel.WGS84, -90 * DistanceUtils.DEGREES_TO_RADIANS, 0, 1e-6);\n\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-6);//1e-6 since there's a square root in there (Karl says)\n      testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"148ad19ffd7f49db4faef398b2f2fac3fe771ee9":["1ca9b34b5f6a506cf375d1dd57cd1e5a44637514"],"af2638813028b254a88b418ebeafb541afb49653":["535df84251be5af3be84d750beba0021aff9132d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dfb390f37bc8aad924d0f0d4804ff075f37ca5f8"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"1ca9b34b5f6a506cf375d1dd57cd1e5a44637514":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"dfb390f37bc8aad924d0f0d4804ff075f37ca5f8":["148ad19ffd7f49db4faef398b2f2fac3fe771ee9"]},"commit2Childs":{"148ad19ffd7f49db4faef398b2f2fac3fe771ee9":["dfb390f37bc8aad924d0f0d4804ff075f37ca5f8"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","1ca9b34b5f6a506cf375d1dd57cd1e5a44637514"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"535df84251be5af3be84d750beba0021aff9132d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"1ca9b34b5f6a506cf375d1dd57cd1e5a44637514":["148ad19ffd7f49db4faef398b2f2fac3fe771ee9"],"dfb390f37bc8aad924d0f0d4804ff075f37ca5f8":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}