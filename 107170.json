{"path":"src/java/org/apache/solr/analysis/CharStreamAwareCharTokenizer#next(Token).mjava","commits":[{"id":"00c1e7284eb0e728903446dd05972acc9905dd53","date":1226627781,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CharStreamAwareCharTokenizer#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    reusableToken.clear();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = reusableToken.termBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(ioBuffer);\n        if (dataLen == -1) {\n          if (length > 0)\n            break;\n          else\n            return null;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = ioBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = reusableToken.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    reusableToken.setTermLength(length);\n    // Because of \"CharStream aware\" tokenizer, using correctOffset() to\n    // correct start/end offsets\n    reusableToken.setStartOffset(((CharStream)input).correctOffset(start));\n    reusableToken.setEndOffset(((CharStream)input).correctOffset(start+length));\n    return reusableToken;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/CharStreamAwareCharTokenizer#next(Token).mjava","sourceNew":null,"sourceOld":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    reusableToken.clear();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = reusableToken.termBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(ioBuffer);\n        if (dataLen == -1) {\n          if (length > 0)\n            break;\n          else\n            return null;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = ioBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = reusableToken.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    reusableToken.setTermLength(length);\n    // Because of \"CharStream aware\" tokenizer, using correctOffset() to\n    // correct start/end offsets\n    reusableToken.setStartOffset(((CharStream)input).correctOffset(start));\n    reusableToken.setEndOffset(((CharStream)input).correctOffset(start+length));\n    return reusableToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["00c1e7284eb0e728903446dd05972acc9905dd53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00c1e7284eb0e728903446dd05972acc9905dd53":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["00c1e7284eb0e728903446dd05972acc9905dd53"],"00c1e7284eb0e728903446dd05972acc9905dd53":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}