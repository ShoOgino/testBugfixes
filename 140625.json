{"path":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","commits":[{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert bufferSize == buffer.length;\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24824f1b64b7c41515b86d6eccd216feff6e9561","date":1180475803,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length;\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert bufferSize == buffer.length;\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d34c8b8a760c050d0e5c4b802584b3de2002e431","date":1220117586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length;\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6dba7919de4ff4ed6ff17f90619203772722f08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["24824f1b64b7c41515b86d6eccd216feff6e9561"],"24824f1b64b7c41515b86d6eccd216feff6e9561":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d34c8b8a760c050d0e5c4b802584b3de2002e431"]},"commit2Childs":{"f6dba7919de4ff4ed6ff17f90619203772722f08":["24824f1b64b7c41515b86d6eccd216feff6e9561"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"24824f1b64b7c41515b86d6eccd216feff6e9561":["d34c8b8a760c050d0e5c4b802584b3de2002e431"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}