{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","commits":[{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,ZkWriteCommand,ZkWriteCallback).mjava","sourceNew":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmds.isEmpty()) return prevState;\n    if (isNoOps(cmds)) return prevState;\n\n    if (callback != null) {\n      callback.onEnqueue();\n    }\n\n    for (ZkWriteCommand cmd : cmds) {\n      if (cmd == NO_OP) continue;\n      if (!isClusterStateModified && clusterStateGetModifiedWith(cmd, prevState)) {\n        isClusterStateModified = true;\n      }\n      prevState = prevState.copyWith(cmd.name, cmd.collection);\n      if (cmd.collection == null || cmd.collection.getStateFormat() != 1) {\n        updates.put(cmd.name, cmd.collection);\n        numUpdates++;\n      }\n    }\n    clusterState = prevState;\n\n    if (maybeFlushAfter()) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","sourceOld":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmd       the {@link ZkWriteCommand} which specifies the change to be applied to cluster state\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, ZkWriteCommand cmd, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmd == NO_OP) return prevState;\n\n    if (maybeFlushBefore(cmd)) {\n      // we must update the prev state to the new one\n      prevState = clusterState = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n    }\n\n    if (callback != null) {\n      callback.onEnqueue();\n    }\n\n    /*\n    We need to know if the collection has moved from stateFormat=1 to stateFormat=2 (as a result of MIGRATECLUSTERSTATE)\n     */\n    DocCollection previousCollection = prevState.getCollectionOrNull(cmd.name);\n    boolean wasPreviouslyStateFormat1 = previousCollection != null && previousCollection.getStateFormat() == 1;\n    boolean isCurrentlyStateFormat1 = cmd.collection != null && cmd.collection.getStateFormat() == 1;\n\n    if (cmd.collection == null) {\n      if (wasPreviouslyStateFormat1) {\n        isClusterStateModified = true;\n      }\n      clusterState = prevState.copyWith(cmd.name, null);\n      updates.put(cmd.name, null);\n    } else {\n      if (!isCurrentlyStateFormat1) {\n        updates.put(cmd.name, cmd.collection);\n      }\n      if (isCurrentlyStateFormat1 || wasPreviouslyStateFormat1) {\n        isClusterStateModified = true;\n      }\n      clusterState = prevState.copyWith(cmd.name, cmd.collection);\n    }\n\n    if (maybeFlushAfter(cmd)) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781bec8380d3b76fa7ca27eceb50019c8c160e02","date":1507948397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","sourceNew":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmds.isEmpty()) return prevState;\n    if (isNoOps(cmds)) return prevState;\n\n    for (ZkWriteCommand cmd : cmds) {\n      if (cmd == NO_OP) continue;\n      if (!isClusterStateModified && clusterStateGetModifiedWith(cmd, prevState)) {\n        isClusterStateModified = true;\n      }\n      prevState = prevState.copyWith(cmd.name, cmd.collection);\n      if (cmd.collection == null || cmd.collection.getStateFormat() != 1) {\n        updates.put(cmd.name, cmd.collection);\n        numUpdates++;\n      }\n    }\n    clusterState = prevState;\n\n    if (maybeFlushAfter()) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","sourceOld":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmds.isEmpty()) return prevState;\n    if (isNoOps(cmds)) return prevState;\n\n    if (callback != null) {\n      callback.onEnqueue();\n    }\n\n    for (ZkWriteCommand cmd : cmds) {\n      if (cmd == NO_OP) continue;\n      if (!isClusterStateModified && clusterStateGetModifiedWith(cmd, prevState)) {\n        isClusterStateModified = true;\n      }\n      prevState = prevState.copyWith(cmd.name, cmd.collection);\n      if (cmd.collection == null || cmd.collection.getStateFormat() != 1) {\n        updates.put(cmd.name, cmd.collection);\n        numUpdates++;\n      }\n    }\n    clusterState = prevState;\n\n    if (maybeFlushAfter()) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#enqueueUpdate(ClusterState,List[ZkWriteCommand],ZkWriteCallback).mjava","sourceNew":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmds.isEmpty()) return prevState;\n    if (isNoOps(cmds)) return prevState;\n\n    for (ZkWriteCommand cmd : cmds) {\n      if (cmd == NO_OP) continue;\n      prevState = prevState.copyWith(cmd.name, cmd.collection);\n      updates.put(cmd.name, cmd.collection);\n      numUpdates++;\n    }\n    clusterState = prevState;\n\n    if (maybeFlushAfter()) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","sourceOld":"  /**\n   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified\n   * {@link ClusterState} is returned and it is expected that the caller will use the returned\n   * cluster state for the subsequent invocation of this method.\n   * <p>\n   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering\n   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the\n   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can\n   * be used to force an immediate flush of pending cluster state changes.\n   *\n   * @param prevState the cluster state information on which the given <code>cmd</code> is applied\n   * @param cmds       the list of {@link ZkWriteCommand} which specifies the change to be applied to cluster state in atomic\n   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used\n   *                  for any callbacks\n   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If\n   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.\n   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be\n   *                               discarded.\n   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results\n   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and\n   *                               must be discarded\n   */\n  public ClusterState enqueueUpdate(ClusterState prevState, List<ZkWriteCommand> cmds, ZkWriteCallback callback) throws IllegalStateException, Exception {\n    if (invalidState) {\n      throw new IllegalStateException(\"ZkStateWriter has seen a tragic error, this instance can no longer be used\");\n    }\n    if (cmds.isEmpty()) return prevState;\n    if (isNoOps(cmds)) return prevState;\n\n    for (ZkWriteCommand cmd : cmds) {\n      if (cmd == NO_OP) continue;\n      if (!isClusterStateModified && clusterStateGetModifiedWith(cmd, prevState)) {\n        isClusterStateModified = true;\n      }\n      prevState = prevState.copyWith(cmd.name, cmd.collection);\n      if (cmd.collection == null || cmd.collection.getStateFormat() != 1) {\n        updates.put(cmd.name, cmd.collection);\n        numUpdates++;\n      }\n    }\n    clusterState = prevState;\n\n    if (maybeFlushAfter()) {\n      ClusterState state = writePendingUpdates();\n      if (callback != null) {\n        callback.onWrite();\n      }\n      return state;\n    }\n\n    return clusterState;\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","4e42079c4c34cc1868518eff79f79ebaeb6d1965","8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}