{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#assertAdvanceEquality(IndexedDISI,BitSetIterator,int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#assertAdvanceEquality(IndexedDISI,BitSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAdvanceEquality(IndexedDISI disi, BitSetIterator disi2, int step) throws IOException {\n    int index = -1;\n    while (true) {\n      int target = disi2.docID() + step;\n      int doc;\n      do {\n        doc = disi2.nextDoc();\n        index++;\n      } while (doc < target);\n      assertEquals(doc, disi.advance(target));\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        break;\n      }\n      assertEquals(\"Expected equality using step \" + step + \" at docID \" + doc, index, disi.index());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#assertAdvanceEquality(IndexedDISI,BitSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAdvanceEquality(IndexedDISI disi, BitSetIterator disi2, int step) throws IOException {\n    int index = -1;\n    while (true) {\n      int target = disi2.docID() + step;\n      int doc;\n      do {\n        doc = disi2.nextDoc();\n        index++;\n      } while (doc < target);\n      assertEquals(doc, disi.advance(target));\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        break;\n      }\n      assertEquals(\"Expected equality using step \" + step + \" at docID \" + doc, index, disi.index());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}