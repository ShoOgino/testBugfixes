{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6","date":1334355722,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":["d84c1e5a4b322241bc356b953d9e539f5b67e9e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws SyntaxError {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws SyntaxError {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws SyntaxError {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws SyntaxError {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() < shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["3cdb67100dc016748799a77218aa409478372d79"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"c26f00b574427b55127e869b935845554afde1fa":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}