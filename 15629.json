{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}