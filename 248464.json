{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aac15d6a5f334a67381f51748c721e5788d7f009","date":1326198809,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aac15d6a5f334a67381f51748c721e5788d7f009"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aac15d6a5f334a67381f51748c721e5788d7f009":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["aac15d6a5f334a67381f51748c721e5788d7f009"],"aac15d6a5f334a67381f51748c721e5788d7f009":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}