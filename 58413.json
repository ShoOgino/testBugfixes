{"path":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#verifyDocs(int,SolrClient,String).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#verifyDocs(int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#verifyDocs(int).mjava","sourceNew":"  public static void verifyDocs(int nDocs, SolrClient masterClient, String collectionName) throws SolrServerException, IOException {\n    ModifiableSolrParams queryParams = new ModifiableSolrParams();\n    queryParams.set(\"q\", \"*:*\");\n    QueryResponse response = masterClient.query(collectionName, queryParams);\n\n    assertEquals(0, response.getStatus());\n    assertEquals(nDocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void verifyDocs(int nDocs) throws SolrServerException, IOException {\n    ModifiableSolrParams queryParams = new ModifiableSolrParams();\n    queryParams.set(\"q\", \"*:*\");\n    QueryResponse response = masterClient.query(queryParams);\n\n    assertEquals(0, response.getStatus());\n    assertEquals(nDocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#verifyDocs(int,SolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyDocs(int nDocs, SolrClient masterClient, String collectionName) throws SolrServerException, IOException {\n    ModifiableSolrParams queryParams = new ModifiableSolrParams();\n    queryParams.set(\"q\", \"*:*\");\n    QueryResponse response = masterClient.query(collectionName, queryParams);\n\n    assertEquals(0, response.getStatus());\n    assertEquals(nDocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#verifyDocs(int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#verifyDocs(int,SolrClient,String).mjava","sourceNew":"  public static void verifyDocs(int nDocs, SolrClient leaderClient, String collectionName) throws SolrServerException, IOException {\n    ModifiableSolrParams queryParams = new ModifiableSolrParams();\n    queryParams.set(\"q\", \"*:*\");\n    QueryResponse response = leaderClient.query(collectionName, queryParams);\n\n    assertEquals(0, response.getStatus());\n    assertEquals(nDocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  public static void verifyDocs(int nDocs, SolrClient masterClient, String collectionName) throws SolrServerException, IOException {\n    ModifiableSolrParams queryParams = new ModifiableSolrParams();\n    queryParams.set(\"q\", \"*:*\");\n    QueryResponse response = masterClient.query(collectionName, queryParams);\n\n    assertEquals(0, response.getStatus());\n    assertEquals(nDocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}