{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","commits":[{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","pathOld":"/dev/null","sourceNew":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Double(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Double) a.get(i)).doubleValue();\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Double.valueOf(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Double) a.get(i)).doubleValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Double(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Double) a.get(i)).doubleValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList<Double> a = new ArrayList<Double>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Double.valueOf(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).doubleValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Double.valueOf(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Double) a.get(i)).doubleValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToDoubleArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList<Double> a = new ArrayList<Double>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Double.valueOf(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).doubleValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10.7:100.4:-2.3\" return int[]{10.7,100.4,-2.3}. \n  private double[] propToDoubleArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new double [] { Double.parseDouble(s) };\n    }\n    \n    ArrayList<Double> a = new ArrayList<Double>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Double.valueOf(t));\n    }\n    double res[] = new double[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).doubleValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["6bcde5e3f23911110baa101ed062b544162825b5"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}