{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf8a7ced1e96b646081915c332618d854944666e","date":1535687605,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException, AssignmentException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bf8a7ced1e96b646081915c332618d854944666e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["bf8a7ced1e96b646081915c332618d854944666e","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deea3439de4f487ae553317e50d5d641ca386374":["bf8a7ced1e96b646081915c332618d854944666e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bf8a7ced1e96b646081915c332618d854944666e"],"bf8a7ced1e96b646081915c332618d854944666e":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}