{"path":"solr/core/src/java/org/apache/solr/update/MemOutputStream#flush(byte[],int,int).mjava","commits":[{"id":"fb5e2d9cb6380aa54e123da56915c9be394a0952","date":1345248904,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/MemOutputStream#flush(byte[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/MemOutputStream[TransactionLog]#flush(byte[],int,int).mjava","sourceNew":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/MemOutputStream#flush(byte[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/MemOutputStream[TransactionLog]#flush(byte[],int,int).mjava","sourceNew":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/MemOutputStream#flush(byte[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/MemOutputStream[TransactionLog]#flush(byte[],int,int).mjava","sourceNew":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(byte[] arr, int offset, int len) throws IOException {\n    if (arr == buf && offset==0 && len==buf.length) {\n      buffers.add(buf);  // steal the buffer\n      buf = new byte[8192];\n    } else if (len > 0) {\n      byte[] newBuf = new byte[len];\n      System.arraycopy(arr, offset, newBuf, 0, len);\n      buffers.add(newBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb5e2d9cb6380aa54e123da56915c9be394a0952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb5e2d9cb6380aa54e123da56915c9be394a0952"]},"commit2Childs":{"fb5e2d9cb6380aa54e123da56915c9be394a0952":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb5e2d9cb6380aa54e123da56915c9be394a0952","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}