{"path":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","commits":[{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   * \n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder. \n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","sourceNew":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   *\n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder.\n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","sourceOld":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   * \n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder. \n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","sourceNew":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   * \n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder. \n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","sourceOld":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   *\n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder.\n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","sourceNew":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   * \n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder. \n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","sourceOld":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   *\n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder.\n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#interceptInternodeRequest(HttpRequest,HttpContext).mjava","sourceNew":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   *\n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder.\n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","sourceOld":"  /**\n   * Override this method to intercept internode requests. This allows your authentication\n   * plugin to decide on per-request basis whether it should handle inter-node requests or\n   * delegate to {@link PKIAuthenticationPlugin}. Return true to indicate that your plugin\n   * did handle the request, or false to signal that PKI plugin should handle it. This method\n   * will be called by {@link PKIAuthenticationPlugin}'s interceptor.\n   * \n   * <p>\n   *   If not overridden, this method will return true for plugins implementing {@link HttpClientBuilderPlugin}.\n   *   This method can be overridden by subclasses e.g. to set HTTP headers, even if you don't use a clientBuilder. \n   * </p>\n   * @param httpRequest the httpRequest that is about to be sent to another internal Solr node\n   * @param httpContext the context of that request.\n   * @return true if this plugin handled authentication for the request, else false\n   */\n  protected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext) {\n    return this instanceof HttpClientBuilderPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a117d95183986014a31f25bb04e5464ca06d6068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["a117d95183986014a31f25bb04e5464ca06d6068"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"a117d95183986014a31f25bb04e5464ca06d6068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}