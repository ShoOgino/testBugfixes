{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex#populateQueryCache(MonitorQuerySerializer,QueryDecomposer).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex#populateQueryCache(MonitorQuerySerializer,QueryDecomposer).mjava","pathOld":"/dev/null","sourceNew":"  private void populateQueryCache(MonitorQuerySerializer serializer, QueryDecomposer decomposer) throws IOException {\n    if (serializer == null) {\n      // No query serialization happening here - check that the cache is empty\n      IndexSearcher searcher = manager.acquire();\n      try {\n        if (searcher.count(new MatchAllDocsQuery()) != 0) {\n          throw new IllegalStateException(\"Attempting to open a non-empty monitor query index with no MonitorQuerySerializer\");\n        }\n      }\n      finally {\n        manager.release(searcher);\n      }\n      return;\n    }\n    Set<String> ids = new HashSet<>();\n    List<Exception> errors = new ArrayList<>();\n    purgeCache(newCache -> scan((id, cacheEntry, dataValues) -> {\n      if (ids.contains(id)) {\n        // this is a branch of a query that has already been reconstructed, but\n        // then split by decomposition - we don't need to parse it again\n        return;\n      }\n      ids.add(id);\n      try {\n        MonitorQuery mq = serializer.deserialize(dataValues.mq.binaryValue());\n        for (QueryCacheEntry entry : QueryCacheEntry.decompose(mq, decomposer)) {\n          newCache.put(entry.cacheId, entry);\n        }\n      }\n      catch (Exception e) {\n        errors.add(e);\n      }\n    }));\n    if (errors.size() > 0) {\n      IllegalStateException e = new IllegalStateException(\"Couldn't parse some queries from the index\");\n      for (Exception parseError : errors) {\n        e.addSuppressed(parseError);\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}