{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   *\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   *\n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   *\n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   *\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   *\n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   *\n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   *\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   *\n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   *\n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   *\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   *\n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   *\n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ec3c42a56287de321024ceb6e46e78993a647d5","date":1303983484,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts\n   * as one).\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * \n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush by count instead of RAM usage (each buffered delete Query counts \n   * as one).\n   * \n   * <p>\n   * <b>NOTE</b>: because IndexWriter uses <code>int</code>s when managing its\n   * internal storage, the absolute maximum value for this setting is somewhat\n   * less than 2048 MB. The precise limit depends on various factors, such as\n   * how large your documents are, how many fields have norms, etc., so it's\n   * best to set this value comfortably under 2048.\n   * \n   * <p>\n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB > 2048.0) {\n      throw new IllegalArgumentException(\"ramBufferSize \" + ramBufferSizeMB\n          + \" is too large; should be comfortably less than 2048\");\n    }\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["00b21520fafb9860ce0318d7be5ea84619c185ad","5ec3c42a56287de321024ceb6e46e78993a647d5"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ec3c42a56287de321024ceb6e46e78993a647d5":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff78505662c0b741e2663a9f38a4889c12a32c9f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","00b21520fafb9860ce0318d7be5ea84619c185ad"],"a3776dccca01c11e7046323cfad46a3b4a471233":["00b21520fafb9860ce0318d7be5ea84619c185ad","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"5ec3c42a56287de321024ceb6e46e78993a647d5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["5ec3c42a56287de321024ceb6e46e78993a647d5"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ff78505662c0b741e2663a9f38a4889c12a32c9f","00b21520fafb9860ce0318d7be5ea84619c185ad","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}