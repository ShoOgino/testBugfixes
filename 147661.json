{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRefBuilder).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","sourceNew":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRefBuilder spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      spare.copyUTF8Bytes(output2.bytes, output2.offset, sepIndex);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      spare.copyUTF8Bytes(output2);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      UnicodeUtil.UTF8toUTF16(output2.bytes, output2.offset, sepIndex, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}