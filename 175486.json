{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#createCoefficient(int,Set[String],String).mjava","commits":[{"id":"f13ec1b606a28789743a563929e7c556e8218297","date":1389302034,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#createCoefficient(int,Set[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the coefficient to transform the weight.\n   *\n   * @param doc id of the document\n   * @param matchedTokens tokens found in the query\n   * @param prefixToken unfinished token in the query\n   * @return the coefficient\n   * @throws IOException If there are problems reading term vectors from the underlying Lucene index.\n   */\n  private double createCoefficient(int doc, Set<String> matchedTokens, String prefixToken) throws IOException {\n\n    Terms tv = searcher.getIndexReader().getTermVector(doc, TEXT_FIELD_NAME);\n    TermsEnum it = tv.iterator(TermsEnum.EMPTY);\n\n    Integer position = Integer.MAX_VALUE;\n    BytesRef term;\n    // find the closest token position\n    while ((term = it.next()) != null) {\n\n      String docTerm = term.utf8ToString();\n\n      if (matchedTokens.contains(docTerm) || docTerm.startsWith(prefixToken)) {\n\n        DocsAndPositionsEnum docPosEnum = it.docsAndPositions(null, null, DocsAndPositionsEnum.FLAG_OFFSETS);\n        docPosEnum.nextDoc();\n\n        // use the first occurrence of the term\n        int p = docPosEnum.nextPosition();\n        if (p < position) {\n          position = p;\n        }\n      }\n    }\n\n    // create corresponding coefficient based on position\n    return calculateCoefficient(position);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79854637616b791a00f39ee3d5257ea093804ddb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#createCoefficient(IndexSearcher,int,Set[String],String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#createCoefficient(int,Set[String],String).mjava","sourceNew":"  /**\n   * Create the coefficient to transform the weight.\n   *\n   * @param doc id of the document\n   * @param matchedTokens tokens found in the query\n   * @param prefixToken unfinished token in the query\n   * @return the coefficient\n   * @throws IOException If there are problems reading term vectors from the underlying Lucene index.\n   */\n  private double createCoefficient(IndexSearcher searcher, int doc, Set<String> matchedTokens, String prefixToken) throws IOException {\n\n    Terms tv = searcher.getIndexReader().getTermVector(doc, TEXT_FIELD_NAME);\n    TermsEnum it = tv.iterator(TermsEnum.EMPTY);\n\n    Integer position = Integer.MAX_VALUE;\n    BytesRef term;\n    // find the closest token position\n    while ((term = it.next()) != null) {\n\n      String docTerm = term.utf8ToString();\n\n      if (matchedTokens.contains(docTerm) || docTerm.startsWith(prefixToken)) {\n\n        DocsAndPositionsEnum docPosEnum = it.docsAndPositions(null, null, DocsAndPositionsEnum.FLAG_OFFSETS);\n        docPosEnum.nextDoc();\n\n        // use the first occurrence of the term\n        int p = docPosEnum.nextPosition();\n        if (p < position) {\n          position = p;\n        }\n      }\n    }\n\n    // create corresponding coefficient based on position\n    return calculateCoefficient(position);\n  }\n\n","sourceOld":"  /**\n   * Create the coefficient to transform the weight.\n   *\n   * @param doc id of the document\n   * @param matchedTokens tokens found in the query\n   * @param prefixToken unfinished token in the query\n   * @return the coefficient\n   * @throws IOException If there are problems reading term vectors from the underlying Lucene index.\n   */\n  private double createCoefficient(int doc, Set<String> matchedTokens, String prefixToken) throws IOException {\n\n    Terms tv = searcher.getIndexReader().getTermVector(doc, TEXT_FIELD_NAME);\n    TermsEnum it = tv.iterator(TermsEnum.EMPTY);\n\n    Integer position = Integer.MAX_VALUE;\n    BytesRef term;\n    // find the closest token position\n    while ((term = it.next()) != null) {\n\n      String docTerm = term.utf8ToString();\n\n      if (matchedTokens.contains(docTerm) || docTerm.startsWith(prefixToken)) {\n\n        DocsAndPositionsEnum docPosEnum = it.docsAndPositions(null, null, DocsAndPositionsEnum.FLAG_OFFSETS);\n        docPosEnum.nextDoc();\n\n        // use the first occurrence of the term\n        int p = docPosEnum.nextPosition();\n        if (p < position) {\n          position = p;\n        }\n      }\n    }\n\n    // create corresponding coefficient based on position\n    return calculateCoefficient(position);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f13ec1b606a28789743a563929e7c556e8218297":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["f13ec1b606a28789743a563929e7c556e8218297"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a371aa649cc243e82cb8677ca960a1e0232ecedf"]},"commit2Childs":{"f13ec1b606a28789743a563929e7c556e8218297":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f13ec1b606a28789743a563929e7c556e8218297"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}