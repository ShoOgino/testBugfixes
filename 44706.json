{"path":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","commits":[{"id":"0bca82f249670ddf59ba61176011f066430586bf","date":1490972000,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45f7182810bbeb650d9fbfb43f3c1926ebc81694","date":1491045405,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"146464f03e9a694d866ba222f64b980e4f62a188","date":1491267608,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008","date":1491296430,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a331e15d91a7c704d99b39ed67b73449b7ae9","date":1500572405,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0124bb6574d7b0b1d8faf3b0bc04b535ebf1065","date":1518452766,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/SecureRandomAlgorithmTesterApp#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws NoSuchAlgorithmException {\n    String algorithm = args[0];\n    String method = args[1];\n    int amount = Integer.valueOf(args[2]);\n    SecureRandom secureRandom;\n    if(algorithm.equals(\"default\"))\n      secureRandom = new SecureRandom();\n    else \n      secureRandom = SecureRandom.getInstance(algorithm);\n    System.out.println(\"Algorithm:\" + secureRandom.getAlgorithm());\n    switch(method) {\n      case \"seed\": secureRandom.generateSeed(amount); break;\n      case \"bytes\": secureRandom.nextBytes(new byte[amount]); break;\n      case \"long\": secureRandom.nextLong(); break;\n      case \"int\": secureRandom.nextInt(); break;\n      default: throw new IllegalArgumentException(\"Not supported random function: \" + method);\n    }\n    System.out.println(\"SecureRandom function invoked\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bca82f249670ddf59ba61176011f066430586bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0124bb6574d7b0b1d8faf3b0bc04b535ebf1065":["b97a331e15d91a7c704d99b39ed67b73449b7ae9"],"45f7182810bbeb650d9fbfb43f3c1926ebc81694":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"146464f03e9a694d866ba222f64b980e4f62a188":["0bca82f249670ddf59ba61176011f066430586bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["22badfc1c0c65f5ea7ce8d735c5b75ae176a9008","b97a331e15d91a7c704d99b39ed67b73449b7ae9"],"b97a331e15d91a7c704d99b39ed67b73449b7ae9":["146464f03e9a694d866ba222f64b980e4f62a188"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["b97a331e15d91a7c704d99b39ed67b73449b7ae9","b0124bb6574d7b0b1d8faf3b0bc04b535ebf1065"],"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008":["45f7182810bbeb650d9fbfb43f3c1926ebc81694"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"0bca82f249670ddf59ba61176011f066430586bf":["146464f03e9a694d866ba222f64b980e4f62a188"],"b0124bb6574d7b0b1d8faf3b0bc04b535ebf1065":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"45f7182810bbeb650d9fbfb43f3c1926ebc81694":["22badfc1c0c65f5ea7ce8d735c5b75ae176a9008"],"146464f03e9a694d866ba222f64b980e4f62a188":["b97a331e15d91a7c704d99b39ed67b73449b7ae9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bca82f249670ddf59ba61176011f066430586bf","45f7182810bbeb650d9fbfb43f3c1926ebc81694"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b97a331e15d91a7c704d99b39ed67b73449b7ae9":["b0124bb6574d7b0b1d8faf3b0bc04b535ebf1065","936cdd5882761db3b844afd6f84ab81cbb011a75","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}