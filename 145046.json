{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","commits":[{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    if (GeoUtils.isValidLat(latitude) == false) {\n      throw new IllegalArgumentException(\"invalid latitude: \" + latitude + \", must be -90 to 90\");\n    }\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_SCALE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    if (GeoUtils.isValidLat(latitude) == false) {\n      throw new IllegalArgumentException(\"invalid latitude: \" + latitude + \", must be -90 to 90\");\n    }\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_SCALE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac46f295250a5795494e8272686b5d8dd49517c6","date":1457798383,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    if (GeoUtils.isValidLat(latitude) == false) {\n      throw new IllegalArgumentException(\"invalid latitude: \" + latitude + \", must be -90 to 90\");\n    }\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_ENCODE));\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    if (GeoUtils.isValidLat(latitude) == false) {\n      throw new IllegalArgumentException(\"invalid latitude: \" + latitude + \", must be -90 to 90\");\n    }\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_SCALE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0da288484d638cec72e8fc33363e4c0532d35ff0","date":1459115234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_ENCODE));\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    if (GeoUtils.isValidLat(latitude) == false) {\n      throw new IllegalArgumentException(\"invalid latitude: \" + latitude + \", must be -90 to 90\");\n    }\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_ENCODE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8da4c29a4aed72a95d20b328cb2140a85621cdd","date":1459513936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude * LATITUDE_ENCODE);\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return Math.toIntExact((long) (latitude * LATITUDE_ENCODE));\n  }\n\n","bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90)\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude / LATITUDE_DECODE);\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits \n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude * LATITUDE_ENCODE);\n  }\n\n","bugFix":["d8da4c29a4aed72a95d20b328cb2140a85621cdd","94ee361295fb38310ac4d53cb4773d1622423d68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /**\n   * Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90)\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude / LAT_DECODE);\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90)\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude / LATITUDE_DECODE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#encodeLatitude(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLatitude(double).mjava","sourceNew":"  /**\n   * Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90)\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude / LAT_DECODE);\n  }\n\n","sourceOld":"  /** \n   * Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90)\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @return encoded value as a 32-bit {@code int}\n   * @throws IllegalArgumentException if latitude is out of bounds\n   */\n  public static int encodeLatitude(double latitude) {\n    GeoUtils.checkLatitude(latitude);\n    // the maximum possible value cannot be encoded without overflow\n    if (latitude == 90.0D) {\n      latitude = Math.nextDown(latitude);\n    }\n    return (int) Math.floor(latitude / LATITUDE_DECODE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0da288484d638cec72e8fc33363e4c0532d35ff0":["ac46f295250a5795494e8272686b5d8dd49517c6"],"ac46f295250a5795494e8272686b5d8dd49517c6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","94ee361295fb38310ac4d53cb4773d1622423d68"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"0da288484d638cec72e8fc33363e4c0532d35ff0":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"ac46f295250a5795494e8272686b5d8dd49517c6":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ac46f295250a5795494e8272686b5d8dd49517c6"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"09f15823cf5eb6e807005579e875e117d8598f95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}