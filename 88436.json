{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}