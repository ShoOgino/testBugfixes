{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","commits":[{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeActualBounds(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    for (int dim = 0; dim < numDims; ++dim) {\n      int commonPrefixLength = commonPrefixLengths[dim];\n      int suffixLength = bytesPerDim - commonPrefixLength;\n      if (suffixLength > 0) {\n        BytesRef[] minMax = computeMinMax(count, packedValues, dim * bytesPerDim + commonPrefixLength, suffixLength);\n        BytesRef min = minMax[0];\n        BytesRef max = minMax[1];\n        out.writeBytes(min.bytes, min.offset, min.length);\n        out.writeBytes(max.bytes, max.offset, max.length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeActualBounds(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      int commonPrefixLength = commonPrefixLengths[dim];\n      int suffixLength = bytesPerDim - commonPrefixLength;\n      if (suffixLength > 0) {\n        BytesRef[] minMax = computeMinMax(count, packedValues, dim * bytesPerDim + commonPrefixLength, suffixLength);\n        BytesRef min = minMax[0];\n        BytesRef max = minMax[1];\n        out.writeBytes(min.bytes, min.offset, min.length);\n        out.writeBytes(max.bytes, max.offset, max.length);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeActualBounds(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    for (int dim = 0; dim < numDims; ++dim) {\n      int commonPrefixLength = commonPrefixLengths[dim];\n      int suffixLength = bytesPerDim - commonPrefixLength;\n      if (suffixLength > 0) {\n        BytesRef[] minMax = computeMinMax(count, packedValues, dim * bytesPerDim + commonPrefixLength, suffixLength);\n        BytesRef min = minMax[0];\n        BytesRef max = minMax[1];\n        out.writeBytes(min.bytes, min.offset, min.length);\n        out.writeBytes(max.bytes, max.offset, max.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeActualBounds(DataOutput,int[],int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeActualBounds(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    for (int dim = 0; dim < config.numIndexDims; ++dim) {\n      int commonPrefixLength = commonPrefixLengths[dim];\n      int suffixLength = config.bytesPerDim - commonPrefixLength;\n      if (suffixLength > 0) {\n        BytesRef[] minMax = computeMinMax(count, packedValues, dim * config.bytesPerDim + commonPrefixLength, suffixLength);\n        BytesRef min = minMax[0];\n        BytesRef max = minMax[1];\n        out.writeBytes(min.bytes, min.offset, min.length);\n        out.writeBytes(max.bytes, max.offset, max.length);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeActualBounds(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      int commonPrefixLength = commonPrefixLengths[dim];\n      int suffixLength = bytesPerDim - commonPrefixLength;\n      if (suffixLength > 0) {\n        BytesRef[] minMax = computeMinMax(count, packedValues, dim * bytesPerDim + commonPrefixLength, suffixLength);\n        BytesRef min = minMax[0];\n        BytesRef max = minMax[1];\n        out.writeBytes(min.bytes, min.offset, min.length);\n        out.writeBytes(max.bytes, max.offset, max.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}