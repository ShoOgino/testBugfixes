{"path":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND)\n          .setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND)\n          .setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(new KeepNoneOnInitDeletionPolicy())\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepNoneOnInitDeletionPolicy policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setOpenMode(OpenMode.APPEND)\n          .setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(1.0);\n      writer = new IndexWriter(dir, conf);\n      policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}