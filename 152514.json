{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","commits":[{"id":"1123ce2cdec6831731a4eea0f7c3367b30e9788c","date":1301327679,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"myid\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testExistingDeletes().mjava","sourceNew":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-2996: tests that addIndexes(IndexReader) applies existing deletes correctly.\n  public void testExistingDeletes() throws Exception {\n    Directory[] dirs = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      IndexWriter writer = new IndexWriter(dirs[i], conf);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"myid\"));\n      writer.addDocument(doc);\n      writer.close();\n    }\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dirs[0], conf);\n\n    // Now delete the document\n    writer.deleteDocuments(new Term(\"id\", \"myid\"));\n    IndexReader r = IndexReader.open(dirs[1]);\n    try {\n      writer.addIndexes(r);\n    } finally {\n      r.close();\n    }\n    writer.commit();\n    assertEquals(\"Documents from the incoming index should not have been deleted\", 1, writer.numDocs());\n    writer.close();\n\n    for (Directory dir : dirs) {\n      dir.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1123ce2cdec6831731a4eea0f7c3367b30e9788c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1123ce2cdec6831731a4eea0f7c3367b30e9788c"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1123ce2cdec6831731a4eea0f7c3367b30e9788c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1123ce2cdec6831731a4eea0f7c3367b30e9788c","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1123ce2cdec6831731a4eea0f7c3367b30e9788c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1123ce2cdec6831731a4eea0f7c3367b30e9788c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}