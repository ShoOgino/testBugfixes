{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testFarsiRangeCollating().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testFarsiRangeCollating().mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"content\",\n        new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"content\",\n        new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"content\",\n        new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}