{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","commits":[{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void testSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cbb3fab3017187393e0834b8d7b315fe92ca422","date":1329432375,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["9f72f36b556a12c6d5004378a256b03015ef24d8"],"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","bd8bc29700397ec1886e73bae0a67ff536bad223"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7","date":1351216844,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    // todo: make SolrJ easier to pass arbitrary params to\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["47c952a4f0f0e9b74763a0609a3726dbb217164a","dd564545498afb928bdfecf369ec06cd377413d2"],"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    // todo: make SolrJ easier to pass arbitrary params to\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","date":1361552322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    // todo: make SolrJ easier to pass arbitrary params to\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    System.out.println(\"replicate slave to master\");\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    // get the details\n    // just ensures we don't get an exception\n    NamedList<Object> details = getDetails(masterClient);\n    //System.out.println(\"details:\" + details);\n    \n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["7cbb3fab3017187393e0834b8d7b315fe92ca422","47c952a4f0f0e9b74763a0609a3726dbb217164a","d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7"],"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d","bd8bc29700397ec1886e73bae0a67ff536bad223"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a59489bd57cb6434aab4e536a03b260fec1d47f3","date":1361571364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0eb13d7c559872d499f0bcccd4d6d589cc03d85","date":1361754953,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(3, \"*:*\", slaveClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98032df57df65322ad2d36e8b2655a4a4cd7a08b","date":1361930739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 4; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(3, \"*:*\", slaveClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 3; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd8bc29700397ec1886e73bae0a67ff536bad223","date":1362159450,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = 0; i < 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // get the details\n    // just ensures we don't get an exception\n    assertVersions();\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    // now force a new index directory\n    for (int i = 0; i < 4; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions();\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["7cbb3fab3017187393e0834b8d7b315fe92ca422","98032df57df65322ad2d36e8b2655a4a4cd7a08b","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["0b11f32acac13cc087cc735808dfe19c2b52673b","379ec215b82e132c6741b5211d9cd8cfc30aa02a","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = buildUrl(masterJetty.getLocalPort()) + \"/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=fetchindex&masterUrl=\";\n    masterUrl += \"http://127.0.0.1:\" + masterJetty.getLocalPort() + \"/solr/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = buildUrl(masterJetty.getLocalPort()) + \"/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = buildUrl(masterJetty.getLocalPort()) + \"/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a2d81cf6955f09cda03ed448bb9bb397d4b9742","date":1411570057,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n    String masterUrl = buildUrl(masterJetty.getLocalPort()) + \"/update?prepareCommit=true\";\n    URL url = new URL(masterUrl);\n//    InputStream stream = url.openStream();\n//    try {\n//      stream.close();\n//    } catch (IOException e) {\n//      //e.printStackTrace();\n//    }\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf853f0385a540ee0fb220fd272f2c362432294":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7cbb3fab3017187393e0834b8d7b315fe92ca422":["1bf853f0385a540ee0fb220fd272f2c362432294"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7cbb3fab3017187393e0834b8d7b315fe92ca422","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["7cbb3fab3017187393e0834b8d7b315fe92ca422"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["058801f8673d53a5abac8088204860ec29a40f0d"],"e0eb13d7c559872d499f0bcccd4d6d589cc03d85":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"bafca15d8e408346a67f4282ad1143b88023893b":["5a2d81cf6955f09cda03ed448bb9bb397d4b9742"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["98032df57df65322ad2d36e8b2655a4a4cd7a08b"],"d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"058801f8673d53a5abac8088204860ec29a40f0d":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"98032df57df65322ad2d36e8b2655a4a4cd7a08b":["e0eb13d7c559872d499f0bcccd4d6d589cc03d85"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"5a2d81cf6955f09cda03ed448bb9bb397d4b9742":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7"],"f2126b84bd093fa3d921582a109a0ee578c28126":["47c952a4f0f0e9b74763a0609a3726dbb217164a","d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"1bf853f0385a540ee0fb220fd272f2c362432294":["7cbb3fab3017187393e0834b8d7b315fe92ca422"],"7cbb3fab3017187393e0834b8d7b315fe92ca422":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47c952a4f0f0e9b74763a0609a3726dbb217164a"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"e0eb13d7c559872d499f0bcccd4d6d589cc03d85":["98032df57df65322ad2d36e8b2655a4a4cd7a08b"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["058801f8673d53a5abac8088204860ec29a40f0d"],"d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"058801f8673d53a5abac8088204860ec29a40f0d":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98032df57df65322ad2d36e8b2655a4a4cd7a08b":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["d9da9f23184cb4c31ddfb7f39a1df00bfbb42cb7","f2126b84bd093fa3d921582a109a0ee578c28126"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["5a2d81cf6955f09cda03ed448bb9bb397d4b9742"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bf853f0385a540ee0fb220fd272f2c362432294"],"5a2d81cf6955f09cda03ed448bb9bb397d4b9742":["bafca15d8e408346a67f4282ad1143b88023893b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["e0eb13d7c559872d499f0bcccd4d6d589cc03d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}