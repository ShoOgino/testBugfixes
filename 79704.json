{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    keeper.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9","date":1327685694,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) {\n      throw new AlreadyClosedException(\"This client has already been closed\");\n    }\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf6bbe162516990d957fa4184b79d62651e9a053","date":1328025498,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    keeper.close();\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  /**\n   * @throws InterruptedException\n   */\n  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() throws InterruptedException {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      keeper.close();\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb89814ad85fb3340f275e6b76a0bc319a6cc02b","date":1348100270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @throws InterruptedException\n   */\n  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n//    log.warn(\"closed inst :\"+inst, new Exception(\"leakdebug\"));\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  public void close() {\n//    log.warn(\"closed inst :\"+inst, new Exception(\"leakdebug\"));\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n      closeCallbackExecutor();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n      closeCallbackExecutor();\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n      closeCallbackExecutor();\n    }\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#close().mjava","sourceNew":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeCallbackExecutor();\n    } finally {\n      connManager.close();\n      closeKeeper(keeper);\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  public void close() {\n    if (isClosed) return; // it's okay if we over close - same as solrcore\n    isClosed = true;\n    try {\n      closeKeeper(keeper);\n    } finally {\n      connManager.close();\n      closeCallbackExecutor();\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["8fd5be977c105554c6a7b68afcdbc511439723ab","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["bf6bbe162516990d957fa4184b79d62651e9a053"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["bf6bbe162516990d957fa4184b79d62651e9a053","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"bf6bbe162516990d957fa4184b79d62651e9a053":["c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["bf6bbe162516990d957fa4184b79d62651e9a053","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["8fd5be977c105554c6a7b68afcdbc511439723ab","1764a3d38fa1de1ac5474f293b8d32da723a409e","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","bf6bbe162516990d957fa4184b79d62651e9a053"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"bf6bbe162516990d957fa4184b79d62651e9a053":["938e4fd7b1e4b34da1650edba7471764bbfaefde","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c07dccb63bb4cf2aa41b897528d1a88ed1dc25a9","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","b05c56a41b733e02a189c48895922b5bd8c7f3d1","fd92b8bcc88e969302510acf77bd6970da3994c4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}