{"path":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","commits":[{"id":"c16787e95e3c32c394cf5195e223e39ff5cbda3a","date":1092422102,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testDefaultFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDefaultFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["6d2b17f10a0d622e1a8082a94957764dad150530"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["6d2b17f10a0d622e1a8082a94957764dad150530"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}