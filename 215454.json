{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfoPerCommit info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfoPerCommit info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67bcec391f8e94564afde5a0f0e6538d07a96255","date":1393593793,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos, infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose(writer)) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge, writer);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge, writer)) {\n      if (verbose(writer)) {\n        message(\"already merged; skip\", writer);\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose(writer)) {\n        message(\"last == 0; skip\", writer);\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos, infos.info(0), writer)) {\n      if (verbose(writer)) {\n        message(\"already 1 seg; skip\", writer);\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info, writer) > maxMergeSizeForForcedMerge || sizeDocs(info, writer) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last, writer);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last, writer);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos, infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"027bee21e09164c9ee230395405076d1e0034b30":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["027bee21e09164c9ee230395405076d1e0034b30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}