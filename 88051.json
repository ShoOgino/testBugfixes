{"path":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}