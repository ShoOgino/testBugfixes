{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      return replicas;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["22ea61eae4570e71fe0867487241a0a6d14d6f19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22ea61eae4570e71fe0867487241a0a6d14d6f19","date":1522323739,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","sourceNew":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[0]));\n    }\n  }\n\n","sourceOld":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      return replicas;\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","sourceNew":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[0]));\n    }\n  }\n\n","sourceOld":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      return replicas;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","sourceNew":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n      (node, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    // make a defensive copy to avoid ConcurrentModificationException\n    return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n  }\n\n","sourceOld":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(node);\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String).mjava","sourceNew":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n      (node, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    // make a defensive copy to avoid ConcurrentModificationException\n    return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n  }\n\n","sourceOld":"  /**\n   * Return all replica infos for a node.\n   * @param node node id\n   * @return copy of the list of replicas on that node, or empty list if none\n   */\n  public List<ReplicaInfo> simGetReplicaInfos(String node) {\n    final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n      (node, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    // make a defensive copy to avoid ConcurrentModificationException\n    return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22ea61eae4570e71fe0867487241a0a6d14d6f19":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"43564cbb30b064675027cfb569564e8531096e97":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","22ea61eae4570e71fe0867487241a0a6d14d6f19"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"22ea61eae4570e71fe0867487241a0a6d14d6f19":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["22ea61eae4570e71fe0867487241a0a6d14d6f19","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}