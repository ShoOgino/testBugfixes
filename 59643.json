{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setEmpty().append(buffer);\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setEmpty().append(buffer);\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setEmpty().append(buffer);\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}