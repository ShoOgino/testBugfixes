{"path":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d72889028c945ff17dbba53e91cf754d05f2b46b","date":1345507003,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":" /**\n   * Advances to the first beyond the current whose document number is greater \n   * than or equal to <i>target</i>, and returns the document number itself. \n   * Exhausts the iterator and returns {@link #NO_MORE_DOCS} if <i>target</i> \n   * is greater than the highest document number in the set.\n   * <p>\n   * The behavior of this method is <b>undefined</b> when called with\n   * <code> target &le; current</code>, or after the iterator has exhausted.\n   * Both cases may result in unpredicted behavior.\n   * <p>\n   * When <code> target &gt; current</code> it behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   *\n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","a402a31d46de4a1611f5f0e3b2b0b69c9b84def9","c6b177184d12ea0f4978054530cfa34b667eb4af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":" /**\n   * Advances to the first beyond the current whose document number is greater \n   * than or equal to <i>target</i>, and returns the document number itself. \n   * Exhausts the iterator and returns {@link #NO_MORE_DOCS} if <i>target</i> \n   * is greater than the highest document number in the set.\n   * <p>\n   * The behavior of this method is <b>undefined</b> when called with\n   * <code> target &le; current</code>, or after the iterator has exhausted.\n   * Both cases may result in unpredicted behavior.\n   * <p>\n   * When <code> target &gt; current</code> it behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   *\n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":" /**\n   * Advances to the first beyond the current whose document number is greater \n   * than or equal to <i>target</i>, and returns the document number itself. \n   * Exhausts the iterator and returns {@link #NO_MORE_DOCS} if <i>target</i> \n   * is greater than the highest document number in the set.\n   * <p>\n   * The behavior of this method is <b>undefined</b> when called with\n   * <code> target &le; current</code>, or after the iterator has exhausted.\n   * Both cases may result in unpredicted behavior.\n   * <p>\n   * When <code> target &gt; current</code> it behaves as if written:\n   * \n   * <pre class=\"prettyprint\">\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   *\n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":" /**\n   * Advances to the first beyond the current whose document number is greater \n   * than or equal to <i>target</i>, and returns the document number itself. \n   * Exhausts the iterator and returns {@link #NO_MORE_DOCS} if <i>target</i> \n   * is greater than the highest document number in the set.\n   * <p>\n   * The behavior of this method is <b>undefined</b> when called with\n   * <code> target &le; current</code>, or after the iterator has exhausted.\n   * Both cases may result in unpredicted behavior.\n   * <p>\n   * When <code> target &gt; current</code> it behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   *\n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d72889028c945ff17dbba53e91cf754d05f2b46b"],"8471c0f357621e859602d44e1af230581b739319":["d72889028c945ff17dbba53e91cf754d05f2b46b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d72889028c945ff17dbba53e91cf754d05f2b46b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8471c0f357621e859602d44e1af230581b739319"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"8471c0f357621e859602d44e1af230581b739319":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","d72889028c945ff17dbba53e91cf754d05f2b46b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d72889028c945ff17dbba53e91cf754d05f2b46b":["001b25b42373b22a52f399dbf072f1224632e8e6","8471c0f357621e859602d44e1af230581b739319"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}