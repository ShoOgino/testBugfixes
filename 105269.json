{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"/dev/null","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target();\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target();\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","sourceNew":null,"sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target();\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#[T]_walk(FST[T]).mjava","pathOld":"/dev/null","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target();\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"f8061ddd97f3352007d927dae445884a6f3d857b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","f8061ddd97f3352007d927dae445884a6f3d857b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}