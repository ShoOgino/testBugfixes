{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery.build();\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery.build();\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}