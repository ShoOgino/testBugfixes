{"path":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByte4().mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByte4().mjava","pathOld":"/dev/null","sourceNew":"  public void testByte4() {\n    int[] decoded = new int[256];\n    for (int b = 0; b < 256; ++b) {\n      decoded[b] = SmallFloat.byte4ToInt((byte) b);\n      assertEquals((byte) b, SmallFloat.intToByte4(decoded[b]));\n    }\n    for (int i = 1; i < 256; ++i) {\n      assertTrue(decoded[i] > decoded[i-1]);\n    }\n    assertEquals((byte) 255, SmallFloat.intToByte4(Integer.MAX_VALUE));\n    final int iters = atLeast(1000);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int i = random().nextInt(1 << TestUtil.nextInt(random(), 5, 30));\n      int idx = Arrays.binarySearch(decoded, i);\n      if (idx < 0) {\n        idx = -2 - idx;\n      }\n      assertTrue(decoded[idx] <= i);\n      assertEquals((byte) idx, SmallFloat.intToByte4(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByte4().mjava","pathOld":"/dev/null","sourceNew":"  public void testByte4() {\n    int[] decoded = new int[256];\n    for (int b = 0; b < 256; ++b) {\n      decoded[b] = SmallFloat.byte4ToInt((byte) b);\n      assertEquals((byte) b, SmallFloat.intToByte4(decoded[b]));\n    }\n    for (int i = 1; i < 256; ++i) {\n      assertTrue(decoded[i] > decoded[i-1]);\n    }\n    assertEquals((byte) 255, SmallFloat.intToByte4(Integer.MAX_VALUE));\n    final int iters = atLeast(1000);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int i = random().nextInt(1 << TestUtil.nextInt(random(), 5, 30));\n      int idx = Arrays.binarySearch(decoded, i);\n      if (idx < 0) {\n        idx = -2 - idx;\n      }\n      assertTrue(decoded[idx] <= i);\n      assertEquals((byte) idx, SmallFloat.intToByte4(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}