{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeDocValuesFormat#RangeTreeDocValuesFormat(int,int).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeDocValuesFormat#RangeTreeDocValuesFormat(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates this with custom configuration.\n   *\n   * @param maxPointsInLeafNode Maximum number of points in each leaf cell.  Smaller values create a deeper tree with larger in-heap index and possibly\n   *    faster searching.  The default is 1024.\n   * @param maxPointsSortInHeap Maximum number of points where in-heap sort can be used.  When the number of points exceeds this, a (slower)\n   *    offline sort is used.  The default is 128 * 1024.\n   *\n   * @lucene.experimental */\n  public RangeTreeDocValuesFormat(int maxPointsInLeafNode, int maxPointsSortInHeap) {\n    super(\"NumericTree\");\n    RangeTreeWriter.verifyParams(maxPointsInLeafNode, maxPointsSortInHeap);\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74","date":1438421983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeDocValuesFormat#RangeTreeDocValuesFormat(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeDocValuesFormat#RangeTreeDocValuesFormat(int,int).mjava","sourceNew":"  /** Creates this with custom configuration.\n   *\n   * @param maxPointsInLeafNode Maximum number of points in each leaf cell.  Smaller values create a deeper tree with larger in-heap index and possibly\n   *    faster searching.  The default is 1024.\n   * @param maxPointsSortInHeap Maximum number of points where in-heap sort can be used.  When the number of points exceeds this, a (slower)\n   *    offline sort is used.  The default is 128 * 1024.\n   *\n   * @lucene.experimental */\n  public RangeTreeDocValuesFormat(int maxPointsInLeafNode, int maxPointsSortInHeap) {\n    super(\"RangeTree\");\n    RangeTreeWriter.verifyParams(maxPointsInLeafNode, maxPointsSortInHeap);\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n  }\n\n","sourceOld":"  /** Creates this with custom configuration.\n   *\n   * @param maxPointsInLeafNode Maximum number of points in each leaf cell.  Smaller values create a deeper tree with larger in-heap index and possibly\n   *    faster searching.  The default is 1024.\n   * @param maxPointsSortInHeap Maximum number of points where in-heap sort can be used.  When the number of points exceeds this, a (slower)\n   *    offline sort is used.  The default is 128 * 1024.\n   *\n   * @lucene.experimental */\n  public RangeTreeDocValuesFormat(int maxPointsInLeafNode, int maxPointsSortInHeap) {\n    super(\"NumericTree\");\n    RangeTreeWriter.verifyParams(maxPointsInLeafNode, maxPointsSortInHeap);\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeDocValuesFormat#RangeTreeDocValuesFormat(int,int).mjava","sourceNew":null,"sourceOld":"  /** Creates this with custom configuration.\n   *\n   * @param maxPointsInLeafNode Maximum number of points in each leaf cell.  Smaller values create a deeper tree with larger in-heap index and possibly\n   *    faster searching.  The default is 1024.\n   * @param maxPointsSortInHeap Maximum number of points where in-heap sort can be used.  When the number of points exceeds this, a (slower)\n   *    offline sort is used.  The default is 128 * 1024.\n   *\n   * @lucene.experimental */\n  public RangeTreeDocValuesFormat(int maxPointsInLeafNode, int maxPointsSortInHeap) {\n    super(\"RangeTree\");\n    RangeTreeWriter.verifyParams(maxPointsInLeafNode, maxPointsSortInHeap);\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}