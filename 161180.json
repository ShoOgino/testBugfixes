{"path":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","pathOld":"/dev/null","sourceNew":"  public Collection getFieldNames(FieldOption fldOption) {\n    if (fldOption != FieldOption.ALL) {\n      throw new IllegalArgumentException(\"Only FieldOption.ALL implemented.\"); // todo\n    }\n    return new ArrayList<String>(getIndex().getTermsByFieldAndText().keySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","date":1214673815,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","sourceNew":"  public Collection getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","sourceOld":"  public Collection getFieldNames(FieldOption fldOption) {\n    if (fldOption != FieldOption.ALL) {\n      throw new IllegalArgumentException(\"Only FieldOption.ALL implemented.\"); // todo\n    }\n    return new ArrayList<String>(getIndex().getTermsByFieldAndText().keySet());\n  }\n\n","bugFix":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","sourceNew":"  @Override\n  public Collection getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","sourceOld":"  public Collection getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","sourceNew":"  @Override\n  public Collection<String> getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","sourceOld":"  @Override\n  public Collection getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getFieldNames(FieldOption).mjava","sourceNew":"  @Override\n  public Collection<String> getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> getFieldNames(FieldOption fieldOption) {\n    Set<String> fieldSet = new HashSet<String>();\n    for (FieldSetting fi : index.getFieldSettings().values()) {\n      if (fieldOption == IndexReader.FieldOption.ALL) {\n        fieldSet.add(fi.fieldName);\n      } else if (!fi.indexed && fieldOption == IndexReader.FieldOption.UNINDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePayloads && fieldOption == IndexReader.FieldOption.STORES_PAYLOADS) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fieldOption == IndexReader.FieldOption.INDEXED) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector == false && fieldOption == IndexReader.FieldOption.INDEXED_NO_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeTermVector == true && fi.storePositionWithTermVector == false && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.indexed && fi.storeTermVector && fieldOption == IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storePositionWithTermVector && fi.storeOffsetWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION) {\n        fieldSet.add(fi.fieldName);\n      } else if (fi.storeOffsetWithTermVector && fi.storePositionWithTermVector == false\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } else if ((fi.storeOffsetWithTermVector && fi.storePositionWithTermVector)\n          && fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {\n        fieldSet.add(fi.fieldName);\n      } \n    }\n    return fieldSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}