{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsCollector<?> collector = (TopDocsCollector<?>) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          topDocs.getMaxScore(),\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","sourceOld":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsCollector<?> collector = (TopDocsCollector<?>) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          topDocs.getMaxScore(),\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","sourceNew":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsAndMaxScoreCollector collector = (TopDocsAndMaxScoreCollector) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs;\n      final float groupMaxScore;\n      if (collector.sortedByScore) {\n        TopDocs allTopDocs = collector.topDocsCollector.topDocs();\n        groupMaxScore = allTopDocs.scoreDocs.length == 0 ? Float.NaN : allTopDocs.scoreDocs[0].score;\n        if (allTopDocs.scoreDocs.length <= withinGroupOffset) {\n          topDocs = new TopDocs(allTopDocs.totalHits, new ScoreDoc[0]);\n        } else {\n          topDocs = new TopDocs(allTopDocs.totalHits, ArrayUtil.copyOfSubArray(allTopDocs.scoreDocs, withinGroupOffset, Math.min(allTopDocs.scoreDocs.length, withinGroupOffset + maxDocsPerGroup)));\n        }\n      } else {\n        topDocs = collector.topDocsCollector.topDocs(withinGroupOffset, maxDocsPerGroup);\n        if (collector.maxScoreCollector == null) {\n          groupMaxScore = Float.NaN;\n        } else {\n          groupMaxScore = collector.maxScoreCollector.getMaxScore();\n        }\n      }\n      \n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          groupMaxScore,\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, groupMaxScore);\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","sourceOld":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsCollector<?> collector = (TopDocsCollector<?>) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          topDocs.getMaxScore(),\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","sourceNew":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsAndMaxScoreCollector collector = (TopDocsAndMaxScoreCollector) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs;\n      final float groupMaxScore;\n      if (collector.sortedByScore) {\n        TopDocs allTopDocs = collector.topDocsCollector.topDocs();\n        groupMaxScore = allTopDocs.scoreDocs.length == 0 ? Float.NaN : allTopDocs.scoreDocs[0].score;\n        if (allTopDocs.scoreDocs.length <= withinGroupOffset) {\n          topDocs = new TopDocs(allTopDocs.totalHits, new ScoreDoc[0]);\n        } else {\n          topDocs = new TopDocs(allTopDocs.totalHits, ArrayUtil.copyOfSubArray(allTopDocs.scoreDocs, withinGroupOffset, Math.min(allTopDocs.scoreDocs.length, withinGroupOffset + maxDocsPerGroup)));\n        }\n      } else {\n        topDocs = collector.topDocsCollector.topDocs(withinGroupOffset, maxDocsPerGroup);\n        if (collector.maxScoreCollector == null) {\n          groupMaxScore = Float.NaN;\n        } else {\n          groupMaxScore = collector.maxScoreCollector.getMaxScore();\n        }\n      }\n      \n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          groupMaxScore,\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, groupMaxScore);\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","sourceOld":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsCollector<?> collector = (TopDocsCollector<?>) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          topDocs.getMaxScore(),\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7ae958a739da1866696f442384393ba2f13e33e5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ae958a739da1866696f442384393ba2f13e33e5":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}