{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/CompositeOffsetsPostingsEnum#CompositeOffsetsPostingsEnum(List[PostingsEnum]).mjava","commits":[{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/CompositeOffsetsPostingsEnum#CompositeOffsetsPostingsEnum(List[PostingsEnum]).mjava","pathOld":"/dev/null","sourceNew":"  /** The provided {@link PostingsEnum}s must all be positioned to the same document, and must have offsets. */\n  CompositeOffsetsPostingsEnum(List<PostingsEnum> postingsEnums) throws IOException {\n    queue = new PriorityQueue<BoundsCheckingPostingsEnum>(postingsEnums.size()) {\n      @Override\n      protected boolean lessThan(BoundsCheckingPostingsEnum a, BoundsCheckingPostingsEnum b) {\n        try {\n          return a.postingsEnum.startOffset() < b.postingsEnum.startOffset();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    int freqAdd = 0;\n    for (PostingsEnum postingsEnum : postingsEnums) {\n      queue.add(new BoundsCheckingPostingsEnum(postingsEnum));\n      freqAdd += postingsEnum.freq();\n    }\n    freq = freqAdd;\n    this.docId = queue.top().postingsEnum.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/CompositeOffsetsPostingsEnum#CompositeOffsetsPostingsEnum(List[PostingsEnum]).mjava","pathOld":"/dev/null","sourceNew":"  /** The provided {@link PostingsEnum}s must all be positioned to the same document, and must have offsets. */\n  CompositeOffsetsPostingsEnum(List<PostingsEnum> postingsEnums) throws IOException {\n    queue = new PriorityQueue<BoundsCheckingPostingsEnum>(postingsEnums.size()) {\n      @Override\n      protected boolean lessThan(BoundsCheckingPostingsEnum a, BoundsCheckingPostingsEnum b) {\n        try {\n          return a.postingsEnum.startOffset() < b.postingsEnum.startOffset();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    int freqAdd = 0;\n    for (PostingsEnum postingsEnum : postingsEnums) {\n      queue.add(new BoundsCheckingPostingsEnum(postingsEnum));\n      freqAdd += postingsEnum.freq();\n    }\n    freq = freqAdd;\n    this.docId = queue.top().postingsEnum.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/CompositeOffsetsPostingsEnum#CompositeOffsetsPostingsEnum(List[PostingsEnum]).mjava","sourceNew":null,"sourceOld":"  /** The provided {@link PostingsEnum}s must all be positioned to the same document, and must have offsets. */\n  CompositeOffsetsPostingsEnum(List<PostingsEnum> postingsEnums) throws IOException {\n    queue = new PriorityQueue<BoundsCheckingPostingsEnum>(postingsEnums.size()) {\n      @Override\n      protected boolean lessThan(BoundsCheckingPostingsEnum a, BoundsCheckingPostingsEnum b) {\n        try {\n          return a.postingsEnum.startOffset() < b.postingsEnum.startOffset();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    int freqAdd = 0;\n    for (PostingsEnum postingsEnum : postingsEnums) {\n      queue.add(new BoundsCheckingPostingsEnum(postingsEnum));\n      freqAdd += postingsEnum.freq();\n    }\n    freq = freqAdd;\n    this.docId = queue.top().postingsEnum.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["8764ca7bb74ee716c839b9545a93ec4a578c2005","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e9861e4a2b724d9fc51b618714c579491b78d7","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}