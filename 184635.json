{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#doTestAllTasksSimpleParse(boolean,boolean).mjava","commits":[{"id":"975cb787e66d548dba4f63c22c08d692c7235f73","date":1174605228,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#doTestAllTasksSimpleParse(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // utility for simple parsing testing of all tasks.\n  private void doTestAllTasksSimpleParse(boolean parOrSeq, boolean par) {\n    for (int i = 0; i < singleTaskAlgs.length; i++) {\n      String testedTask = singleTaskAlgs[i];\n      if (parOrSeq) {\n        if (par) {\n          testedTask = \"[ \" + testedTask + \" ] : 2\";\n        } else {\n          testedTask = \"{ \" + testedTask + \" } : 3\";\n        }\n      }\n      try {\n        String algText = propPart+INDENT+testedTask;\n        logTstParsing(algText);\n        Benchmark benchmark = new Benchmark(new StringReader(algText));\n        Algorithm alg = benchmark.getAlgorithm();\n        ArrayList algTasks = alg.extractTasks();\n        // must find a task with this name in the algorithm\n        boolean foundName = false;\n        boolean foundPar = false;\n        String theTask = singleTaskAlgs[i].replaceAll(\" +\",\" \").trim();\n        for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n          PerfTask task = (PerfTask) iter.next();\n          foundName |= (task.toString().indexOf(theTask)>=0);\n          foundPar |= (task instanceof TaskSequence && ((TaskSequence)task).isParallel());\n        }\n        assertTrue(\"Task \"+testedTask+\" was not found in \"+alg.toString(),foundName);\n        if (parOrSeq) {\n          if (par) {\n            assertTrue(\"Task \"+testedTask+\" was supposed to be parallel in \"+alg.toString(),foundPar);\n          } else {\n            assertFalse(\"Task \"+testedTask+\" was not supposed to be parallel in \"+alg.toString(),foundPar);\n          }\n        }\n      } catch (Exception e) {\n        System.out.flush();\n        e.printStackTrace();\n        fail(e.getMessage());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bea909b475e3f9d726f4fee3c27d3c870b9027","date":1239875190,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#doTestAllTasksSimpleParse(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // utility for simple parsing testing of all tasks.\n  private void doTestAllTasksSimpleParse(boolean parOrSeq, boolean par) {\n    for (int i = 0; i < singleTaskAlgs.length; i++) {\n      String testedTask = singleTaskAlgs[i];\n      if (parOrSeq) {\n        if (par) {\n          testedTask = \"[ \" + testedTask + \" ] : 2\";\n        } else {\n          testedTask = \"{ \" + testedTask + \" } : 3\";\n        }\n      }\n      try {\n        String algText = propPart+INDENT+testedTask;\n        logTstParsing(algText);\n        Benchmark benchmark = new Benchmark(new StringReader(algText));\n        Algorithm alg = benchmark.getAlgorithm();\n        ArrayList algTasks = alg.extractTasks();\n        // must find a task with this name in the algorithm\n        boolean foundName = false;\n        boolean foundPar = false;\n        String theTask = singleTaskAlgs[i].replaceAll(\" +\",\" \").trim();\n        for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n          PerfTask task = (PerfTask) iter.next();\n          foundName |= (task.toString().indexOf(theTask)>=0);\n          foundPar |= (task instanceof TaskSequence && ((TaskSequence)task).isParallel());\n        }\n        assertTrue(\"Task \"+testedTask+\" was not found in \"+alg.toString(),foundName);\n        if (parOrSeq) {\n          if (par) {\n            assertTrue(\"Task \"+testedTask+\" was supposed to be parallel in \"+alg.toString(),foundPar);\n          } else {\n            assertFalse(\"Task \"+testedTask+\" was not supposed to be parallel in \"+alg.toString(),foundPar);\n          }\n        }\n      } catch (Exception e) {\n        System.out.flush();\n        e.printStackTrace();\n        fail(e.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"975cb787e66d548dba4f63c22c08d692c7235f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["975cb787e66d548dba4f63c22c08d692c7235f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"]},"commit2Childs":{"975cb787e66d548dba4f63c22c08d692c7235f73":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["975cb787e66d548dba4f63c22c08d692c7235f73"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}