{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getMinAchievedReplicationFactor(String,NamedList).mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getMinAchievedReplicationFactor(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getMinAchievedReplicationFactor(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getMinAchievedReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getMinAchievedReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","sourceOld":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["bafca15d8e408346a67f4282ad1143b88023893b","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}