{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Cell.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Cell cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Node.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Node cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Cell.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Cell cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy.CellTokenStream#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (nextTokenStringNeedingLeaf != null) {\n        termAtt.append(nextTokenStringNeedingLeaf);\n        termAtt.append((char) Cell.LEAF_BYTE);\n        nextTokenStringNeedingLeaf = null;\n        return true;\n      }\n      if (iter.hasNext()) {\n        Cell cell = iter.next();\n        CharSequence token = cell.getTokenString();\n        termAtt.append(token);\n        if (cell.isLeaf())\n          nextTokenStringNeedingLeaf = token;\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"8259c159da2de2e8528524fb76b244b46cbded59":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}