{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return lon >= minLon && lon <= maxLon && lat >= minLat && lat <= maxLat;\n  }\n\n","sourceOld":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return lon >= minLon && lon <= maxLon && lat >= minLat && lat <= maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInRect(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return lon >= minLon && lon <= maxLon && lat >= minLat && lat <= maxLat;\n  }\n\n","sourceOld":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRect(final double lon, final double lat, final double minLon,\n                                    final double minLat, final double maxLon, final double maxLat) {\n    return (GeoUtils.compare(lon, minLon) >= 0 && GeoUtils.compare(lon, maxLon) <= 0\n        && GeoUtils.compare(lat, minLat) >= 0 && GeoUtils.compare(lat, maxLat) <= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Determine if a bbox (defined by minLat, maxLat, minLon, maxLon) contains the provided point (defined by lat, lon)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lat, final double lon,\n                                           final double minLat, final double maxLat,\n                                           final double minLon, final double maxLon) {\n    return lat >= minLat && lat <= maxLat && lon >= minLon && lon <= maxLon;\n  }\n\n","sourceOld":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return lon >= minLon && lon <= maxLon && lat >= minLat && lat <= maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf436f74d20215759bddd34832de74d7227024b1","date":1579195325,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInRectPrecise(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determine if a bbox (defined by minLat, maxLat, minLon, maxLon) contains the provided point (defined by lat, lon)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRectPrecise(final double lat, final double lon,\n                                           final double minLat, final double maxLat,\n                                           final double minLon, final double maxLon) {\n    return lat >= minLat && lat <= maxLat && lon >= minLon && lon <= maxLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"bf436f74d20215759bddd34832de74d7227024b1":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf436f74d20215759bddd34832de74d7227024b1"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["bf436f74d20215759bddd34832de74d7227024b1"],"bf436f74d20215759bddd34832de74d7227024b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}