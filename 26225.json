{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","commits":[{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof MapWriter) {\n            val = getVal((MapWriter) val, null, idx);\n\n          } else if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof MapWriter) {\n            val = getVal((MapWriter) val, null, idx);\n\n          } else if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if (root == null) return null;\n    if (!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if (root == null) return null;\n    if (!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if (root == null) return null;\n    if (!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if (root == null) return null;\n    if (!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if (root == null) return null;\n    if (!isMapLike(root)) return null;\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s != null && s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return null;\n        if (idx > -1) {\n          if (o instanceof MapWriter) {\n            o = getVal(o, null, idx);\n          } else if (o instanceof Map) {\n            o = getVal(new MapWriterMap((Map) o), null, idx);\n          } else {\n            List l = (List) o;\n            o = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s, -1);\n        if (val == null) return null;\n        if (idx > -1) {\n          if (val instanceof IteratorWriter) {\n            val = getValueAt((IteratorWriter) val, idx);\n          } else {\n            List l = (List) val;\n            val = idx < l.size() ? l.get(idx) : null;\n          }\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["8476949555f799dff381770c01cfad051a264487"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["6428b274f6593f368c4f838379620e7f5d196d65"],"3167eae3325cf45449a75ab0468b53c0545606a3":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"6428b274f6593f368c4f838379620e7f5d196d65":["afde616cab4149eba221511fd7ff21d460cded7c"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"afde616cab4149eba221511fd7ff21d460cded7c":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"e3590d254d013266ac3849fae45974e747f7f576":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["3167eae3325cf45449a75ab0468b53c0545606a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["3167eae3325cf45449a75ab0468b53c0545606a3"],"6428b274f6593f368c4f838379620e7f5d196d65":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"3167eae3325cf45449a75ab0468b53c0545606a3":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"8476949555f799dff381770c01cfad051a264487":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"afde616cab4149eba221511fd7ff21d460cded7c":["6428b274f6593f368c4f838379620e7f5d196d65"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e3590d254d013266ac3849fae45974e747f7f576"],"28288370235ed02234a64753cdbf0c6ec096304a":["afde616cab4149eba221511fd7ff21d460cded7c"],"e3590d254d013266ac3849fae45974e747f7f576":[],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3590d254d013266ac3849fae45974e747f7f576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}