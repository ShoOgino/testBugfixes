{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchAlmostRecursion(TSTNode,int,int,CharSequence,int,List[String],boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchAlmostRecursion(TSTNode,int,int,CharSequence,int,List[String],boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#matchAlmostRecursion(TSTNode,int,int,CharSequence,int,List[String],boolean).mjava","sourceNew":"  /**\n   * Recursivelly vists the nodes in order to find the ones that almost match a\n   * given key.\n   * \n   *@param currentNode\n   *          The current node.\n   *@param charIndex\n   *          The current char.\n   *@param d\n   *          The number of differences so far.\n   *@param matchAlmostNumReturnValues\n   *          The maximum number of values in the result <code>List</code>.\n   *@param matchAlmostResult2\n   *          The results so far.\n   *@param upTo\n   *          If true all keys having up to and including matchAlmostDiff\n   *          mismatched letters will be included in the result (including a key\n   *          that is exactly the same as the target string) otherwise keys will\n   *          be included in the result only if they have exactly\n   *          matchAlmostDiff number of mismatched letters.\n   *@param matchAlmostKey\n   *          The key being searched.\n   *@return A <code>List</code> with the results.\n   */\n  private List<String> matchAlmostRecursion(TSTNode currentNode, int charIndex,\n          int d, CharSequence matchAlmostKey, int matchAlmostNumReturnValues,\n          List<String> matchAlmostResult2, boolean upTo) {\n    if ((currentNode == null)\n            || (matchAlmostNumReturnValues != -1 && matchAlmostResult2.size() >= matchAlmostNumReturnValues)\n            || (d < 0) || (charIndex >= matchAlmostKey.length())) {\n      return matchAlmostResult2;\n    }\n    int charComp = compareCharsAlphabetically(matchAlmostKey.charAt(charIndex),\n            currentNode.splitchar);\n    List<String> matchAlmostResult = matchAlmostResult2;\n    if ((d > 0) || (charComp < 0)) {\n      matchAlmostResult = matchAlmostRecursion(\n              currentNode.relatives[TSTNode.LOKID], charIndex, d,\n              matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult,\n              upTo);\n    }\n    int nextD = (charComp == 0) ? d : d - 1;\n    boolean cond = (upTo) ? (nextD >= 0) : (nextD == 0);\n    if ((matchAlmostKey.length() == charIndex + 1) && cond\n            && (currentNode.data != null)) {\n      matchAlmostResult.add(getKey(currentNode));\n    }\n    matchAlmostResult = matchAlmostRecursion(\n            currentNode.relatives[TSTNode.EQKID], charIndex + 1, nextD,\n            matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult, upTo);\n    if ((d > 0) || (charComp > 0)) {\n      matchAlmostResult = matchAlmostRecursion(\n              currentNode.relatives[TSTNode.HIKID], charIndex, d,\n              matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult,\n              upTo);\n    }\n    return matchAlmostResult;\n  }\n\n","sourceOld":"  /**\n   * Recursivelly vists the nodes in order to find the ones that almost match a\n   * given key.\n   * \n   *@param currentNode\n   *          The current node.\n   *@param charIndex\n   *          The current char.\n   *@param d\n   *          The number of differences so far.\n   *@param matchAlmostNumReturnValues\n   *          The maximum number of values in the result <code>List</code>.\n   *@param matchAlmostResult2\n   *          The results so far.\n   *@param upTo\n   *          If true all keys having up to and including matchAlmostDiff\n   *          mismatched letters will be included in the result (including a key\n   *          that is exactly the same as the target string) otherwise keys will\n   *          be included in the result only if they have exactly\n   *          matchAlmostDiff number of mismatched letters.\n   *@param matchAlmostKey\n   *          The key being searched.\n   *@return A <code>List</code> with the results.\n   */\n  private List<String> matchAlmostRecursion(TSTNode currentNode, int charIndex,\n          int d, CharSequence matchAlmostKey, int matchAlmostNumReturnValues,\n          List<String> matchAlmostResult2, boolean upTo) {\n    if ((currentNode == null)\n            || (matchAlmostNumReturnValues != -1 && matchAlmostResult2.size() >= matchAlmostNumReturnValues)\n            || (d < 0) || (charIndex >= matchAlmostKey.length())) {\n      return matchAlmostResult2;\n    }\n    int charComp = compareCharsAlphabetically(matchAlmostKey.charAt(charIndex),\n            currentNode.splitchar);\n    List<String> matchAlmostResult = matchAlmostResult2;\n    if ((d > 0) || (charComp < 0)) {\n      matchAlmostResult = matchAlmostRecursion(\n              currentNode.relatives[TSTNode.LOKID], charIndex, d,\n              matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult,\n              upTo);\n    }\n    int nextD = (charComp == 0) ? d : d - 1;\n    boolean cond = (upTo) ? (nextD >= 0) : (nextD == 0);\n    if ((matchAlmostKey.length() == charIndex + 1) && cond\n            && (currentNode.data != null)) {\n      matchAlmostResult.add(getKey(currentNode));\n    }\n    matchAlmostResult = matchAlmostRecursion(\n            currentNode.relatives[TSTNode.EQKID], charIndex + 1, nextD,\n            matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult, upTo);\n    if ((d > 0) || (charComp > 0)) {\n      matchAlmostResult = matchAlmostRecursion(\n              currentNode.relatives[TSTNode.HIKID], charIndex, d,\n              matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult,\n              upTo);\n    }\n    return matchAlmostResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}