{"path":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getFieldWriters(String[],SolrIndexSearcher).mjava","commits":[{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"]},"commit2Childs":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}