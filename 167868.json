{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","commits":[{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":1,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","sourceNew":"  private MockZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkAddress, zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","sourceNew":"  private ZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) throws InterruptedException, NoSuchFieldException, SecurityException {\n    ZkController zkController = mock(ZkController.class);\n    \n    if (zkClient == null) {\n      SolrZkClient newZkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      Mockito.doAnswer(\n          new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              newZkClient.close();\n              return null;\n            }}).when(zkController).close();\n      zkClient = newZkClient;\n    } else {\n      doNothing().when(zkController).close();\n    }\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(testDone);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"zkClient\"), zkClient);\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"cc\"), mockAlwaysUpCoreContainer);\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt())).thenCallRealMethod();\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt(), anyBoolean())).thenCallRealMethod();  \n    doReturn(getCloudDataProvider(zkAddress, zkClient, reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private MockZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkAddress, zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","7faee6ec986350688488b9513ac66bb38e260cd3"],"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","sourceNew":"  private ZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) throws InterruptedException, NoSuchFieldException, SecurityException {\n    ZkController zkController = mock(ZkController.class);\n\n    if (zkClient == null) {\n      SolrZkClient newZkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      Mockito.doAnswer(\n          new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              newZkClient.close();\n              return null;\n            }}).when(zkController).close();\n      zkClient = newZkClient;\n    } else {\n      doNothing().when(zkController).close();\n    }\n\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(testDone);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"zkClient\"), zkClient);\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"cc\"), mockAlwaysUpCoreContainer);\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt())).thenCallRealMethod();\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt(), anyBoolean())).thenCallRealMethod();\n    doReturn(getCloudDataProvider(zkAddress, zkClient, reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) throws InterruptedException, NoSuchFieldException, SecurityException {\n    ZkController zkController = mock(ZkController.class);\n    \n    if (zkClient == null) {\n      SolrZkClient newZkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      Mockito.doAnswer(\n          new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              newZkClient.close();\n              return null;\n            }}).when(zkController).close();\n      zkClient = newZkClient;\n    } else {\n      doNothing().when(zkController).close();\n    }\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(testDone);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"zkClient\"), zkClient);\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"cc\"), mockAlwaysUpCoreContainer);\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt())).thenCallRealMethod();\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt(), anyBoolean())).thenCallRealMethod();  \n    doReturn(getCloudDataProvider(zkAddress, zkClient, reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","sourceNew":"  private ZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) throws InterruptedException, NoSuchFieldException, SecurityException, SessionExpiredException {\n    ZkController zkController = mock(ZkController.class);\n\n    if (zkClient == null) {\n      SolrZkClient newZkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      Mockito.doAnswer(\n          new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              newZkClient.close();\n              return null;\n            }}).when(zkController).close();\n      zkClient = newZkClient;\n    } else {\n      doNothing().when(zkController).close();\n    }\n\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(testDone);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"zkClient\"), zkClient);\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"cc\"), mockAlwaysUpCoreContainer);\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt())).thenCallRealMethod();\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt(), anyBoolean())).thenCallRealMethod();\n    doReturn(getCloudDataProvider(zkAddress, zkClient, reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) throws InterruptedException, NoSuchFieldException, SecurityException {\n    ZkController zkController = mock(ZkController.class);\n\n    if (zkClient == null) {\n      SolrZkClient newZkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      Mockito.doAnswer(\n          new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n              newZkClient.close();\n              return null;\n            }}).when(zkController).close();\n      zkClient = newZkClient;\n    } else {\n      doNothing().when(zkController).close();\n    }\n\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(testDone);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"zkClient\"), zkClient);\n    FieldSetter.setField(zkController, ZkController.class.getDeclaredField(\"cc\"), mockAlwaysUpCoreContainer);\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt())).thenCallRealMethod();\n    when(zkController.getLeaderProps(anyString(), anyString(), anyInt(), anyBoolean())).thenCallRealMethod();\n    doReturn(getCloudDataProvider(zkAddress, zkClient, reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}