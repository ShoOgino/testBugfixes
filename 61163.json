{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":"    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (term.compareTo(lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (term.compareTo(currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = seekTerm.compareTo(term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (term.compareTo(lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (term.compareTo(currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = seekTerm.compareTo(term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (comparator.compare(term, lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (comparator.compare(term, currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = comparator.compare(seekTerm, term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc340d133549ef3a658aa916003827c842110fa4","date":1555014129,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.SeekingTermSetTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected AcceptStatus accept(BytesRef term) throws IOException {\n      if (term.compareTo(lastTerm) > 0) {\n        return AcceptStatus.END;\n      }\n\n      BytesRef currentTerm = terms.get(ords[upto], spare);\n      if (term.compareTo(currentTerm) == 0) {\n        if (upto == lastElement) {\n          return AcceptStatus.YES;\n        } else {\n          seekTerm = terms.get(ords[++upto], spare);\n          return AcceptStatus.YES_AND_SEEK;\n        }\n      } else {\n        if (upto == lastElement) {\n          return AcceptStatus.NO;\n        } else { // Our current term doesn't match the the given term.\n          int cmp;\n          do { // We maybe are behind the given term by more than one step. Keep incrementing till we're the same or higher.\n            if (upto == lastElement) {\n              return AcceptStatus.NO;\n            }\n            // typically the terms dict is a superset of query's terms so it's unusual that we have to skip many of\n            // our terms so we don't do a binary search here\n            seekTerm = terms.get(ords[++upto], spare);\n          } while ((cmp = seekTerm.compareTo(term)) < 0);\n          if (cmp == 0) {\n            if (upto == lastElement) {\n              return AcceptStatus.YES;\n            }\n            seekTerm = terms.get(ords[++upto], spare);\n            return AcceptStatus.YES_AND_SEEK;\n          } else {\n            return AcceptStatus.NO_AND_SEEK;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"af2638813028b254a88b418ebeafb541afb49653":["7530de27b87b961b51f01bd1299b7004d46e8823","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc340d133549ef3a658aa916003827c842110fa4"],"bc340d133549ef3a658aa916003827c842110fa4":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"af2638813028b254a88b418ebeafb541afb49653":["bc340d133549ef3a658aa916003827c842110fa4"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bc340d133549ef3a658aa916003827c842110fa4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}