{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","pathOld":"/dev/null","sourceNew":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    SolrResponse response = null;\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    String asyncId = req.getParams().get(ASYNC);\n    if (props != null) {\n      if (asyncId != null) {\n        props.put(ASYNC, asyncId);\n      }\n      props.put(QUEUE_OPERATION, operation.action.toLower());\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      if (operation.sendToOCPQueue) {\n        response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n      }\n      else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n      final String collectionName = zkProps.getStr(NAME);\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(collectionName, zkProps, cores, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","pathOld":"/dev/null","sourceNew":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    SolrResponse response = null;\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    String asyncId = req.getParams().get(ASYNC);\n    if (props != null) {\n      if (asyncId != null) {\n        props.put(ASYNC, asyncId);\n      }\n      props.put(QUEUE_OPERATION, operation.action.toLower());\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      if (operation.sendToOCPQueue) {\n        response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n      }\n      else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n      final String collectionName = zkProps.getStr(NAME);\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(collectionName, zkProps, cores, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","sourceNew":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    if (props == null) {\n      return;\n    }\n\n    String asyncId = req.getParams().get(ASYNC);\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n\n    props.put(QUEUE_OPERATION, operation.action.toLower());\n\n    if (operation.sendToOCPQueue) {\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);\n      rsp.getValues().addAll(overseerResponse.getResponse());\n      Exception exp = overseerResponse.getException();\n      if (exp != null) {\n        rsp.setException(exp);\n      }\n\n      //TODO yuck; shouldn't create-collection at the overseer do this?  (conditionally perhaps)\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);\n        }\n      }\n\n    } else {\n      // submits and doesn't wait for anything (no response)\n      Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n    }\n\n  }\n\n","sourceOld":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    SolrResponse response = null;\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    String asyncId = req.getParams().get(ASYNC);\n    if (props != null) {\n      if (asyncId != null) {\n        props.put(ASYNC, asyncId);\n      }\n      props.put(QUEUE_OPERATION, operation.action.toLower());\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      if (operation.sendToOCPQueue) {\n        response = handleResponse(operation.action.toLower(), zkProps, rsp, operation.timeOut);\n      }\n      else Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n      final String collectionName = zkProps.getStr(NAME);\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(collectionName, zkProps, cores, response);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","sourceNew":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    if (props == null) {\n      return;\n    }\n\n    String asyncId = req.getParams().get(ASYNC);\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n\n    props.put(QUEUE_OPERATION, operation.action.toLower());\n\n    if (operation.sendToOCPQueue) {\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);\n      rsp.getValues().addAll(overseerResponse.getResponse());\n      Exception exp = overseerResponse.getException();\n      if (exp != null) {\n        rsp.setException(exp);\n      }\n\n      //TODO yuck; shouldn't create-collection at the overseer do this?  (conditionally perhaps)\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);\n        }\n      }\n\n    } else {\n      // submits and doesn't wait for anything (no response)\n      coreContainer.getZkController().getOverseer().offerStateUpdate(Utils.toJSON(props));\n    }\n\n  }\n\n","sourceOld":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    if (props == null) {\n      return;\n    }\n\n    String asyncId = req.getParams().get(ASYNC);\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n\n    props.put(QUEUE_OPERATION, operation.action.toLower());\n\n    if (operation.sendToOCPQueue) {\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);\n      rsp.getValues().addAll(overseerResponse.getResponse());\n      Exception exp = overseerResponse.getException();\n      if (exp != null) {\n        rsp.setException(exp);\n      }\n\n      //TODO yuck; shouldn't create-collection at the overseer do this?  (conditionally perhaps)\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);\n        }\n      }\n\n    } else {\n      // submits and doesn't wait for anything (no response)\n      Overseer.getStateUpdateQueue(coreContainer.getZkController().getZkClient()).offer(Utils.toJSON(props));\n    }\n\n  }\n\n","bugFix":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#invokeAction(SolrQueryRequest,SolrQueryResponse,CoreContainer,CollectionAction,CollectionOperation).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    if (props == null) {\n      return;\n    }\n\n    String asyncId = req.getParams().get(ASYNC);\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n\n    props.put(QUEUE_OPERATION, operation.action.toLower());\n\n    if (operation.sendToOCPQueue) {\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);\n      rsp.getValues().addAll(overseerResponse.getResponse());\n      Exception exp = overseerResponse.getException();\n      if (exp != null) {\n        rsp.setException(exp);\n      }\n\n      //TODO yuck; shouldn't create-collection at the overseer do this?  (conditionally perhaps)\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);\n        }\n      }\n\n    } else {\n      // submits and doesn't wait for anything (no response)\n      coreContainer.getZkController().getOverseer().offerStateUpdate(Utils.toJSON(props));\n    }\n\n  }\n\n","sourceOld":"  void invokeAction(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer cores, CollectionAction action, CollectionOperation operation) throws Exception {\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(BAD_REQUEST,\n          \"Invalid request. collections can be accessed only in SolrCloud mode\");\n    }\n    Map<String, Object> props = operation.execute(req, rsp, this);\n    if (props == null) {\n      return;\n    }\n\n    String asyncId = req.getParams().get(ASYNC);\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n\n    props.put(QUEUE_OPERATION, operation.action.toLower());\n\n    if (operation.sendToOCPQueue) {\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      SolrResponse overseerResponse = sendToOCPQueue(zkProps, operation.timeOut);\n      rsp.getValues().addAll(overseerResponse.getResponse());\n      Exception exp = overseerResponse.getException();\n      if (exp != null) {\n        rsp.setException(exp);\n      }\n\n      //TODO yuck; shouldn't create-collection at the overseer do this?  (conditionally perhaps)\n      if (action.equals(CollectionAction.CREATE) && asyncId == null) {\n        if (rsp.getException() == null) {\n          waitForActiveCollection(zkProps.getStr(NAME), cores, overseerResponse);\n        }\n      }\n\n    } else {\n      // submits and doesn't wait for anything (no response)\n      coreContainer.getZkController().getOverseer().offerStateUpdate(Utils.toJSON(props));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"ba055e19afc289adcb5bedaf68513793a7254012":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ba055e19afc289adcb5bedaf68513793a7254012"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["3cbd743a4843f513f793670e3ab0e272bf824faf","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}