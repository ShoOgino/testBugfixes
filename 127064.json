{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}