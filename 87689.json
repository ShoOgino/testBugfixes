{"path":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","commits":[{"id":"6b084aac8181b28fb44fa34869a3137484ddde90","date":1428901096,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTimSorter#testWorstCaseStackSize().mjava","sourceNew":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    // but not so big we blow up available heap.\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomInts.randomIntBetween(random(), 140000000, 400000000);\n    } else {\n      length = RandomInts.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","sourceOld":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomInts.randomIntBetween(random(), 140000000, Integer.MAX_VALUE);\n    } else {\n      length = RandomInts.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","sourceNew":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    // but not so big we blow up available heap.\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomNumbers.randomIntBetween(random(), 140000000, 400000000);\n    } else {\n      length = RandomNumbers.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","sourceOld":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    // but not so big we blow up available heap.\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomInts.randomIntBetween(random(), 140000000, 400000000);\n    } else {\n      length = RandomInts.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTimSorterWorstCase#testWorstCaseStackSize().mjava","sourceNew":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    // but not so big we blow up available heap.\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomNumbers.randomIntBetween(random(), 140000000, 400000000);\n    } else {\n      length = RandomNumbers.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","sourceOld":"  public void testWorstCaseStackSize() {\n    // we need large arrays to be able to reproduce this bug\n    // but not so big we blow up available heap.\n    final int length;\n    if (TEST_NIGHTLY) {\n      length = RandomInts.randomIntBetween(random(), 140000000, 400000000);\n    } else {\n      length = RandomInts.randomIntBetween(random(), 140000000, 200000000);\n    }\n    final PackedInts.Mutable arr = generateWorstCaseArray(length);\n    new TimSorter(0) {\n\n      @Override\n      protected void swap(int i, int j) {\n        final long tmp = arr.get(i);\n        arr.set(i, arr.get(j));\n        arr.set(j, tmp);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Long.compare(arr.get(i), arr.get(j));\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void restore(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        arr.set(dest, arr.get(src));\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        throw new UnsupportedOperationException();\n      }\n    }.sort(0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b084aac8181b28fb44fa34869a3137484ddde90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6448f67be45147de82a85cd903fec34e8930da75":["6b084aac8181b28fb44fa34869a3137484ddde90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6b084aac8181b28fb44fa34869a3137484ddde90","6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6448f67be45147de82a85cd903fec34e8930da75"]},"commit2Childs":{"6b084aac8181b28fb44fa34869a3137484ddde90":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b084aac8181b28fb44fa34869a3137484ddde90"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}