{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","sourceNew":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","sourceNew":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      @Override\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","sourceNew":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      @Override\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e33d2d3ce83ad0c915dd37e097059dd85ff99126","date":1435853931,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectAsString(boolean).mjava","sourceNew":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith((attClass, key, value) -> {\n      if (buffer.length() > 0) {\n        buffer.append(',');\n      }\n      if (prependAttClass) {\n        buffer.append(attClass.getName()).append('#');\n      }\n      buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n    });\n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * This method returns the current attribute values as a string in the following format\n   * by calling the {@link #reflectWith(AttributeReflector)} method:\n   * \n   * <ul>\n   * <li><em>iff {@code prependAttClass=true}:</em> {@code \"AttributeClass#key=value,AttributeClass#key=value\"}\n   * <li><em>iff {@code prependAttClass=false}:</em> {@code \"key=value,key=value\"}\n   * </ul>\n   *\n   * @see #reflectWith(AttributeReflector)\n   */\n  public final String reflectAsString(final boolean prependAttClass) {\n    final StringBuilder buffer = new StringBuilder();\n    reflectWith(new AttributeReflector() {\n      @Override\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        if (buffer.length() > 0) {\n          buffer.append(',');\n        }\n        if (prependAttClass) {\n          buffer.append(attClass.getName()).append('#');\n        }\n        buffer.append(key).append('=').append((value == null) ? \"null\" : value);\n      }\n    });\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e33d2d3ce83ad0c915dd37e097059dd85ff99126"],"e33d2d3ce83ad0c915dd37e097059dd85ff99126":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e33d2d3ce83ad0c915dd37e097059dd85ff99126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e33d2d3ce83ad0c915dd37e097059dd85ff99126":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}