{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"/dev/null","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType cannot be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.dimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDimensionalValue(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType cannot be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType cannot be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.dimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDimensionalValue(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType cannot be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83","date":1478775068,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsWriter.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      \n      // if the field omits norms, the boost cannot be indexed.\n      if (fieldType.omitNorms() && field.boost() != 1.0f) {\n        throw new UnsupportedOperationException(\"You cannot set an index-time boost: norms are omitted for field '\" + field.name() + \"'\");\n      }\n      \n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException, AbortingException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          throw AbortingException.wrap(th);\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDataDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDataDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(int,IndexableField,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#processField(IndexableField,long,int).mjava","sourceNew":"  private int processField(int docID, IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(docID, field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(docID, fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(docID, fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","sourceOld":"  private int processField(IndexableField field, long fieldGen, int fieldCount) throws IOException {\n    String fieldName = field.name();\n    IndexableFieldType fieldType = field.fieldType();\n\n    PerField fp = null;\n\n    if (fieldType.indexOptions() == null) {\n      throw new NullPointerException(\"IndexOptions must not be null (field: \\\"\" + field.name() + \"\\\")\");\n    }\n\n    // Invert indexed fields:\n    if (fieldType.indexOptions() != IndexOptions.NONE) {\n      fp = getOrAddField(fieldName, fieldType, true);\n      boolean first = fp.fieldGen != fieldGen;\n      fp.invert(field, first);\n\n      if (first) {\n        fields[fieldCount++] = fp;\n        fp.fieldGen = fieldGen;\n      }\n    } else {\n      verifyUnIndexedFieldType(fieldName, fieldType);\n    }\n\n    // Add stored fields:\n    if (fieldType.stored()) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      if (fieldType.stored()) {\n        String value = field.stringValue();\n        if (value != null && value.length() > IndexWriter.MAX_STORED_STRING_LENGTH) {\n          throw new IllegalArgumentException(\"stored field \\\"\" + field.name() + \"\\\" is too large (\" + value.length() + \" characters) to store\");\n        }\n        try {\n          storedFieldsConsumer.writeField(fp.fieldInfo, field);\n        } catch (Throwable th) {\n          docWriter.onAbortingException(th);\n          throw th;\n        }\n      }\n    }\n\n    DocValuesType dvType = fieldType.docValuesType();\n    if (dvType == null) {\n      throw new NullPointerException(\"docValuesType must not be null (field: \\\"\" + fieldName + \"\\\")\");\n    }\n    if (dvType != DocValuesType.NONE) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexDocValue(fp, dvType, field);\n    }\n    if (fieldType.pointDimensionCount() != 0) {\n      if (fp == null) {\n        fp = getOrAddField(fieldName, fieldType, false);\n      }\n      indexPoint(fp, field);\n    }\n    \n    return fieldCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"acd9883560fd89e6448b2b447302fe543040cd4f":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["f6652c943595e92c187ee904c382863013eae28f"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"acd9883560fd89e6448b2b447302fe543040cd4f":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","acd9883560fd89e6448b2b447302fe543040cd4f"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}