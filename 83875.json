{"path":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e72e661a57246fd5412d682d707d9dbdf81e555","date":1343303474,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(file, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(file, null, null, true);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = configSetZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = configSetZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = configSetZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new IOException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484264228e1de4c93d0f9ec7ad2181223b11889a","date":1460910418,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        // Retry in case of session expiry\n        try {\n          Thread.sleep(1000);\n          log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new IOException(\"Could not load resource=\" + resource, ie);\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = configSetZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","97b694616343b3c147c2767f4884dc7a2314a176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        // Retry in case of session expiry\n        try {\n          Thread.sleep(1000);\n          log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new IOException(\"Could not load resource=\" + resource, ie);\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is = null;\n    String file = configSetZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        Stat stat = new Stat();\n        byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n        return new ZkByteArrayInputStream(bytes, stat);\n      }\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97b694616343b3c147c2767f4884dc7a2314a176","date":1468202710,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        // Retry in case of session expiry\n        try {\n          Thread.sleep(1000);\n          log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new IOException(\"Could not load resource=\" + resource, ie);\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":["484264228e1de4c93d0f9ec7ad2181223b11889a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        // Retry in case of session expiry\n        try {\n          Thread.sleep(1000);\n          log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new IOException(\"Could not load resource=\" + resource, ie);\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":["484264228e1de4c93d0f9ec7ad2181223b11889a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (KeeperException e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = (\".\".equals(resource)) ? configSetZkPath : configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = (\".\".equals(resource)) ? configSetZkPath : configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = (\".\".equals(resource)) ? configSetZkPath : configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource={}\", resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is;\n    String file = (\".\".equals(resource)) ? configSetZkPath : configSetZkPath + \"/\" + resource;\n    int maxTries = 10;\n    Exception exception = null;\n    while (maxTries -- > 0) {\n      try {\n        if (zkController.pathExists(file)) {\n          Stat stat = new Stat();\n          byte[] bytes = zkController.getZkClient().getData(file, null, stat, true);\n          return new ZkByteArrayInputStream(bytes, stat);\n        } else {\n          //Path does not exists. We only retry for session expired exceptions.\n          break;\n        }\n      } catch (KeeperException.SessionExpiredException e) {\n        exception = e;\n        if (!zkController.getCoreContainer().isShutDown()) {\n          // Retry in case of session expiry\n          try {\n            Thread.sleep(1000);\n            log.debug(\"Sleeping for 1s before retrying fetching resource=\" + resource);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Could not load resource=\" + resource, ie);\n          }\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new IOException(\"Error opening \" + file, e);\n      } catch (Exception e) {\n        throw new IOException(\"Error opening \" + file, e);\n      }\n    }\n\n    if (exception != null) {\n      throw new IOException(\"We re-tried 10 times but was still unable to fetch resource=\" + resource + \" from ZK\", exception);\n    }\n\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + configSetZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"97b694616343b3c147c2767f4884dc7a2314a176":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ad4957cde742defe6db19689abdc267c5d948066":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["6e72e661a57246fd5412d682d707d9dbdf81e555"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["6466e433d7f5218e77c8115ed28176855fc3c143","484264228e1de4c93d0f9ec7ad2181223b11889a"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["6466e433d7f5218e77c8115ed28176855fc3c143"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8cb57c50beb99a1245256e866350af8e5ea1f36","97b694616343b3c147c2767f4884dc7a2314a176"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["97b694616343b3c147c2767f4884dc7a2314a176"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6e72e661a57246fd5412d682d707d9dbdf81e555"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6e72e661a57246fd5412d682d707d9dbdf81e555"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3732e34f27916e98704736cc6924a34fffca249a":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["f8cb57c50beb99a1245256e866350af8e5ea1f36","484264228e1de4c93d0f9ec7ad2181223b11889a"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["6466e433d7f5218e77c8115ed28176855fc3c143"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"97b694616343b3c147c2767f4884dc7a2314a176":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["97b694616343b3c147c2767f4884dc7a2314a176","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["ad4957cde742defe6db19689abdc267c5d948066"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["917e62f3497c83634a13edd833e8e21dd6cc6496","9856095f7afb5a607bf5e65077615ed91273508c","3732e34f27916e98704736cc6924a34fffca249a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["824d674c7c80eeddb2c2e429f92d3b15688d8393","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","6e72e661a57246fd5412d682d707d9dbdf81e555","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3732e34f27916e98704736cc6924a34fffca249a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","9856095f7afb5a607bf5e65077615ed91273508c","a258fbb26824fd104ed795e5d9033d2d040049ee","3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}