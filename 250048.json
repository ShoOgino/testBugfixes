{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,CloudConfig,DocCollection).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,CloudConfig,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, CloudConfig cloudConfig, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,CloudConfig,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, CloudConfig cloudConfig, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}