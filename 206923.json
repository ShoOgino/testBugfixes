{"path":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","commits":[{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"/dev/null","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["3c09067bd60a59f680992d62794689898c0148ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09067bd60a59f680992d62794689898c0148ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}