{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","commits":[{"id":"175e4d353e3036fad2ad89ae6815c4418b4c3c8e","date":1378375735,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[]).mjava","sourceNew":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return Arrays.copyOf(compressed, compressedLen);\n  }\n\n","sourceOld":"  static byte[] compress(Compressor compressor, byte[] decompressed) throws IOException {\n    byte[] compressed = new byte[decompressed.length * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, 0, decompressed.length, out);\n    final int compressedLen = out.getPosition();\n    return Arrays.copyOf(compressed, compressedLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","sourceNew":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return ArrayUtil.copyOfSubArray(compressed, 0, compressedLen);\n  }\n\n","sourceOld":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return Arrays.copyOf(compressed, compressedLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","sourceNew":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return ArrayUtil.copyOfSubArray(compressed, 0, compressedLen);\n  }\n\n","sourceOld":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return Arrays.copyOf(compressed, compressedLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#compress(Compressor,byte[],int,int).mjava","sourceNew":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return ArrayUtil.copyOfSubArray(compressed, 0, compressedLen);\n  }\n\n","sourceOld":"  static byte[] compress(Compressor compressor, byte[] decompressed, int off, int len) throws IOException {\n    byte[] compressed = new byte[len * 2 + 16]; // should be enough\n    ByteArrayDataOutput out = new ByteArrayDataOutput(compressed);\n    compressor.compress(decompressed, off, len, out);\n    final int compressedLen = out.getPosition();\n    return Arrays.copyOf(compressed, compressedLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}