{"path":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","commits":[{"id":"f9a06d6dd4713420efafb5bd917f8bd789482920","date":1181839199,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"src/java/org/apache/solr/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42bb474a1fcf8ffb51a17e18ab082d5c375298f3","date":1182398886,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["42bb474a1fcf8ffb51a17e18ab082d5c375298f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"42bb474a1fcf8ffb51a17e18ab082d5c375298f3":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"42bb474a1fcf8ffb51a17e18ab082d5c375298f3":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["42bb474a1fcf8ffb51a17e18ab082d5c375298f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}