{"path":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testEstimator().mjava","commits":[{"id":"e4583dbd381e291c87e23144564c59ba3391b188","date":1560187306,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testEstimator().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEstimator() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String randomCoreName = jetty.getCoreContainer().getAllCoreNames().iterator().next();\n    SolrCore core = jetty.getCoreContainer().getCore(randomCoreName);\n    RefCounted<SolrIndexSearcher> searcherRef = core.getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      // limit the max length\n      IndexSizeEstimator estimator = new IndexSizeEstimator(searcher.getRawReader(), 20, 50, true, true);\n      IndexSizeEstimator.Estimate estimate = estimator.estimate();\n      Map<String, Long> fieldsBySize = estimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", fieldsBySize.isEmpty());\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fieldsBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Long> typesBySize = estimate.getTypesBySize();\n      assertFalse(\"empty typesBySize\", typesBySize.isEmpty());\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      typesBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Object> summary = estimate.getSummary();\n      assertNotNull(\"summary\", summary);\n      assertFalse(\"empty summary\", summary.isEmpty());\n      assertEquals(summary.keySet().toString(), fields.size(), summary.keySet().size());\n      Map<String, Object> details = estimate.getDetails();\n      assertNotNull(\"details\", details);\n      assertFalse(\"empty details\", details.isEmpty());\n      // by type\n      assertEquals(details.keySet().toString(), 6, details.keySet().size());\n\n      // check sampling\n      estimator.setSamplingThreshold(searcher.getRawReader().maxDoc() / 2);\n      IndexSizeEstimator.Estimate sampledEstimate = estimator.estimate();\n      Map<String, Long> sampledFieldsBySize = sampledEstimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", sampledFieldsBySize.isEmpty());\n      // verify that the sampled values are within 50% of the original values\n      fieldsBySize.forEach((field, size) -> {\n        Long sampledSize = sampledFieldsBySize.get(field);\n        assertNotNull(\"sampled size for \" + field + \" is missing in \" + sampledFieldsBySize, sampledSize);\n        double delta = (double) size * 0.5;\n        assertEquals(\"sampled size of \" + field + \" is wildly off\", (double)size, (double)sampledSize, delta);\n      });\n    } finally {\n      searcherRef.decref();\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"075663bea52d53cdf366b77f927d2806ff3178f2","date":1565798233,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testEstimator().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testEstimator().mjava","sourceNew":"  @Test\n  public void testEstimator() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String randomCoreName = jetty.getCoreContainer().getAllCoreNames().iterator().next();\n    SolrCore core = jetty.getCoreContainer().getCore(randomCoreName);\n    RefCounted<SolrIndexSearcher> searcherRef = core.getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      // limit the max length\n      IndexSizeEstimator estimator = new IndexSizeEstimator(searcher.getRawReader(), 20, 50, true, true);\n      IndexSizeEstimator.Estimate estimate = estimator.estimate();\n      Map<String, Long> fieldsBySize = estimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", fieldsBySize.isEmpty());\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fieldsBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Long> typesBySize = estimate.getTypesBySize();\n      assertFalse(\"empty typesBySize\", typesBySize.isEmpty());\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      typesBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Object> summary = estimate.getSummary();\n      assertNotNull(\"summary\", summary);\n      assertFalse(\"empty summary\", summary.isEmpty());\n      assertEquals(summary.keySet().toString(), fields.size(), summary.keySet().size());\n      Map<String, Object> details = estimate.getDetails();\n      assertNotNull(\"details\", details);\n      assertFalse(\"empty details\", details.isEmpty());\n      // by type\n      assertEquals(details.keySet().toString(), 6, details.keySet().size());\n\n      // check sampling\n      estimator.setSamplingThreshold(searcher.getRawReader().maxDoc() / 2);\n      IndexSizeEstimator.Estimate sampledEstimate = estimator.estimate();\n      Map<String, Long> sampledFieldsBySize = sampledEstimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", sampledFieldsBySize.isEmpty());\n      // verify that the sampled values are within 50% of the original values\n      fieldsBySize.forEach((field, size) -> {\n        Long sampledSize = sampledFieldsBySize.get(field);\n        assertNotNull(\"sampled size for \" + field + \" is missing in \" + sampledFieldsBySize, sampledSize);\n        double delta = (double) size * 0.5;\n        assertEquals(\"sampled size of \" + field + \" is wildly off\", (double)size, (double)sampledSize, delta);\n      });\n      // verify the reader is still usable - SOLR-13694\n      IndexReader reader = searcher.getRawReader();\n      for (LeafReaderContext context : reader.leaves()) {\n        LeafReader leafReader = context.reader();\n        assertTrue(\"unexpected LeafReader class: \" + leafReader.getClass().getName(), leafReader instanceof CodecReader);\n        Bits liveDocs = leafReader.getLiveDocs();\n        CodecReader codecReader = (CodecReader) leafReader;\n        StoredFieldsReader storedFieldsReader = codecReader.getFieldsReader();\n        StoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n        assertNotNull(storedFieldsReader);\n        for (int docId = 0; docId < leafReader.maxDoc(); docId++) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          storedFieldsReader.visitDocument(docId, visitor);\n        }\n      }\n    } finally {\n      searcherRef.decref();\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEstimator() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String randomCoreName = jetty.getCoreContainer().getAllCoreNames().iterator().next();\n    SolrCore core = jetty.getCoreContainer().getCore(randomCoreName);\n    RefCounted<SolrIndexSearcher> searcherRef = core.getSearcher();\n    try {\n      SolrIndexSearcher searcher = searcherRef.get();\n      // limit the max length\n      IndexSizeEstimator estimator = new IndexSizeEstimator(searcher.getRawReader(), 20, 50, true, true);\n      IndexSizeEstimator.Estimate estimate = estimator.estimate();\n      Map<String, Long> fieldsBySize = estimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", fieldsBySize.isEmpty());\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fieldsBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Long> typesBySize = estimate.getTypesBySize();\n      assertFalse(\"empty typesBySize\", typesBySize.isEmpty());\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      typesBySize.forEach((k, v) -> assertTrue(\"unexpected size of \" + k + \": \" + v, v > 0));\n      Map<String, Object> summary = estimate.getSummary();\n      assertNotNull(\"summary\", summary);\n      assertFalse(\"empty summary\", summary.isEmpty());\n      assertEquals(summary.keySet().toString(), fields.size(), summary.keySet().size());\n      Map<String, Object> details = estimate.getDetails();\n      assertNotNull(\"details\", details);\n      assertFalse(\"empty details\", details.isEmpty());\n      // by type\n      assertEquals(details.keySet().toString(), 6, details.keySet().size());\n\n      // check sampling\n      estimator.setSamplingThreshold(searcher.getRawReader().maxDoc() / 2);\n      IndexSizeEstimator.Estimate sampledEstimate = estimator.estimate();\n      Map<String, Long> sampledFieldsBySize = sampledEstimate.getFieldsBySize();\n      assertFalse(\"empty fieldsBySize\", sampledFieldsBySize.isEmpty());\n      // verify that the sampled values are within 50% of the original values\n      fieldsBySize.forEach((field, size) -> {\n        Long sampledSize = sampledFieldsBySize.get(field);\n        assertNotNull(\"sampled size for \" + field + \" is missing in \" + sampledFieldsBySize, sampledSize);\n        double delta = (double) size * 0.5;\n        assertEquals(\"sampled size of \" + field + \" is wildly off\", (double)size, (double)sampledSize, delta);\n      });\n    } finally {\n      searcherRef.decref();\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"075663bea52d53cdf366b77f927d2806ff3178f2":["e4583dbd381e291c87e23144564c59ba3391b188"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4583dbd381e291c87e23144564c59ba3391b188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["075663bea52d53cdf366b77f927d2806ff3178f2"]},"commit2Childs":{"075663bea52d53cdf366b77f927d2806ff3178f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583dbd381e291c87e23144564c59ba3391b188"],"e4583dbd381e291c87e23144564c59ba3391b188":["075663bea52d53cdf366b77f927d2806ff3178f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}