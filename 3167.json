{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","commits":[{"id":"c84219732de95c058a8de66ece93c70ad1b1051c","date":1492441745,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(eval(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07fea5b5bf158068276d360734dfc547c12af28e","date":1492563396,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","sourceNew":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(calc(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","sourceOld":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(eval(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(calc(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvertEvaluator().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvertEvaluator().mjava","sourceNew":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(calc(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","sourceOld":"  @Test\n  public void testConvertEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"miles_i\", \"50\");\n    updateRequest.add(id, \"2\", \"miles_i\", \"70\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    //Test annotating tuple\n    String expr = \"select(calc(), convert(miles, kilometers, 10) as kilometers)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(10*1.61));\n\n\n    expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"miles_i asc\\\", select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", partitionKeys=miles_i, sort=\\\"miles_i asc\\\", fl=\\\"miles_i\\\"), convert(miles, kilometers, miles_i) as kilometers))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(50*1.61));\n    d = (double)tuples.get(1).get(\"kilometers\");\n    assertTrue(d == (double)(70*1.61));\n\n    expr = \"select(stats(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    d = (double)tuples.get(0).get(\"kilometers\");\n    assertTrue(d == (double)(120*1.61));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c84219732de95c058a8de66ece93c70ad1b1051c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07fea5b5bf158068276d360734dfc547c12af28e":["c84219732de95c058a8de66ece93c70ad1b1051c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["07fea5b5bf158068276d360734dfc547c12af28e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c84219732de95c058a8de66ece93c70ad1b1051c":["07fea5b5bf158068276d360734dfc547c12af28e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c84219732de95c058a8de66ece93c70ad1b1051c"],"07fea5b5bf158068276d360734dfc547c12af28e":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}