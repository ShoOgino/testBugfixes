{"path":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","commits":[{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["286e1dbf267cac3961c3fc116b9069797ad7d1c2","286e1dbf267cac3961c3fc116b9069797ad7d1c2","286e1dbf267cac3961c3fc116b9069797ad7d1c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandField#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n\n        // To keep the response format compatable with trunk.\n        // In trunk MutableValue can convert an indexed value to its native type. E.g. string to int\n        // The only option I currently see is the use the FieldType for this\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"c26f00b574427b55127e869b935845554afde1fa":["9c7cdfe5a1ea9db97faa404b251fa644faa73597","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7edfc3f7caa7b49a18fe367692768b33b018e9db","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}