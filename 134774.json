{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#Lucene50ScoreSkipReader(int,IndexInput,int,boolean,boolean,boolean).mjava","commits":[{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#Lucene50ScoreSkipReader(int,IndexInput,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Lucene50ScoreSkipReader(int version, IndexInput skipStream, int maxSkipLevels,\n      boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(version, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);\n    if (version < Lucene50PostingsFormat.VERSION_IMPACT_SKIP_DATA) {\n      throw new IllegalStateException(\"Cannot skip based on scores if impacts are not indexed\");\n    }\n    this.impactData = new byte[maxSkipLevels][];\n    Arrays.fill(impactData, new byte[0]);\n    this.impactDataLength = new int[maxSkipLevels];\n    this.perLevelImpacts = new MutableImpactList[maxSkipLevels];\n    for (int i = 0; i < perLevelImpacts.length; ++i) {\n      perLevelImpacts[i] = new MutableImpactList();\n    }\n    impacts = new Impacts() {\n\n      @Override\n      public int numLevels() {\n        return numLevels;\n      }\n\n      @Override\n      public int getDocIdUpTo(int level) {\n        return skipDoc[level];\n      }\n\n      @Override\n      public List<Impact> getImpacts(int level) {\n        assert level < numLevels;\n        if (impactDataLength[level] > 0) {\n          badi.reset(impactData[level], 0, impactDataLength[level]);\n          perLevelImpacts[level] = readImpacts(badi, perLevelImpacts[level]);\n          impactDataLength[level] = 0;\n        }\n        return perLevelImpacts[level];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#Lucene50ScoreSkipReader(int,IndexInput,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#Lucene50ScoreSkipReader(int,IndexInput,int,boolean,boolean,boolean).mjava","sourceNew":"  public Lucene50ScoreSkipReader(int version, IndexInput skipStream, int maxSkipLevels,\n      boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(version, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);\n    if (version < Lucene50PostingsFormat.VERSION_IMPACT_SKIP_DATA) {\n      throw new IllegalStateException(\"Cannot skip based on scores if impacts are not indexed\");\n    }\n    this.impactData = new byte[maxSkipLevels][];\n    Arrays.fill(impactData, new byte[0]);\n    this.impactDataLength = new int[maxSkipLevels];\n    this.perLevelImpacts = new MutableImpactList[maxSkipLevels];\n    for (int i = 0; i < perLevelImpacts.length; ++i) {\n      perLevelImpacts[i] = new MutableImpactList();\n    }\n    impacts = new Impacts() {\n\n      @Override\n      public int numLevels() {\n        return numLevels;\n      }\n\n      @Override\n      public int getDocIdUpTo(int level) {\n        return skipDoc[level];\n      }\n\n      @Override\n      public List<Impact> getImpacts(int level) {\n        assert level < numLevels;\n        if (impactDataLength[level] > 0) {\n          badi.reset(impactData[level], 0, impactDataLength[level]);\n          perLevelImpacts[level] = readImpacts(badi, perLevelImpacts[level]);\n          impactDataLength[level] = 0;\n        }\n        return perLevelImpacts[level];\n      }\n    };\n  }\n\n","sourceOld":"  public Lucene50ScoreSkipReader(int version, IndexInput skipStream, int maxSkipLevels,\n      boolean hasPos, boolean hasOffsets, boolean hasPayloads) {\n    super(version, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);\n    if (version < Lucene50PostingsFormat.VERSION_IMPACT_SKIP_DATA) {\n      throw new IllegalStateException(\"Cannot skip based on scores if impacts are not indexed\");\n    }\n    this.impactData = new byte[maxSkipLevels][];\n    Arrays.fill(impactData, new byte[0]);\n    this.impactDataLength = new int[maxSkipLevels];\n    this.perLevelImpacts = new MutableImpactList[maxSkipLevels];\n    for (int i = 0; i < perLevelImpacts.length; ++i) {\n      perLevelImpacts[i] = new MutableImpactList();\n    }\n    impacts = new Impacts() {\n\n      @Override\n      public int numLevels() {\n        return numLevels;\n      }\n\n      @Override\n      public int getDocIdUpTo(int level) {\n        return skipDoc[level];\n      }\n\n      @Override\n      public List<Impact> getImpacts(int level) {\n        assert level < numLevels;\n        if (impactDataLength[level] > 0) {\n          badi.reset(impactData[level], 0, impactDataLength[level]);\n          perLevelImpacts[level] = readImpacts(badi, perLevelImpacts[level]);\n          impactDataLength[level] = 0;\n        }\n        return perLevelImpacts[level];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}