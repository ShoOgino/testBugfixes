{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public ModelWeight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n    final Collection<Feature> modelFeatures = ltrScoringModel.getFeatures();\n    final Collection<Feature> allFeatures = ltrScoringModel.getAllFeatures();\n    int modelFeatSize = modelFeatures.size();\n\n    Collection<Feature> features = null;\n    if (this.extractAllFeatures) {\n      features = allFeatures;\n    }\n    else{\n      features =  modelFeatures;\n    }\n    final Feature.FeatureWeight[] extractedFeatureWeights = new Feature.FeatureWeight[features.size()];\n    final Feature.FeatureWeight[] modelFeaturesWeights = new Feature.FeatureWeight[modelFeatSize];\n    List<Feature.FeatureWeight > featureWeights = new ArrayList<>(features.size());\n\n    if (querySemaphore == null) {\n      createWeights(searcher, scoreMode.needsScores(), featureWeights, features);\n    }\n    else{\n      createWeightsParallel(searcher, scoreMode.needsScores(), featureWeights, features);\n    }\n    int i=0, j = 0;\n    if (this.extractAllFeatures) {\n      for (final Feature.FeatureWeight fw : featureWeights) {\n        extractedFeatureWeights[i++] = fw;\n      }\n      for (final Feature f : modelFeatures){\n        modelFeaturesWeights[j++] = extractedFeatureWeights[f.getIndex()]; // we can lookup by featureid because all features will be extracted when this.extractAllFeatures is set\n      }\n    }\n    else{\n      for (final Feature.FeatureWeight fw: featureWeights){\n        extractedFeatureWeights[i++] = fw;\n        modelFeaturesWeights[j++] = fw;\n      }\n    }\n    return new ModelWeight(modelFeaturesWeights, extractedFeatureWeights, allFeatures.size());\n  }\n\n","sourceOld":"  @Override\n  public ModelWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n    final Collection<Feature> modelFeatures = ltrScoringModel.getFeatures();\n    final Collection<Feature> allFeatures = ltrScoringModel.getAllFeatures();\n    int modelFeatSize = modelFeatures.size();\n\n    Collection<Feature> features = null;\n    if (this.extractAllFeatures) {\n      features = allFeatures;\n    }\n    else{\n      features =  modelFeatures;\n    }\n    final Feature.FeatureWeight[] extractedFeatureWeights = new Feature.FeatureWeight[features.size()];\n    final Feature.FeatureWeight[] modelFeaturesWeights = new Feature.FeatureWeight[modelFeatSize];\n    List<Feature.FeatureWeight > featureWeights = new ArrayList<>(features.size());\n\n    if (querySemaphore == null) {\n      createWeights(searcher, needsScores, featureWeights, features);\n    }\n    else{\n      createWeightsParallel(searcher, needsScores, featureWeights, features);\n    }\n    int i=0, j = 0;\n    if (this.extractAllFeatures) {\n      for (final Feature.FeatureWeight fw : featureWeights) {\n        extractedFeatureWeights[i++] = fw;\n      }\n      for (final Feature f : modelFeatures){\n        modelFeaturesWeights[j++] = extractedFeatureWeights[f.getIndex()]; // we can lookup by featureid because all features will be extracted when this.extractAllFeatures is set\n      }\n    }\n    else{\n      for (final Feature.FeatureWeight fw: featureWeights){\n        extractedFeatureWeights[i++] = fw;\n        modelFeaturesWeights[j++] = fw;\n      }\n    }\n    return new ModelWeight(modelFeaturesWeights, extractedFeatureWeights, allFeatures.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public ModelWeight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n    final Collection<Feature> modelFeatures = ltrScoringModel.getFeatures();\n    final Collection<Feature> allFeatures = ltrScoringModel.getAllFeatures();\n    int modelFeatSize = modelFeatures.size();\n\n    Collection<Feature> features = null;\n    if (this.extractAllFeatures) {\n      features = allFeatures;\n    }\n    else{\n      features =  modelFeatures;\n    }\n    final Feature.FeatureWeight[] extractedFeatureWeights = new Feature.FeatureWeight[features.size()];\n    final Feature.FeatureWeight[] modelFeaturesWeights = new Feature.FeatureWeight[modelFeatSize];\n    List<Feature.FeatureWeight > featureWeights = new ArrayList<>(features.size());\n\n    if (querySemaphore == null) {\n      createWeights(searcher, scoreMode.needsScores(), featureWeights, features);\n    }\n    else{\n      createWeightsParallel(searcher, scoreMode.needsScores(), featureWeights, features);\n    }\n    int i=0, j = 0;\n    if (this.extractAllFeatures) {\n      for (final Feature.FeatureWeight fw : featureWeights) {\n        extractedFeatureWeights[i++] = fw;\n      }\n      for (final Feature f : modelFeatures){\n        modelFeaturesWeights[j++] = extractedFeatureWeights[f.getIndex()]; // we can lookup by featureid because all features will be extracted when this.extractAllFeatures is set\n      }\n    }\n    else{\n      for (final Feature.FeatureWeight fw: featureWeights){\n        extractedFeatureWeights[i++] = fw;\n        modelFeaturesWeights[j++] = fw;\n      }\n    }\n    return new ModelWeight(modelFeaturesWeights, extractedFeatureWeights, allFeatures.size());\n  }\n\n","sourceOld":"  @Override\n  public ModelWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n    final Collection<Feature> modelFeatures = ltrScoringModel.getFeatures();\n    final Collection<Feature> allFeatures = ltrScoringModel.getAllFeatures();\n    int modelFeatSize = modelFeatures.size();\n\n    Collection<Feature> features = null;\n    if (this.extractAllFeatures) {\n      features = allFeatures;\n    }\n    else{\n      features =  modelFeatures;\n    }\n    final Feature.FeatureWeight[] extractedFeatureWeights = new Feature.FeatureWeight[features.size()];\n    final Feature.FeatureWeight[] modelFeaturesWeights = new Feature.FeatureWeight[modelFeatSize];\n    List<Feature.FeatureWeight > featureWeights = new ArrayList<>(features.size());\n\n    if (querySemaphore == null) {\n      createWeights(searcher, needsScores, featureWeights, features);\n    }\n    else{\n      createWeightsParallel(searcher, needsScores, featureWeights, features);\n    }\n    int i=0, j = 0;\n    if (this.extractAllFeatures) {\n      for (final Feature.FeatureWeight fw : featureWeights) {\n        extractedFeatureWeights[i++] = fw;\n      }\n      for (final Feature f : modelFeatures){\n        modelFeaturesWeights[j++] = extractedFeatureWeights[f.getIndex()]; // we can lookup by featureid because all features will be extracted when this.extractAllFeatures is set\n      }\n    }\n    else{\n      for (final Feature.FeatureWeight fw: featureWeights){\n        extractedFeatureWeights[i++] = fw;\n        modelFeaturesWeights[j++] = fw;\n      }\n    }\n    return new ModelWeight(modelFeaturesWeights, extractedFeatureWeights, allFeatures.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}