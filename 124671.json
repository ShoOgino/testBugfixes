{"path":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!sfilt fl=\" +fieldName +\"}\",\n            \"pt\", pt, \"d\", String.valueOf(distance)),\n            tests);//\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!sfilt fl=\" +fieldName +\"}\",\n            \"pt\", pt, \"d\", String.valueOf(distance)),\n            tests);//\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!sfilt fl=\" +fieldName +\"}\",\n            \"pt\", pt, \"d\", String.valueOf(distance)),\n            tests);//\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!sfilt fl=\" +fieldName +\"}\",\n            \"pt\", pt, \"d\", String.valueOf(distance)),\n            tests);//\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, String pt, double distance, int count, int ... docIds) {\n    checkHits(fieldName, true, pt, distance, count, docIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"c26f00b574427b55127e869b935845554afde1fa":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}