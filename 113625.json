{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicContains().mjava","commits":[{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicContains().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicContains() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    double[] polyLats = new double[] {-10, -10, 10, 10, -10};\n    double[] polyLons = new double[] {-10, 10, 10, -10, -10};\n    Polygon p = new Polygon(polyLats, polyLons);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search a Polygon\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    polyLats = new double[] {-5, -5, 5, 5, -5};\n    polyLons = new double[] {-5, 5, 5, -5, -5};\n    Polygon query =  new Polygon(polyLats, polyLons);\n    Query q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.CONTAINS, query);\n    assertEquals(1, searcher.count(q));\n\n    // search a bounding box\n    searcher = newSearcher(reader);\n    q = new LatLonShapeBoundingBoxQuery(FIELDNAME, QueryRelation.CONTAINS,0, 0, 0, 0);\n    assertEquals(1, searcher.count(q));\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicContains().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicContains() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    double[] polyLats = new double[] {-10, -10, 10, 10, -10};\n    double[] polyLons = new double[] {-10, 10, 10, -10, -10};\n    Polygon p = new Polygon(polyLats, polyLons);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search a Polygon\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    polyLats = new double[] {-5, -5, 5, 5, -5};\n    polyLons = new double[] {-5, 5, 5, -5, -5};\n    Polygon query =  new Polygon(polyLats, polyLons);\n    Query q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.CONTAINS, query);\n    assertEquals(1, searcher.count(q));\n\n    // search a bounding box\n    searcher = newSearcher(reader);\n    q = new LatLonShapeBoundingBoxQuery(FIELDNAME, QueryRelation.CONTAINS,0, 0, 0, 0);\n    assertEquals(1, searcher.count(q));\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testBasicContains().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicContains().mjava","sourceNew":"  public void testBasicContains() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    double[] polyLats = new double[] {-10, -10, 10, 10, -10};\n    double[] polyLons = new double[] {-10, 10, 10, -10, -10};\n    Polygon p = new Polygon(polyLats, polyLons);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search a Polygon\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    polyLats = new double[] {-5, -5, 5, 5, -5};\n    polyLons = new double[] {-5, 5, 5, -5, -5};\n    Polygon query =  new Polygon(polyLats, polyLons);\n    Query q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.CONTAINS, query);\n    assertEquals(1, searcher.count(q));\n\n    // search a bounding box\n    searcher = newSearcher(reader);\n    q = new LatLonShapeBoundingBoxQuery(FIELDNAME, QueryRelation.CONTAINS,0, 0, 0, 0);\n    assertEquals(1, searcher.count(q));\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testBasicContains() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    double[] polyLats = new double[] {-10, -10, 10, 10, -10};\n    double[] polyLons = new double[] {-10, 10, 10, -10, -10};\n    Polygon p = new Polygon(polyLats, polyLons);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search a Polygon\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    polyLats = new double[] {-5, -5, 5, 5, -5};\n    polyLons = new double[] {-5, 5, 5, -5, -5};\n    Polygon query =  new Polygon(polyLats, polyLons);\n    Query q = LatLonShape.newPolygonQuery(FIELDNAME, QueryRelation.CONTAINS, query);\n    assertEquals(1, searcher.count(q));\n\n    // search a bounding box\n    searcher = newSearcher(reader);\n    q = new LatLonShapeBoundingBoxQuery(FIELDNAME, QueryRelation.CONTAINS,0, 0, 0, 0);\n    assertEquals(1, searcher.count(q));\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}