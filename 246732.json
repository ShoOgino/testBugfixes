{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","commits":[{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","pathOld":"/dev/null","sourceNew":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case \n    SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n                                 \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertEquals(null, pout.getVal(i));\n      }\n    } finally {\n      query.close();\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    } finally {\n      query.close();\n    }\n    \n    // test request for no percentiles\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles=''}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    } finally {\n      query.close();\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\");\n\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    } finally {\n      query.close();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","pathOld":"/dev/null","sourceNew":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case \n    SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n                                 \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertEquals(null, pout.getVal(i));\n      }\n    } finally {\n      query.close();\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    } finally {\n      query.close();\n    }\n    \n    // test request for no percentiles\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles=''}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    } finally {\n      query.close();\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\");\n\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    } finally {\n      query.close();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","sourceNew":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\",\n        \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertNull(pout.getVal(i));\n      }\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    }\n    \n    // test request for no percentiles\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles=''}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    }\n    \n  }\n\n","sourceOld":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case \n    SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n                                 \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertEquals(null, pout.getVal(i));\n      }\n    } finally {\n      query.close();\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    } finally {\n      query.close();\n    }\n    \n    // test request for no percentiles\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles=''}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    } finally {\n      query.close();\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\");\n\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    } finally {\n      query.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","sourceNew":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\",\n        \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertNull(pout.getVal(i));\n      }\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    }\n    \n    // test request for no percentiles\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles=''}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    }\n    \n  }\n\n","sourceOld":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case \n    SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n                                 \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertEquals(null, pout.getVal(i));\n      }\n    } finally {\n      query.close();\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    } finally {\n      query.close();\n    }\n    \n    // test request for no percentiles\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles=''}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    } finally {\n      query.close();\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\");\n\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    } finally {\n      query.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testPercentiles().mjava","sourceNew":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\",\n        \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertNull(pout.getVal(i));\n      }\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    }\n    \n    // test request for no percentiles\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles=''}stat_f\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    try (SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n        \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\")) {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    }\n    \n  }\n\n","sourceOld":"  // simple percentiles test\n  public void testPercentiles() throws Exception {\n    \n    // NOTE: deliberately not in numeric order\n    String percentiles = \"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0\";\n    List <String> percentilesList = StrUtils.splitSmart(percentiles, ',');\n    \n    // test empty case \n    SolrQueryRequest query = req(\"q\", \"*:*\", \"stats\", \"true\",\n                                 \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) {\n        // ensure exact order, but all values should be null (empty result set)\n        assertEquals(percentilesList.get(i), pout.getName(i));\n        assertEquals(null, pout.getVal(i));\n      }\n    } finally {\n      query.close();\n    }\n    \n    int id = 0;\n    // add trivial docs to test basic percentiles\n    for (int i = 0; i < 100; i++) {\n      // add the same values multiple times (diff docs)\n      for (int j =0; j < 5; j++) {\n        assertU(adoc(\"id\", ++id+\"\", \"stat_f\", \"\"+i));\n      }\n    }\n\n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      for (int i = 0; i < percentilesList.size(); i++) { \n        String p = percentilesList.get(i);\n        assertEquals(p, pout.getName(i));\n        assertEquals(Double.parseDouble(p), pout.getVal(i), 1.0D);\n                     \n      }\n    } finally {\n      query.close();\n    }\n    \n    // test request for no percentiles\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles=''}stat_f\");\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      NamedList<Double> pout = extractPercentils(rsp, \"stat_f\");\n      assertNull(pout);\n    } finally {\n      query.close();\n    }\n\n    // non-numeric types don't support percentiles\n    assertU(adoc(\"id\", ++id+\"\", \"stat_dt\", \"1999-05-03T04:55:01Z\"));\n    assertU(adoc(\"id\", ++id+\"\", \"stat_s\", \"cow\"));\n    \n    assertU(commit());\n\n    query = req(\"q\", \"*:*\", \"stats\", \"true\", \n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_dt\",\n                \"stats.field\", \"{!percentiles='\" + percentiles + \"'}stat_s\");\n\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(null, query);\n      assertNull(extractPercentils(rsp, \"stat_dt\"));\n      assertNull(extractPercentils(rsp, \"stat_s\"));\n    } finally {\n      query.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1002283cfd29923d517db7c33e07bb54aac7acd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["1002283cfd29923d517db7c33e07bb54aac7acd4","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1002283cfd29923d517db7c33e07bb54aac7acd4","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1002283cfd29923d517db7c33e07bb54aac7acd4"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"1002283cfd29923d517db7c33e07bb54aac7acd4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}