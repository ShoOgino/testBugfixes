{"path":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#numLeaves(IndexReader).mjava","commits":[{"id":"e00dc2d44dc4e14788fbeb649970c757f024592d","date":1327883708,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#numLeaves(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#numLeaves(IndexReader).mjava","sourceNew":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","sourceOld":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea","date":1327930581,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#numLeaves(IndexReader).mjava","sourceNew":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","sourceOld":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e00dc2d44dc4e14788fbeb649970c757f024592d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["e00dc2d44dc4e14788fbeb649970c757f024592d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e00dc2d44dc4e14788fbeb649970c757f024592d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e00dc2d44dc4e14788fbeb649970c757f024592d":["7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}