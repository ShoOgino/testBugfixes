{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7","date":1290867534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n\n    if (anySegmentsFlushed) {\n      maybeMerge();\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true);\n\n    startCommit(commitUserData);\n  }\n\n","bugFix":["8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7","ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","833a7987bc1c94455fde83e3311f72bddedcfb93"],"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042","ed64610da1b28a1c2c9d0a27212adef27ae1baad","47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed64610da1b28a1c2c9d0a27212adef27ae1baad","date":1313002701,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        deleter.decRef(toCommit);\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n\n    if (anySegmentsFlushed) {\n      maybeMerge();\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042","f7719bda090a2ae5bab940a27ba7bb9054b29818"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        deleter.decRef(toCommit);\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":["ed64610da1b28a1c2c9d0a27212adef27ae1baad"],"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042","47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      message(\"prepareCommit: flush\");\n      message(\"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            message(\"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f","date":1322512504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.\n            deleter.incRef(toCommit, false);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(toCommit);\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":["c00afe74a80796ed1f30a9509b150ff104746a1f","f7719bda090a2ae5bab940a27ba7bb9054b29818"],"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success && infoStream != null) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  DirectoryReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  DirectoryReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  DirectoryReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  DirectoryReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n    ensureOpen(false);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"prepareCommit: flush\");\n      infoStream.message(\"IW\", \"  index before flush \" + segString());\n    }\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n    }\n\n    doBeforeFlush();\n    assert testPoint(\"startDoFlush\");\n    SegmentInfos toCommit = null;\n    boolean anySegmentsFlushed = false;\n\n    // This is copied from doFlush, except it's modified to\n    // clone & incRef the flushed SegmentInfos inside the\n    // sync block:\n\n    try {\n\n      synchronized (fullFlushLock) {\n        boolean flushSuccess = false;\n        boolean success = false;\n        try {\n          anySegmentsFlushed = docWriter.flushAllThreads();\n          if (!anySegmentsFlushed) {\n            // prevent double increment since docWriter#doFlush increments the flushcount\n            // if we flushed anything.\n            flushCount.incrementAndGet();\n          }\n          flushSuccess = true;\n\n          synchronized(this) {\n            maybeApplyDeletes(true);\n\n            readerPool.commit(segmentInfos);\n\n            // Must clone the segmentInfos while we still\n            // hold fullFlushLock and while sync'd so that\n            // no partial changes (eg a delete w/o\n            // corresponding add from an updateDocument) can\n            // sneak into the commit point:\n            toCommit = (SegmentInfos) segmentInfos.clone();\n\n            pendingCommitChangeCount = changeCount;\n\n            // This protects the segmentInfos we are now going\n            // to commit.  This is important in case, eg, while\n            // we are trying to sync all referenced files, a\n            // merge completes which would otherwise have\n            // removed the files we are now syncing.    \n            filesToCommit = toCommit.files(directory, false);\n            deleter.incRef(filesToCommit);\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during prepareCommit\");\n            }\n          }\n          // Done: finish the full flush!\n          docWriter.finishFullFlush(flushSuccess);\n          doAfterFlush();\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"prepareCommit\");\n    }\n \n    boolean success = false;\n    try {\n      if (anySegmentsFlushed) {\n        maybeMerge();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n        }\n      }\n    }\n\n    startCommit(toCommit, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c5df35ab57c223ea11aec64b53bf611904f3dced","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["ed64610da1b28a1c2c9d0a27212adef27ae1baad"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed64610da1b28a1c2c9d0a27212adef27ae1baad":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["06584e6e98d592b34e1329b384182f368d2025e8"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fad1351342e15571fed2a68feaed0a8a3a18e5da","5cab9a86bd67202d20b6adc463008c8e982b070a"],"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","3bb13258feba31ab676502787ab2e1779f129b7a"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["ed64610da1b28a1c2c9d0a27212adef27ae1baad"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["06584e6e98d592b34e1329b384182f368d2025e8"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ed64610da1b28a1c2c9d0a27212adef27ae1baad":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7","3bb13258feba31ab676502787ab2e1779f129b7a","833a7987bc1c94455fde83e3311f72bddedcfb93"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}