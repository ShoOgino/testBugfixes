{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(InvertedFields,InvertedFields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * InvertedFields api equivalency\n   */\n  public void assertFields(InvertedFields leftFields, InvertedFields rightFields, boolean deep) throws Exception {\n    // InvertedFields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(InvertedFields,InvertedFields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * InvertedFields api equivalency\n   */\n  public void assertFields(InvertedFields leftFields, InvertedFields rightFields, boolean deep) throws Exception {\n    // InvertedFields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldsEquals(String,IndexReader,Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFieldsEquals(String info, IndexReader leftReader, Fields leftFields, Fields rightFields, boolean deep) throws IOException {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatisticsEquals(info, leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTermsEquals(info, leftReader, leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","51c8450b3b616b6777f722ff4083c0bf946381a2","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}