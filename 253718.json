{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeMinMax(int,IntFunction[BytesRef],int,int).mjava","commits":[{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeMinMax(int,IntFunction[BytesRef],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Return an array that contains the min and max values for the [offset, offset+length] interval\n   *  of the given {@link BytesRef}s. */\n  private static BytesRef[] computeMinMax(int count, IntFunction<BytesRef> packedValues, int offset, int length) {\n    assert length > 0;\n    BytesRefBuilder min = new BytesRefBuilder();\n    BytesRefBuilder max = new BytesRefBuilder();\n    BytesRef first = packedValues.apply(0);\n    min.copyBytes(first.bytes, first.offset + offset, length);\n    max.copyBytes(first.bytes, first.offset + offset, length);\n    for (int i = 1; i < count; ++i) {\n      BytesRef candidate = packedValues.apply(i);\n      if (FutureArrays.compareUnsigned(min.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) > 0) {\n        min.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      } else if (FutureArrays.compareUnsigned(max.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) < 0) {\n        max.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      }\n    }\n    return new BytesRef[]{min.get(), max.get()};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeMinMax(int,IntFunction[BytesRef],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeMinMax(int,IntFunction[BytesRef],int,int).mjava","sourceNew":"  /** Return an array that contains the min and max values for the [offset, offset+length] interval\n   *  of the given {@link BytesRef}s. */\n  private static BytesRef[] computeMinMax(int count, IntFunction<BytesRef> packedValues, int offset, int length) {\n    assert length > 0;\n    BytesRefBuilder min = new BytesRefBuilder();\n    BytesRefBuilder max = new BytesRefBuilder();\n    BytesRef first = packedValues.apply(0);\n    min.copyBytes(first.bytes, first.offset + offset, length);\n    max.copyBytes(first.bytes, first.offset + offset, length);\n    for (int i = 1; i < count; ++i) {\n      BytesRef candidate = packedValues.apply(i);\n      if (Arrays.compareUnsigned(min.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) > 0) {\n        min.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      } else if (Arrays.compareUnsigned(max.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) < 0) {\n        max.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      }\n    }\n    return new BytesRef[]{min.get(), max.get()};\n  }\n\n","sourceOld":"  /** Return an array that contains the min and max values for the [offset, offset+length] interval\n   *  of the given {@link BytesRef}s. */\n  private static BytesRef[] computeMinMax(int count, IntFunction<BytesRef> packedValues, int offset, int length) {\n    assert length > 0;\n    BytesRefBuilder min = new BytesRefBuilder();\n    BytesRefBuilder max = new BytesRefBuilder();\n    BytesRef first = packedValues.apply(0);\n    min.copyBytes(first.bytes, first.offset + offset, length);\n    max.copyBytes(first.bytes, first.offset + offset, length);\n    for (int i = 1; i < count; ++i) {\n      BytesRef candidate = packedValues.apply(i);\n      if (FutureArrays.compareUnsigned(min.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) > 0) {\n        min.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      } else if (FutureArrays.compareUnsigned(max.bytes(), 0, length, candidate.bytes, candidate.offset + offset, candidate.offset + offset + length) < 0) {\n        max.copyBytes(candidate.bytes, candidate.offset + offset, length);\n      }\n    }\n    return new BytesRef[]{min.get(), max.get()};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}