{"path":"src/java/org/apache/solr/util/SolrPluginUtils#calculateMinShouldMatch(int,String).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#calculateMinShouldMatch(int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * helper exposed for UnitTests\n   * @see #setMinShouldMatch\n   */\n  static int calculateMinShouldMatch(int optionalClauseCount, String spec) {\n\n    int result = optionalClauseCount;\n        \n\n    if (-1 < spec.indexOf(\"<\")) {\n      /* we have conditional spec(s) */\n            \n      for (String s : spec.trim().split(\" \")) {\n        String[] parts = s.split(\"<\");\n        int upperBound = (new Integer(parts[0])).intValue();\n        if (optionalClauseCount <= upperBound) {\n          return result;\n        } else {\n          result = calculateMinShouldMatch\n            (optionalClauseCount, parts[1]);\n        }\n      }\n      return result;\n    }\n\n    /* otherwise, simple expresion */\n\n    if (-1 < spec.indexOf(\"%\")) {\n      /* percentage */\n      int percent = new Integer(spec.replace(\"%\",\"\")).intValue();\n      float calc = (result * percent) / 100f;\n      result = calc < 0 ? result + (int)calc : (int)calc;\n    } else {\n      int calc = (new Integer(spec)).intValue();\n      result = calc < 0 ? result + calc : calc;\n    }\n\n    return (optionalClauseCount < result ?\n            optionalClauseCount : (result < 0 ? 0 : result));\n                  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#calculateMinShouldMatch(int,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#calculateMinShouldMatch(int,String).mjava","sourceNew":"  /**\n   * helper exposed for UnitTests\n   * @see #setMinShouldMatch\n   */\n  static int calculateMinShouldMatch(int optionalClauseCount, String spec) {\n\n    int result = optionalClauseCount;\n        \n\n    if (-1 < spec.indexOf(\"<\")) {\n      /* we have conditional spec(s) */\n            \n      for (String s : spec.trim().split(\" \")) {\n        String[] parts = s.split(\"<\");\n        int upperBound = (new Integer(parts[0])).intValue();\n        if (optionalClauseCount <= upperBound) {\n          return result;\n        } else {\n          result = calculateMinShouldMatch\n            (optionalClauseCount, parts[1]);\n        }\n      }\n      return result;\n    }\n\n    /* otherwise, simple expresion */\n\n    if (-1 < spec.indexOf(\"%\")) {\n      /* percentage */\n      int percent = new Integer(spec.replace(\"%\",\"\")).intValue();\n      float calc = (result * percent) / 100f;\n      result = calc < 0 ? result + (int)calc : (int)calc;\n    } else {\n      int calc = (new Integer(spec)).intValue();\n      result = calc < 0 ? result + calc : calc;\n    }\n\n    return (optionalClauseCount < result ?\n            optionalClauseCount : (result < 0 ? 0 : result));\n                  \n  }\n\n","sourceOld":"  /**\n   * helper exposed for UnitTests\n   * @see #setMinShouldMatch\n   */\n  static int calculateMinShouldMatch(int optionalClauseCount, String spec) {\n\n    int result = optionalClauseCount;\n        \n\n    if (-1 < spec.indexOf(\"<\")) {\n      /* we have conditional spec(s) */\n            \n      for (String s : spec.trim().split(\" \")) {\n        String[] parts = s.split(\"<\");\n        int upperBound = (new Integer(parts[0])).intValue();\n        if (optionalClauseCount <= upperBound) {\n          return result;\n        } else {\n          result = calculateMinShouldMatch\n            (optionalClauseCount, parts[1]);\n        }\n      }\n      return result;\n    }\n\n    /* otherwise, simple expresion */\n\n    if (-1 < spec.indexOf(\"%\")) {\n      /* percentage */\n      int percent = new Integer(spec.replace(\"%\",\"\")).intValue();\n      float calc = (result * percent) / 100f;\n      result = calc < 0 ? result + (int)calc : (int)calc;\n    } else {\n      int calc = (new Integer(spec)).intValue();\n      result = calc < 0 ? result + calc : calc;\n    }\n\n    return (optionalClauseCount < result ?\n            optionalClauseCount : (result < 0 ? 0 : result));\n                  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}