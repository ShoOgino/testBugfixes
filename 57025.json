{"path":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"c09a89337c5a3688436fd158575e28cdbb4fe28e","date":1490706842,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, RuleSorter.ReplicaStat> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          for (Clause clause : session.getRuleSorter().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"752049b8e30557f067592844bff40caaea288062","date":1490707105,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, Policy.ReplicaStat> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          for (Clause clause : session.getRuleSorter().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, RuleSorter.ReplicaStat> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          for (Clause clause : session.getRuleSorter().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf","date":1491191579,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            matrix.set(i, matrix.get(i).removeReplica(coll, shard).first());\n            matrix.set(j, matrix.get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, Policy.ReplicaStat> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          for (Clause clause : session.getRuleSorter().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < matrix.size(); i++) {\n      Row fromRow = matrix.get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = matrix.size() - 1; j > i; i--) {\n          Row targetRow = matrix.get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            matrix.set(i, matrix.get(i).removeReplica(coll, shard).first());\n            matrix.set(j, matrix.get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b57c992d9db5a9cc83568032fb0d2483426d7da","date":1492497042,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"752049b8e30557f067592844bff40caaea288062":["c09a89337c5a3688436fd158575e28cdbb4fe28e"],"9b57c992d9db5a9cc83568032fb0d2483426d7da":["b59075a857a3d25d834f6f408491b40845b8ced0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["752049b8e30557f067592844bff40caaea288062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"752049b8e30557f067592844bff40caaea288062":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"9b57c992d9db5a9cc83568032fb0d2483426d7da":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c09a89337c5a3688436fd158575e28cdbb4fe28e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["752049b8e30557f067592844bff40caaea288062"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["b59075a857a3d25d834f6f408491b40845b8ced0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}