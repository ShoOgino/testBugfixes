{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#mapInt(int[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#mapInt(int[],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#mapInt(int[],int).mjava","sourceNew":"  /* map bits to unicode codepoints */\n  private static String mapInt(int codePointTable[], int i) {\n    StringBuilder sb = new StringBuilder();\n    String binary = Integer.toBinaryString(i);\n    for (int j = 0; j < binary.length(); j++)\n      sb.appendCodePoint(codePointTable[binary.charAt(j) - '0']);\n    return sb.toString();\n  }\n\n","sourceOld":"  /* map bits to unicode codepoints */\n  private static String mapInt(int codePointTable[], int i) {\n    StringBuilder sb = new StringBuilder();\n    String binary = Integer.toBinaryString(i);\n    for (int j = 0; j < binary.length(); j++)\n      sb.appendCodePoint(codePointTable[binary.charAt(j) - '0']);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#mapInt(int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#mapInt(int[],int).mjava","sourceNew":"  /* map bits to unicode codepoints */\n  private static String mapInt(int codePointTable[], int i) {\n    StringBuilder sb = new StringBuilder();\n    String binary = Integer.toBinaryString(i);\n    for (int j = 0; j < binary.length(); j++)\n      sb.appendCodePoint(codePointTable[binary.charAt(j) - '0']);\n    return sb.toString();\n  }\n\n","sourceOld":"  /* map bits to unicode codepoints */\n  private static String mapInt(int codePointTable[], int i) {\n    StringBuilder sb = new StringBuilder();\n    String binary = Integer.toBinaryString(i);\n    for (int j = 0; j < binary.length(); j++)\n      sb.appendCodePoint(codePointTable[binary.charAt(j) - '0']);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}