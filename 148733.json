{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,int).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, int numDocs) throws IOException {\n\n      assert numDocs > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, numDocs);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((numDocs & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | numDocs));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (numDocs & 0x3F)));\n        out.writeVInt(numDocs >>> 6);\n      }\n      postingsWriter.finishTerm(numDocs, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" fp=\"  + out.getFilePointer());\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      termWriter.write(text);\n      final int highBit = isIndexTerm ? 0x80 : 0;\n      //System.out.println(\"  isIndex=\" + isIndexTerm);\n\n      // This is a vInt, except, we steal top bit to record\n      // whether this was an indexed term:\n      if ((stats.docFreq & ~0x3F) == 0) {\n        // Fast case -- docFreq fits in 6 bits\n        out.writeByte((byte) (highBit | stats.docFreq));\n      } else {\n        // Write bottom 6 bits of docFreq, then write the\n        // remainder as vInt:\n        out.writeByte((byte) (highBit | 0x40 | (stats.docFreq & 0x3F)));\n        out.writeVInt(stats.docFreq >>> 6);\n      }\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        assert stats.totalTermFreq >= stats.docFreq;\n        out.writeVLong(stats.totalTermFreq - stats.docFreq);\n      }\n      postingsWriter.finishTerm(stats, isIndexTerm);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16843358872ed92ba92888ab99df297550b9a36a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}