{"path":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String sreq = p.get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      if (sreq==null) throw new SolrException(400,\"Missing queryString\");\n      List<String> commands = StrUtils.splitSmart(sreq,';');\n\n      String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n      Query query = QueryParsing.parseQuery(qs, defaultField, p, req.getSchema());\n\n      // If the first non-query, non-filter command is a simple sort on an indexed field, then\n      // we can use the Lucene sort ability.\n      Sort sort = null;\n      if (commands.size() >= 2) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n          // ignore the count for now... it's currently only controlled by start & limit on req\n          // count = sortSpec.getCount();\n        }\n      }\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qs, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n\n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query, req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    try {\n      U.setDefaults(req,defaults,appends,invariants);\n      SolrParams p = req.getParams();\n      String sreq = p.get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      if (sreq==null) throw new SolrException(400,\"Missing queryString\");\n      List<String> commands = StrUtils.splitSmart(sreq,';');\n\n      String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n      Query query = QueryParsing.parseQuery(qs, defaultField, p, req.getSchema());\n\n      // If the first non-query, non-filter command is a simple sort on an indexed field, then\n      // we can use the Lucene sort ability.\n      Sort sort = null;\n      if (commands.size() >= 2) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n          // ignore the count for now... it's currently only controlled by start & limit on req\n          // count = sortSpec.getCount();\n        }\n      }\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qs, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n\n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query, req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n\n    } catch (SolrException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269c8e9f1563aaf046389326e061a3a2c6a62a73","date":1173126130,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String sreq = p.get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      if (sreq==null) throw new SolrException(400,\"Missing queryString\");\n      List<String> commands = StrUtils.splitSmart(sreq,';');\n\n      String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n      Query query = QueryParsing.parseQuery(qs, defaultField, p, req.getSchema());\n\n      // If the first non-query, non-filter command is a simple sort on an indexed field, then\n      // we can use the Lucene sort ability.\n      Sort sort = null;\n      if (commands.size() >= 2) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n          // ignore the count for now... it's currently only controlled by start & limit on req\n          // count = sortSpec.getCount();\n        }\n      }\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qs, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String sreq = p.get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      if (sreq==null) throw new SolrException(400,\"Missing queryString\");\n      List<String> commands = StrUtils.splitSmart(sreq,';');\n\n      String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n      Query query = QueryParsing.parseQuery(qs, defaultField, p, req.getSchema());\n\n      // If the first non-query, non-filter command is a simple sort on an indexed field, then\n      // we can use the Lucene sort ability.\n      Sort sort = null;\n      if (commands.size() >= 2) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n          // ignore the count for now... it's currently only controlled by start & limit on req\n          // count = sortSpec.getCount();\n        }\n      }\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qs, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n\n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query, req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ea410f5b876f6fa92ac261542678209d4a4037","date":1177884620,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( 400, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String sreq = p.get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      if (sreq==null) throw new SolrException(400,\"Missing queryString\");\n      List<String> commands = StrUtils.splitSmart(sreq,';');\n\n      String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n      Query query = QueryParsing.parseQuery(qs, defaultField, p, req.getSchema());\n\n      // If the first non-query, non-filter command is a simple sort on an indexed field, then\n      // we can use the Lucene sort ability.\n      Sort sort = null;\n      if (commands.size() >= 2) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n          // ignore the count for now... it's currently only controlled by start & limit on req\n          // count = sortSpec.getCount();\n        }\n      }\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qs, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( 400, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa96fdb58cefcada21fc51faf37114033f044f3f","date":1180916840,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"e6ea410f5b876f6fa92ac261542678209d4a4037":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"269c8e9f1563aaf046389326e061a3a2c6a62a73":["d80013b5e260def972025c93a0b08524f9c38f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fa96fdb58cefcada21fc51faf37114033f044f3f":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":[],"e6ea410f5b876f6fa92ac261542678209d4a4037":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"269c8e9f1563aaf046389326e061a3a2c6a62a73":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"fa96fdb58cefcada21fc51faf37114033f044f3f":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"d80013b5e260def972025c93a0b08524f9c38f49":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}