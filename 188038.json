{"path":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","sourceNew":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = _TestUtil.nextInt(random, 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) _TestUtil.nextInt(random, 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = _TestUtil.nextInt(random, 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) _TestUtil.nextInt(random, 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","sourceNew":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = _TestUtil.nextInt(random(), 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = _TestUtil.nextInt(random, 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) _TestUtil.nextInt(random, 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","sourceNew":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = TestUtil.nextInt(random(), 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) TestUtil.nextInt(random(), 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = _TestUtil.nextInt(random(), 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) _TestUtil.nextInt(random(), 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#addValue().mjava","sourceNew":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<>();\n    int num = TestUtil.nextInt(random(), 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) TestUtil.nextInt(random(), 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Makes a bunch of single-char tokens (the max # unique terms will at most be 26).\n   * puts the # unique terms into expected, to be checked against the norm.\n   */\n  private String addValue() {\n    StringBuilder sb = new StringBuilder();\n    HashSet<String> terms = new HashSet<String>();\n    int num = TestUtil.nextInt(random(), 0, 255);\n    for (int i = 0; i < num; i++) {\n      sb.append(' ');\n      char term = (char) TestUtil.nextInt(random(), 'a', 'z');\n      sb.append(term);\n      terms.add(\"\" + term);\n    }\n    expected.add(terms.size());\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}