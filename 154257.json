{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory(random);\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory(random);\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":null,"sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":null,"sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":null,"sourceOld":"    public void testBasicDelete() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 0, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"cfd641edd796340315609425e9f70819e6d9ef0e":["3d53c3f769ca0f9e7434937b792877770271aecf"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["cfd641edd796340315609425e9f70819e6d9ef0e"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","cfd641edd796340315609425e9f70819e6d9ef0e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3d53c3f769ca0f9e7434937b792877770271aecf":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3d53c3f769ca0f9e7434937b792877770271aecf"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","cfd641edd796340315609425e9f70819e6d9ef0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["cfd641edd796340315609425e9f70819e6d9ef0e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}