{"path":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","commits":[{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"669ab70ac675a9fdd757b28a1a6ca63f667c7188","date":1305744699,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","sourceOld":"  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","sourceOld":"  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["c3a8a449466c1ff7ce2274fe73dab487256964b4","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a3776dccca01c11e7046323cfad46a3b4a471233","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"669ab70ac675a9fdd757b28a1a6ca63f667c7188":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["c3a8a449466c1ff7ce2274fe73dab487256964b4","669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6703e55954db440ab8a2bc2a615c4fa9f66b602b","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"669ab70ac675a9fdd757b28a1a6ca63f667c7188":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}