{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex) {\n    return makeGeoPolygon(planetModel, pointList, convexPointIndex, null);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex) {\n    return makeGeoPolygon(planetModel, pointList, convexPointIndex, null);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex) {\n    return makeGeoPolygon(planetModel, pointList, convexPointIndex, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["b4e444678504caf66a8060b1d514383aa4feac0c","40aa98241c87d86a0077beb8023713d93a0becfe"],"414425421ced68c7064f08c9da6a2c95399226d9":["40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40aa98241c87d86a0077beb8023713d93a0becfe":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["414425421ced68c7064f08c9da6a2c95399226d9"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"414425421ced68c7064f08c9da6a2c95399226d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","414425421ced68c7064f08c9da6a2c95399226d9"],"b4e444678504caf66a8060b1d514383aa4feac0c":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}