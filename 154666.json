{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    // multiple webaps are no longer best practise\n    // toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (\"path\"==name || \"params\"==name) {    //equals OK here\n          sb.append(val).append(' ');\n        } else {\n          sb.append(name).append('=').append(val).append(' ');\n        }\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caab9a24cde56bead0787370f9f58bee12b4856c","date":1330474364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    if (!isTestLoggingFormat) {\n      toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    }\n    toLog.add(isTestLoggingFormat ? null : \"path\", req.getContext().get(\"path\"));\n    toLog.add(isTestLoggingFormat ? null : \"params\", \"{\" + req.getParamString() + \"}\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    // multiple webaps are no longer best practise\n    // toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (\"path\"==name || \"params\"==name) {    //equals OK here\n          sb.append(val).append(' ');\n        } else {\n          sb.append(name).append('=').append(val).append(' ');\n        }\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d58ecafc00c643b390421a6e26dedc8556e75456","date":1330488755,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    if (!isTestLoggingFormat) {\n      toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    }\n    toLog.add(isTestLoggingFormat ? null : \"path\", req.getContext().get(\"path\"));\n    toLog.add(isTestLoggingFormat ? null : \"params\", \"{\" + req.getParamString() + \"}\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfdcc495f7097a13c0ae88a3338561749a4eac0b","date":1332737079,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16851b5b065d6bd2924c0819a6d91e8e7bbde5d8","date":1332995634,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n\n    postDecorateResponse(handler, req, rsp);\n\n    if (log.isInfoEnabled() && rsp.getToLog().size() > 0) {\n      log.info(rsp.getToLogAsString(logid));\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList<Object> toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n\n    if (log.isInfoEnabled() && toLog.size() > 0) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        if (name != null) {\n          sb.append(name).append('=');\n        }\n        sb.append(val).append(' ');\n      }\n\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (log.isInfoEnabled() && rsp.getToLog().size() > 0) {\n      log.info(rsp.getToLogAsString(logid));\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n\n    postDecorateResponse(handler, req, rsp);\n\n    if (log.isInfoEnabled() && rsp.getToLog().size() > 0) {\n      log.info(rsp.getToLogAsString(logid));\n    }\n  }\n\n","bugFix":["d80013b5e260def972025c93a0b08524f9c38f49"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9","date":1414167719,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      } else if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (log.isInfoEnabled() && rsp.getToLog().size() > 0) {\n      log.info(rsp.getToLogAsString(logid));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ab63427379c12859d6d1de312037b877f5148a9","date":1414432324,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      } else if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbe066092e8c64e24832c077a6b0436bb3b12d68","date":1422916860,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (log.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      log.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8","date":1423087442,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (log.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      log.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled()) {\n        final int qtime = (int)(rsp.getEndTime() - req.getStartTime());\n        if (slowQueryThresholdMillis >= 0 && qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      log.warn(\"{}{}:{}\", logid, msg, req);\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    /*\n     * Keeping this usage of isDebugEnabled because the extraction of the log data as a string might be slow. TODO:\n     * Determine how likely it is that something is going to go wrong that will prevent the logging at INFO further\n     * down, and if possible, prevent that situation. The handleRequest and postDecorateResponse methods do not indicate\n     * that they throw any checked exceptions, so it would have to be an unchecked exception that causes any problems.\n     */\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      /* slowQueryThresholdMillis defaults to -1 in SolrConfig -- not enabled.*/\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          slowLog.warn(\"slow: {}\", rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          log.warn(\"slow: \" + rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler == null) {\n      String msg = \"Null Request Handler '\" +\n          req.getParams().get(CommonParams.QT) + \"'\";\n\n      log.warn(\"{}{}:{}\", logid, msg, req);\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    /*\n     * Keeping this usage of isDebugEnabled because the extraction of the log data as a string might be slow. TODO:\n     * Determine how likely it is that something is going to go wrong that will prevent the logging at INFO further\n     * down, and if possible, prevent that situation. The handleRequest and postDecorateResponse methods do not indicate\n     * that they throw any checked exceptions, so it would have to be an unchecked exception that causes any problems.\n     */\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req, rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      /* slowQueryThresholdMillis defaults to -1 in SolrConfig -- not enabled.*/\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          slowLog.warn(\"slow: {}\", rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n\n      log.warn(\"{}{}:{}\", logid, msg, req);\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    preDecorateResponse(req, rsp);\n\n    /*\n     * Keeping this usage of isDebugEnabled because the extraction of the log data as a string might be slow. TODO:\n     * Determine how likely it is that something is going to go wrong that will prevent the logging at INFO further\n     * down, and if possible, prevent that situation. The handleRequest and postDecorateResponse methods do not indicate\n     * that they throw any checked exceptions, so it would have to be an unchecked exception that causes any problems.\n     */\n    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {\n      // log request at debug in case something goes wrong and we aren't able to log later\n      requestLog.debug(rsp.getToLogAsString(logid));\n    }\n\n    // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)\n    // if (req.getParams().getBool(ShardParams.IS_SHARD,false) && !(handler instanceof SearchHandler))\n    //   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"isShard is only acceptable with search handlers\");\n\n    handler.handleRequest(req,rsp);\n    postDecorateResponse(handler, req, rsp);\n\n    if (rsp.getToLog().size() > 0) {\n      if (requestLog.isInfoEnabled()) {\n        requestLog.info(rsp.getToLogAsString(logid));\n      }\n\n      /* slowQueryThresholdMillis defaults to -1 in SolrConfig -- not enabled.*/\n      if (log.isWarnEnabled() && slowQueryThresholdMillis >= 0) {\n        final long qtime = (long) (req.getRequestTimer().getTime());\n        if (qtime >= slowQueryThresholdMillis) {\n          slowLog.warn(\"slow: {}\", rsp.getToLogAsString(logid));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"dfdcc495f7097a13c0ae88a3338561749a4eac0b":["d58ecafc00c643b390421a6e26dedc8556e75456"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d58ecafc00c643b390421a6e26dedc8556e75456"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8":["cbe066092e8c64e24832c077a6b0436bb3b12d68"],"caab9a24cde56bead0787370f9f58bee12b4856c":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8","9aea0485ecacb6734c17da2d02569816c23a69c1"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["da41004e1997059b4d0549fbeb56bf0858d14689"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3ab63427379c12859d6d1de312037b877f5148a9":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"da41004e1997059b4d0549fbeb56bf0858d14689":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8"],"d58ecafc00c643b390421a6e26dedc8556e75456":["caab9a24cde56bead0787370f9f58bee12b4856c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbe066092e8c64e24832c077a6b0436bb3b12d68":["3ab63427379c12859d6d1de312037b877f5148a9"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["16851b5b065d6bd2924c0819a6d91e8e7bbde5d8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16851b5b065d6bd2924c0819a6d91e8e7bbde5d8":["dfdcc495f7097a13c0ae88a3338561749a4eac0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["3ab63427379c12859d6d1de312037b877f5148a9"],"dfdcc495f7097a13c0ae88a3338561749a4eac0b":["16851b5b065d6bd2924c0819a6d91e8e7bbde5d8"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","da41004e1997059b4d0549fbeb56bf0858d14689"],"caab9a24cde56bead0787370f9f58bee12b4856c":["d58ecafc00c643b390421a6e26dedc8556e75456"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["96e0d4494fe54b31c7f0151f3a632124ab806351","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["caab9a24cde56bead0787370f9f58bee12b4856c"],"3ab63427379c12859d6d1de312037b877f5148a9":["cbe066092e8c64e24832c077a6b0436bb3b12d68"],"da41004e1997059b4d0549fbeb56bf0858d14689":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"d58ecafc00c643b390421a6e26dedc8556e75456":["dfdcc495f7097a13c0ae88a3338561749a4eac0b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","f8f7907798e0c730e9ab37681c6e8dfbde0e4173","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cbe066092e8c64e24832c077a6b0436bb3b12d68":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"16851b5b065d6bd2924c0819a6d91e8e7bbde5d8":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}