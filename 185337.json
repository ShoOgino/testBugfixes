{"path":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#readDocument(XMLStreamReader,IndexSchema).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#readDocument(XMLStreamReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the document from the given xml stream reader. The following document format is expected:\n   * <p/>\n   * <pre><code>\n   * &lt;doc&gt;\n   *    &lt;field name=\"id\"&gt;1&lt;/field&gt;\n   *    &lt;field name=\"name\"&gt;The Name&lt;/field&gt;\n   *    &lt;field name=\"text\"&gt;The Text Value&lt;/field&gt;\n   * &lt;/doc&gt;\n   * </code></pre>\n   * <p/>\n   * <p/>\n   * <em>NOTE: each read document is expected to have at least one field which serves as the unique key.</em>\n   *\n   * @param reader The {@link XMLStreamReader} from which the document will be read.\n   * @param schema The index schema. The schema is used to validate that the read document has a unique key field.\n   *\n   * @return The read document.\n   *\n   * @throws XMLStreamException When reading of the document fails.\n   */\n  SolrInputDocument readDocument(XMLStreamReader reader, IndexSchema schema) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String uniqueKeyField = schema.getUniqueKeyField().getName();\n\n    StringBuilder text = new StringBuilder();\n    String fieldName = null;\n    boolean hasId = false;\n\n    while (true) {\n      int event = reader.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(reader.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(reader.getLocalName())) {\n            if (!hasId) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"All documents must contain a unique key value: '\" + doc.toString() + \"'\");\n            }\n            return doc;\n          } else if (\"field\".equals(reader.getLocalName())) {\n            doc.addField(fieldName, text.toString(), DEFAULT_BOOST);\n            if (uniqueKeyField.equals(fieldName)) {\n              hasId = true;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = reader.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unexpected XML tag doc/\" + localName);\n          }\n\n          for (int i = 0; i < reader.getAttributeCount(); i++) {\n            String attrName = reader.getAttributeLocalName(i);\n            if (\"name\".equals(attrName)) {\n              fieldName = reader.getAttributeValue(i);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#readDocument(XMLStreamReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#readDocument(XMLStreamReader,IndexSchema).mjava","sourceNew":"  /**\n   * Reads the document from the given xml stream reader. The following document format is expected:\n   * <p/>\n   * <pre><code>\n   * &lt;doc&gt;\n   *    &lt;field name=\"id\"&gt;1&lt;/field&gt;\n   *    &lt;field name=\"name\"&gt;The Name&lt;/field&gt;\n   *    &lt;field name=\"text\"&gt;The Text Value&lt;/field&gt;\n   * &lt;/doc&gt;\n   * </code></pre>\n   * <p/>\n   * <p/>\n   * <em>NOTE: each read document is expected to have at least one field which serves as the unique key.</em>\n   *\n   * @param reader The {@link XMLStreamReader} from which the document will be read.\n   * @param schema The index schema. The schema is used to validate that the read document has a unique key field.\n   *\n   * @return The read document.\n   *\n   * @throws XMLStreamException When reading of the document fails.\n   */\n  SolrInputDocument readDocument(XMLStreamReader reader, IndexSchema schema) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String uniqueKeyField = schema.getUniqueKeyField().getName();\n\n    StringBuilder text = new StringBuilder();\n    String fieldName = null;\n    boolean hasId = false;\n\n    while (true) {\n      int event = reader.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(reader.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(reader.getLocalName())) {\n            if (!hasId) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"All documents must contain a unique key value: '\" + doc.toString() + \"'\");\n            }\n            return doc;\n          } else if (\"field\".equals(reader.getLocalName())) {\n            doc.addField(fieldName, text.toString(), DEFAULT_BOOST);\n            if (uniqueKeyField.equals(fieldName)) {\n              hasId = true;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = reader.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unexpected XML tag doc/\" + localName);\n          }\n\n          for (int i = 0; i < reader.getAttributeCount(); i++) {\n            String attrName = reader.getAttributeLocalName(i);\n            if (\"name\".equals(attrName)) {\n              fieldName = reader.getAttributeValue(i);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the document from the given xml stream reader. The following document format is expected:\n   * <p/>\n   * <pre><code>\n   * &lt;doc&gt;\n   *    &lt;field name=\"id\"&gt;1&lt;/field&gt;\n   *    &lt;field name=\"name\"&gt;The Name&lt;/field&gt;\n   *    &lt;field name=\"text\"&gt;The Text Value&lt;/field&gt;\n   * &lt;/doc&gt;\n   * </code></pre>\n   * <p/>\n   * <p/>\n   * <em>NOTE: each read document is expected to have at least one field which serves as the unique key.</em>\n   *\n   * @param reader The {@link XMLStreamReader} from which the document will be read.\n   * @param schema The index schema. The schema is used to validate that the read document has a unique key field.\n   *\n   * @return The read document.\n   *\n   * @throws XMLStreamException When reading of the document fails.\n   */\n  SolrInputDocument readDocument(XMLStreamReader reader, IndexSchema schema) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String uniqueKeyField = schema.getUniqueKeyField().getName();\n\n    StringBuilder text = new StringBuilder();\n    String fieldName = null;\n    boolean hasId = false;\n\n    while (true) {\n      int event = reader.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(reader.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(reader.getLocalName())) {\n            if (!hasId) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"All documents must contain a unique key value: '\" + doc.toString() + \"'\");\n            }\n            return doc;\n          } else if (\"field\".equals(reader.getLocalName())) {\n            doc.addField(fieldName, text.toString(), DEFAULT_BOOST);\n            if (uniqueKeyField.equals(fieldName)) {\n              hasId = true;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = reader.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unexpected XML tag doc/\" + localName);\n          }\n\n          for (int i = 0; i < reader.getAttributeCount(); i++) {\n            String attrName = reader.getAttributeLocalName(i);\n            if (\"name\".equals(attrName)) {\n              fieldName = reader.getAttributeValue(i);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}