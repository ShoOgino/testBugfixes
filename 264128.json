{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      LOG.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      LOG.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      LOG.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      LOG.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      LOG.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7","date":1551957932,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(4) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      if (log.isInfoEnabled()) {\n        log.info(\"Adding proxy for URL: {}. Proxy: {}\", jetty.getBaseUrl(), proxy.getUrl());\n      }\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      log.info(\"Adding proxy for URL: \" + jetty.getBaseUrl() + \". Proxy: \" + proxy.getUrl());\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      if (log.isInfoEnabled()) {\n        log.info(\"Adding proxy for URL: {}. Proxy: {}\", jetty.getBaseUrl(), proxy.getUrl());\n      }\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.zkclienttimeout\", \"20000\");\n\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // Add proxies\n    proxies = new HashMap<>(cluster.getJettySolrRunners().size());\n    jettys = new HashMap<>(cluster.getJettySolrRunners().size());\n    for (JettySolrRunner jetty:cluster.getJettySolrRunners()) {\n      SocketProxy proxy = new SocketProxy();\n      jetty.setProxyPort(proxy.getListenPort());\n      cluster.stopJettySolrRunner(jetty);//TODO: Can we avoid this restart\n      cluster.startJettySolrRunner(jetty);\n      cluster.waitForAllNodes(30);\n      proxy.open(jetty.getBaseUrl().toURI());\n      if (log.isInfoEnabled()) {\n        log.info(\"Adding proxy for URL: {}. Proxy: {}\", jetty.getBaseUrl(), proxy.getUrl());\n      }\n      proxies.put(proxy.getUrl(), proxy);\n      jettys.put(proxy.getUrl(), jetty);\n    }\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\");\n        CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        break;\n      } catch (SolrServerException e) {\n        Thread.sleep(50);\n        if (t.hasTimedOut()) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}