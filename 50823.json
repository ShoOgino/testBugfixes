{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86be1f77aa6f0c840604d7c450389d5749ca494c","date":1504847969,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.15, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.12, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.15, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.12, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","date":1510144003,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.15, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.10, p.computeDeltaDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.12, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, p.computeDeltaDistance(DistanceStyle.ARC,gp), 0.000001);\n    \n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoStandardPath p;\n    GeoPoint gp;\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.15, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.12, p.computeNearestDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.POSITIVE_INFINITY, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["86be1f77aa6f0c840604d7c450389d5749ca494c"],"760628478e121972168791a2afa6af915192c4a6":["b4e444678504caf66a8060b1d514383aa4feac0c"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["d470c8182e92b264680e34081b75e70a9f2b3c89","86be1f77aa6f0c840604d7c450389d5749ca494c"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["b4e444678504caf66a8060b1d514383aa4feac0c","760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86be1f77aa6f0c840604d7c450389d5749ca494c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["760628478e121972168791a2afa6af915192c4a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["760628478e121972168791a2afa6af915192c4a6","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["760628478e121972168791a2afa6af915192c4a6","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"86be1f77aa6f0c840604d7c450389d5749ca494c":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","685bd38810c206c93e9058f3c2cfa9827c086c27"],"b4e444678504caf66a8060b1d514383aa4feac0c":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["685bd38810c206c93e9058f3c2cfa9827c086c27","86be1f77aa6f0c840604d7c450389d5749ca494c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","09af2c9610ce53a4b25fd99344299b40318a4a1a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}