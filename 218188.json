{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i), fieldName, String.valueOf(i+10)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{10 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i), fieldName, String.valueOf(i+10)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{10 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i), fieldName, String.valueOf(i+10)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{10 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 0] AND \" + fieldName + \":[10 TO 10]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i), fieldName, String.valueOf(i+10)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{10 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i), fieldName, String.valueOf(i+10)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{10 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 0] AND \" + fieldName + \":[10 TO 10]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"330274305237bd6f93e7ee021669f797394127b1","date":1489510162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02cc739d6621fdfc3991bde01ae8ef5cbdb46925","date":1489651910,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c","daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]), \"fl\", \"id, \" + fieldName),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedRangeQuery(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedRangeQuery(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[10] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[11] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[12] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[13] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s]\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[3] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO %s}\", fieldName, numbers[0], numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[2] + \"']\");\n\n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[0]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{%s TO *}\", fieldName, numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:{* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[* TO %s}\", fieldName, numbers[3]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[10]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[1], fieldName, numbers[8], numbers[9]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\",\n        \"//result/doc[2]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[1] + \"']\",\n        \"//result/doc[3]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[8] + \"']\",\n        \"//result/doc[4]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[9] + \"']\");\n    \n    assertQ(req(\"q\", String.format(Locale.ROOT, \"%s:[%s TO %s] OR %s:[%s TO %s]\", fieldName, numbers[0], numbers[0], fieldName, numbers[10], numbers[10]),\n                \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[0] + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["46dc9ac8b3e748407baaef82453138ff3974480c"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["19284d685ce334cd95ff0ace2793842f84bf7383"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["ab68488225b6a6c357dda72ed11dedca9914a192","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["330274305237bd6f93e7ee021669f797394127b1"],"ab68488225b6a6c357dda72ed11dedca9914a192":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"330274305237bd6f93e7ee021669f797394127b1":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["ab68488225b6a6c357dda72ed11dedca9914a192","330274305237bd6f93e7ee021669f797394127b1","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["19284d685ce334cd95ff0ace2793842f84bf7383","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"330274305237bd6f93e7ee021669f797394127b1":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}