{"path":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == null || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == null || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NO || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == null || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NO || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c60fbe1aa6c47eeb51c804909248106f8d95113","date":1470129030,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or binaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0c60fbe1aa6c47eeb51c804909248106f8d95113","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0c60fbe1aa6c47eeb51c804909248106f8d95113":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f95ce1375367b92d411a06175eab3915fe93c6bc","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["f95ce1375367b92d411a06175eab3915fe93c6bc","0c60fbe1aa6c47eeb51c804909248106f8d95113"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c60fbe1aa6c47eeb51c804909248106f8d95113":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["0c60fbe1aa6c47eeb51c804909248106f8d95113","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}