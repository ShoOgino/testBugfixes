{"path":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","commits":[{"id":"0f41068c0ab05fda1c7fe6e4bb799e00d1414668","date":1400030748,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"/dev/null","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) map.getGlobalOrd(subIndex, term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"/dev/null","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) map.getGlobalOrd(subIndex, term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"/dev/null","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) map.getGlobalOrd(subIndex, term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","date":1402950824,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) map.getGlobalOrd(subIndex, term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","date":1402998114,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) map.getGlobalOrd(subIndex, term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10eb287e62f3e48c07b2a817c1750c859bb5e7e7","date":1410374187,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      boolean emptyTerm = true;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        emptyTerm = false;\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n      if (emptyTerm){\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  static void accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      if (doc == si.docID()) {\n        long ord;\n        while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int term = (int) ord;\n          if (map != null) {\n            term = (int) ordMap.get(term);\n          }\n          counts[term]++;\n          for (FieldFacetStats f : facetStats) {\n            f.facetTermNum(docBase + doc, term);\n          }\n        }\n      } else {\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      boolean emptyTerm = true;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        emptyTerm = false;\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n      if (emptyTerm){\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      if (doc == si.docID()) {\n        long ord;\n        while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int term = (int) ord;\n          if (map != null) {\n            term = (int) ordMap.get(term);\n          }\n          counts[term]++;\n          for (FieldFacetStats f : facetStats) {\n            f.facetTermNum(docBase + doc, term);\n          }\n        }\n      } else {\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      boolean emptyTerm = true;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        emptyTerm = false;\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n      if (emptyTerm){\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesStats#accumMulti(int[],int,FieldFacetStats[],SortedSetDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      if (doc == si.docID()) {\n        long ord;\n        while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int term = (int) ord;\n          if (map != null) {\n            term = (int) ordMap.get(term);\n          }\n          counts[term]++;\n          for (FieldFacetStats f : facetStats) {\n            f.facetTermNum(docBase + doc, term);\n          }\n        }\n      } else {\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","sourceOld":"  /** accumulates per-segment multi-valued stats */\n  \n  static int accumMulti(int counts[], int docBase, FieldFacetStats[] facetStats, SortedSetDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordMap = map == null ? null : map.getGlobalOrds(subIndex);\n    int missingDocCount = 0;\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      si.setDocument(doc);\n      long ord;\n      boolean emptyTerm = true;\n      while ((ord = si.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        emptyTerm = false;\n        int term = (int) ord;\n        if (map != null) {\n          term = (int) ordMap.get(term);\n        }\n        counts[term]++;\n        for (FieldFacetStats f : facetStats) {\n          f.facetTermNum(docBase + doc, term);\n        }\n      }\n      if (emptyTerm){\n        for (FieldFacetStats f : facetStats) {\n          f.facetMissingNum(docBase + doc);\n        }\n        \n        missingDocCount++;\n      }\n    }\n    \n    return missingDocCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["93dd449115a9247533e44bab47e8429e5dccbc6d","9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"0f41068c0ab05fda1c7fe6e4bb799e00d1414668":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f41068c0ab05fda1c7fe6e4bb799e00d1414668"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7"],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":[],"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0f41068c0ab05fda1c7fe6e4bb799e00d1414668":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f41068c0ab05fda1c7fe6e4bb799e00d1414668","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","10eb287e62f3e48c07b2a817c1750c859bb5e7e7"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}