{"path":"solr/core/src/test/org/apache/solr/index/WrapperMergePolicyFactoryTest#testProperlyInitializesWrappedMergePolicy().mjava","commits":[{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/index/WrapperMergePolicyFactoryTest#testProperlyInitializesWrappedMergePolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testProperlyInitializesWrappedMergePolicy() {\n    final TieredMergePolicy defaultTMP = new TieredMergePolicy();\n    final int testMaxMergeAtOnce = defaultTMP.getMaxMergeAtOnce() * 2;\n    final double testMaxMergedSegmentMB = defaultTMP.getMaxMergedSegmentMB() * 10;\n\n    final MergePolicyFactoryArgs args = new MergePolicyFactoryArgs();\n    args.add(WrapperMergePolicyFactory.WRAPPED_PREFIX, \"test\");\n    args.add(\"test.class\", TieredMergePolicyFactory.class.getName());\n    args.add(\"test.maxMergeAtOnce\", testMaxMergeAtOnce);\n    args.add(\"test.maxMergedSegmentMB\", testMaxMergedSegmentMB);\n    MergePolicyFactory mpf = new DefaultingWrapperMergePolicyFactory(resourceLoader, args) {\n      @Override\n      protected MergePolicy getDefaultWrappedMergePolicy() {\n        throw new IllegalStateException(\"Should not have reached here!\");\n      }\n    };\n    final MergePolicy mp = mpf.getMergePolicy();\n    assertSame(mp.getClass(), TieredMergePolicy.class);\n    final TieredMergePolicy tmp = (TieredMergePolicy)mp;\n    assertEquals(\"maxMergeAtOnce\", testMaxMergeAtOnce, tmp.getMaxMergeAtOnce());\n    assertEquals(\"maxMergedSegmentMB\", testMaxMergedSegmentMB, tmp.getMaxMergedSegmentMB(), 0.0d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b531d6853cf691cd84ab58193ce7a89a424289e","date":1455121686,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/index/WrapperMergePolicyFactoryTest#testProperlyInitializesWrappedMergePolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/index/WrapperMergePolicyFactoryTest#testProperlyInitializesWrappedMergePolicy().mjava","sourceNew":"  public void testProperlyInitializesWrappedMergePolicy() {\n    final TieredMergePolicy defaultTMP = new TieredMergePolicy();\n    final int testMaxMergeAtOnce = defaultTMP.getMaxMergeAtOnce() * 2;\n    final double testMaxMergedSegmentMB = defaultTMP.getMaxMergedSegmentMB() * 10;\n\n    final MergePolicyFactoryArgs args = new MergePolicyFactoryArgs();\n    args.add(WrapperMergePolicyFactory.WRAPPED_PREFIX, \"test\");\n    args.add(\"test.class\", TieredMergePolicyFactory.class.getName());\n    args.add(\"test.maxMergeAtOnce\", testMaxMergeAtOnce);\n    args.add(\"test.maxMergedSegmentMB\", testMaxMergedSegmentMB);\n    MergePolicyFactory mpf = new DefaultingWrapperMergePolicyFactory(resourceLoader, args, null) {\n      @Override\n      protected MergePolicy getDefaultWrappedMergePolicy() {\n        throw new IllegalStateException(\"Should not have reached here!\");\n      }\n    };\n    final MergePolicy mp = mpf.getMergePolicy();\n    assertSame(mp.getClass(), TieredMergePolicy.class);\n    final TieredMergePolicy tmp = (TieredMergePolicy)mp;\n    assertEquals(\"maxMergeAtOnce\", testMaxMergeAtOnce, tmp.getMaxMergeAtOnce());\n    assertEquals(\"maxMergedSegmentMB\", testMaxMergedSegmentMB, tmp.getMaxMergedSegmentMB(), 0.0d);\n  }\n\n","sourceOld":"  public void testProperlyInitializesWrappedMergePolicy() {\n    final TieredMergePolicy defaultTMP = new TieredMergePolicy();\n    final int testMaxMergeAtOnce = defaultTMP.getMaxMergeAtOnce() * 2;\n    final double testMaxMergedSegmentMB = defaultTMP.getMaxMergedSegmentMB() * 10;\n\n    final MergePolicyFactoryArgs args = new MergePolicyFactoryArgs();\n    args.add(WrapperMergePolicyFactory.WRAPPED_PREFIX, \"test\");\n    args.add(\"test.class\", TieredMergePolicyFactory.class.getName());\n    args.add(\"test.maxMergeAtOnce\", testMaxMergeAtOnce);\n    args.add(\"test.maxMergedSegmentMB\", testMaxMergedSegmentMB);\n    MergePolicyFactory mpf = new DefaultingWrapperMergePolicyFactory(resourceLoader, args) {\n      @Override\n      protected MergePolicy getDefaultWrappedMergePolicy() {\n        throw new IllegalStateException(\"Should not have reached here!\");\n      }\n    };\n    final MergePolicy mp = mpf.getMergePolicy();\n    assertSame(mp.getClass(), TieredMergePolicy.class);\n    final TieredMergePolicy tmp = (TieredMergePolicy)mp;\n    assertEquals(\"maxMergeAtOnce\", testMaxMergeAtOnce, tmp.getMaxMergeAtOnce());\n    assertEquals(\"maxMergedSegmentMB\", testMaxMergedSegmentMB, tmp.getMaxMergedSegmentMB(), 0.0d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b531d6853cf691cd84ab58193ce7a89a424289e"]},"commit2Childs":{"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["0b531d6853cf691cd84ab58193ce7a89a424289e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}