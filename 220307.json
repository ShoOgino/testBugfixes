{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","commits":[{"id":"68fa956cfdb1b0e625046dcfa99f545fc8f04997","date":1133475513,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testFieldSpecificHighlighting() throws IOException, ParseException\n\t{\n\t\tString docMainText=\"fred is one of the people\";\n\t\tQueryParser parser=new QueryParser(FIELD_NAME,analyzer);\n\t\tQuery query=parser.parse(\"fred category:people\");\n\t\t\n\t\t//highlighting respects fieldnames used in query\n\t\tQueryScorer fieldSpecificScorer=new QueryScorer(query, \"contents\");\n\t\tHighlighter fieldSpecificHighlighter =\n\t\t\tnew Highlighter(new SimpleHTMLFormatter(),fieldSpecificScorer);\n\t\tfieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n\t\tString result=fieldSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);\n\t\tassertEquals(\"Should match\",result,\"<B>fred</B> is one of the people\");\n\t\t\n\t\t//highlighting does not respect fieldnames used in query\n\t\tQueryScorer fieldInSpecificScorer=new QueryScorer(query);\n\t\tHighlighter fieldInSpecificHighlighter =\n\t\t\tnew Highlighter(new SimpleHTMLFormatter(),fieldInSpecificScorer);\n\t\tfieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n\t\tresult=fieldInSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);\n\t\tassertEquals(\"Should match\",result,\"<B>fred</B> is one of the <B>people</B>\");\n\t\t\n\t\t\n\t\treader.close();\n\t\t\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldSpecificScorer = new SpanScorer(query, FIELD_NAME, ctf);\n        } else if (mode == this.STANDARD) {\n          fieldSpecificScorer = new QueryScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldInSpecificScorer = new SpanScorer(query, null, ctf);\n        } else if (mode == this.STANDARD) {\n          fieldInSpecificScorer = new QueryScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"\tpublic void testFieldSpecificHighlighting() throws IOException, ParseException\n\t{\n\t\tString docMainText=\"fred is one of the people\";\n\t\tQueryParser parser=new QueryParser(FIELD_NAME,analyzer);\n\t\tQuery query=parser.parse(\"fred category:people\");\n\t\t\n\t\t//highlighting respects fieldnames used in query\n\t\tQueryScorer fieldSpecificScorer=new QueryScorer(query, \"contents\");\n\t\tHighlighter fieldSpecificHighlighter =\n\t\t\tnew Highlighter(new SimpleHTMLFormatter(),fieldSpecificScorer);\n\t\tfieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n\t\tString result=fieldSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);\n\t\tassertEquals(\"Should match\",result,\"<B>fred</B> is one of the people\");\n\t\t\n\t\t//highlighting does not respect fieldnames used in query\n\t\tQueryScorer fieldInSpecificScorer=new QueryScorer(query);\n\t\tHighlighter fieldInSpecificHighlighter =\n\t\t\tnew Highlighter(new SimpleHTMLFormatter(),fieldInSpecificScorer);\n\t\tfieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n\t\tresult=fieldInSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);\n\t\tassertEquals(\"Should match\",result,\"<B>fred</B> is one of the <B>people</B>\");\n\t\t\n\t\t\n\t\treader.close();\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n\n        } else if (mode == this.STANDARD) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldInSpecificScorer = new QueryScorer(query, null);\n\n        } else if (mode == this.STANDARD) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldSpecificScorer = new SpanScorer(query, FIELD_NAME, ctf);\n        } else if (mode == this.STANDARD) {\n          fieldSpecificScorer = new QueryScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldInSpecificScorer = new SpanScorer(query, null, ctf);\n        } else if (mode == this.STANDARD) {\n          fieldInSpecificScorer = new QueryScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n\n        } else if (mode == this.STANDARD) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.SPAN) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(docMainText));\n          CachingTokenFilter ctf = new CachingTokenFilter(tokenStream);\n          fieldInSpecificScorer = new QueryScorer(query, null);\n\n        } else if (mode == this.STANDARD) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == this.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == this.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == this.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        Query query = parser.parse(\"fred category:people\");\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"ba1116b3450a9c1642c89445d131b37344055245":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"296b8b38a87feb478921f77834a2302dfe77641c":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"464a71190fd7694704427cd763d7c957c10e935b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}