{"path":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","commits":[{"id":"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c","date":1456187117,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, 2, 2, configName, null); \n   \n      \n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n    \n      \n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, 2, 2, configName, null); \n   \n      \n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n    \n      \n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","sourceNew":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, 2, 2, configName, null); \n   \n      \n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n    \n      \n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","sourceNew":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, 2, 2, configName, null); \n   \n      \n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n    \n      \n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testZkConnected().mjava","sourceNew":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice slice = getRandomEntry(slices);\n      Replica replica = getRandomEntry(slice.getReplicas());\n      JettySolrRunner jetty = miniCluster.getReplicaJetty(replica);\n      // Use the replica's core URL to avoid ZK communication\n      try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl()).build()) {\n        jetty.getCoreContainer().getZkController().getZkClient().close();\n        rsp = req.process(client);\n        assertFalse(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n    \n      QueryRequest req = new QueryRequest();\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["419a8f52c6635419beb951255cacbbb281044c57"],"bd22dcd3ba035a1626face7319c94be45ae07172":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["419a8f52c6635419beb951255cacbbb281044c57","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd22dcd3ba035a1626face7319c94be45ae07172"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["bd22dcd3ba035a1626face7319c94be45ae07172","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd22dcd3ba035a1626face7319c94be45ae07172":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"419a8f52c6635419beb951255cacbbb281044c57":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["419a8f52c6635419beb951255cacbbb281044c57"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}