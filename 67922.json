{"path":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29e23e367cc757f42cdfce2bcbf21e68cd209cda","date":1343071560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55c178897422fc01a257353a67f2ee23f1c82403","date":1343076368,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6de04d4fe93277012dfab5984e08a38de091bcd1","date":1359464792,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,IndexOptions,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, IndexOptions indexOptions, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":null,"sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55c178897422fc01a257353a67f2ee23f1c82403":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"57635ff388fa1bee703f3b892a86a3e48975576a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","55c178897422fc01a257353a67f2ee23f1c82403"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"aba371508186796cc6151d8223a5b4e16d02e26e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","55c178897422fc01a257353a67f2ee23f1c82403"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["57635ff388fa1bee703f3b892a86a3e48975576a","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["55c178897422fc01a257353a67f2ee23f1c82403"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","6de04d4fe93277012dfab5984e08a38de091bcd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6de04d4fe93277012dfab5984e08a38de091bcd1":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["aba371508186796cc6151d8223a5b4e16d02e26e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"55c178897422fc01a257353a67f2ee23f1c82403":["57635ff388fa1bee703f3b892a86a3e48975576a","aba371508186796cc6151d8223a5b4e16d02e26e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["55c178897422fc01a257353a67f2ee23f1c82403"],"57635ff388fa1bee703f3b892a86a3e48975576a":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["29e23e367cc757f42cdfce2bcbf21e68cd209cda","57635ff388fa1bee703f3b892a86a3e48975576a","aba371508186796cc6151d8223a5b4e16d02e26e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d4d69c535930b5cce125cff868d40f6373dc27d4","6de04d4fe93277012dfab5984e08a38de091bcd1","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6de04d4fe93277012dfab5984e08a38de091bcd1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}