{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,String,int,int[],boolean,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      this.cscore = collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  String funcStr,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  boolean max,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, null, nullPolicy, max, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(funcStr.indexOf(\"cscore()\") != -1) {\n        this.cscore = true;\n        this.rcontext.put(\"CSCORE\",this.collapseScore);\n      }\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b42ae09e9ac11a8b035eb691b3aa7ede98551622","date":1473618566,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      this.cscore = collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":["0325de99180d346d61d36938843a5c8451fe26ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      this.cscore = collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      this.cscore = collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      this.cscore = collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","date":1556831715,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0325de99180d346d61d36938843a5c8451fe26ae","89424def13674ea17829b41c5883c54ecc31a132"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0325de99180d346d61d36938843a5c8451fe26ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"89424def13674ea17829b41c5883c54ecc31a132":["0325de99180d346d61d36938843a5c8451fe26ae","b42ae09e9ac11a8b035eb691b3aa7ede98551622"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["89424def13674ea17829b41c5883c54ecc31a132"],"0325de99180d346d61d36938843a5c8451fe26ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b42ae09e9ac11a8b035eb691b3aa7ede98551622","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}