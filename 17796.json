{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    entityProcessor.init(new ContextImpl(entity, resolver, entity.dataSrc,\n            Context.FIND_DELTA, requestParameters.requestParams, session, null,\n            dataImporter));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver,\n              parentEntity.dataSrc, Context.FIND_DELTA,\n              requestParameters.requestParams, session, null, dataImporter));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d22c66b0638c82521891318fc352042c5b86e03","33c5df47ecbf734182bdfec8f59154a8dbecc2e3","5a2fb92cb166ab36a1320f8bf3cb157063177c45","9c2d909a1a598832c7b19a641282afc434d521e0","5871a631b6817f1cef161749ceffdc037e67558a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d22c66b0638c82521891318fc352042c5b86e03","date":1219993248,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, entity.dataSrc,\n            Context.FIND_DELTA, requestParameters.requestParams, session, null,\n            dataImporter));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver,\n              parentEntity.dataSrc, Context.FIND_DELTA,\n              requestParameters.requestParams, session, null, dataImporter));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    entityProcessor.init(new ContextImpl(entity, resolver, entity.dataSrc,\n            Context.FIND_DELTA, requestParameters.requestParams, session, null,\n            dataImporter));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver,\n              parentEntity.dataSrc, Context.FIND_DELTA,\n              requestParameters.requestParams, session, null, dataImporter));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33c5df47ecbf734182bdfec8f59154a8dbecc2e3","date":1226037101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null,\n            Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, entity.dataSrc,\n            Context.FIND_DELTA, requestParameters.requestParams, session, null,\n            dataImporter));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver,\n              parentEntity.dataSrc, Context.FIND_DELTA,\n              requestParameters.requestParams, session, null, dataImporter));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":["5a2fb92cb166ab36a1320f8bf3cb157063177c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c2d909a1a598832c7b19a641282afc434d521e0","date":1226910389,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null,\n            Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Collects unique keys of all Solr documents for whom one or more source\n   * tables have been changed since the last indexed time.\n   * </p>\n   * <p>\n   * Note: In our definition, unique key of Solr document is the primary key of\n   * the top level entity (unless skipped using docRoot=false) in the Solr\n   * document in data-config.xml\n   * </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be\n   *         updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null,\n            Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a2fb92cb166ab36a1320f8bf3cb157063177c45","date":1228504451,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null,\n            Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    int count = 0;\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n    count = 0;\n    // identifying the deleted rows from this entities\n    LOG.info(\"Running DeletedRowKey() for Entity: \" + entity.name);\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      count++;\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name\n            + \" rows obtained : \" + count);\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row),\n                entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"bugIntro":["782154d790b2066a4483cdc8f835e4d8c4ad66d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    entityProcessor.init(new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this));\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      parentEntityProcessor.init(new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this));\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d71c83578c6e08733e7a584ca744c7c66d60a6","date":1235022186,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n        //someone called abort\n        if (stop.get())\n          return new HashSet();\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks)\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cda565f1dbc96f12de5c399b6d48418f0e79be5","date":1236799070,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter dataImporter, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, dataImporter,\n                deletedRows));\n        //someone called abort\n        if (stop.get())\n          return new HashSet();\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter context, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,\n                deletedRows));\n        //someone called abort\n        if (stop.get())\n          return new HashSet();\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20840b87796f014c4ac2434f49511268d5f7e663","date":1243341614,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,Set[Map[String,Object]]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(DataConfig.Entity,DataConfig.Entity,VariableResolverImpl,DataImporter,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, deletedRows));\n        //someone called abort\n        if (stop.get())\n          return new HashSet();\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,\n                                               DataConfig.Entity parentEntity, VariableResolverImpl resolver,\n                                               DataImporter dataImporter, Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n    if (entity.entities != null) {\n\n      for (DataConfig.Entity entity1 : entity.entities) {\n        //this ensures that we start from the leaf nodes\n        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, dataImporter,\n                deletedRows));\n        //someone called abort\n        if (stop.get())\n          return new HashSet();\n      }\n\n    }\n    // identifying the modified rows for this entities\n\n    Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();\n    resolver.addNamespace(null, (Map) entity.allAttributes);\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);\n    resolver.context = context1;\n    entityProcessor.init(context1);\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + entity.name);\n    //get the modified rows in this entity\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      deltaSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> deltaRemoveSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = entityProcessor.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      //Check to see if this delete is in the current delta set\n      for (Map<String, Object> modifiedRow : deltaSet) {\n        if (modifiedRow.get(entity.pk).equals(row.get(entity.pk))) {\n          deltaRemoveSet.add(modifiedRow);\n        }\n      }\n\n      deletedSet.add(row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    //asymmetric Set difference\n    deltaSet.removeAll(deltaRemoveSet);\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + entity.name + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet);\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //so propogate up the changes in the chain\n    if (parentEntity != null && parentEntity.isDocRoot) {\n      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);\n      ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);\n      resolver.context = context2;\n      parentEntityProcessor.init(context2);\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(entity.name, row), entity.name, parentEntityProcessor, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + entity.name);\n    if (entity.isDocRoot)\n      deletedRows.addAll(deletedSet);\n\n    return entity.isDocRoot ? myModifiedPks : new HashSet<Map<String, Object>>(\n            parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"8d22c66b0638c82521891318fc352042c5b86e03":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["5a2fb92cb166ab36a1320f8bf3cb157063177c45"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["8d22c66b0638c82521891318fc352042c5b86e03"],"5a2fb92cb166ab36a1320f8bf3cb157063177c45":["9c2d909a1a598832c7b19a641282afc434d521e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20840b87796f014c4ac2434f49511268d5f7e663":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"9c2d909a1a598832c7b19a641282afc434d521e0":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"]},"commit2Childs":{"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["20840b87796f014c4ac2434f49511268d5f7e663"],"8d22c66b0638c82521891318fc352042c5b86e03":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["8d22c66b0638c82521891318fc352042c5b86e03"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["9c2d909a1a598832c7b19a641282afc434d521e0"],"5a2fb92cb166ab36a1320f8bf3cb157063177c45":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"9c2d909a1a598832c7b19a641282afc434d521e0":["5a2fb92cb166ab36a1320f8bf3cb157063177c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"20840b87796f014c4ac2434f49511268d5f7e663":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","20840b87796f014c4ac2434f49511268d5f7e663"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}