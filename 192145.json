{"path":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#merge(MergeState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  /** Merges in the term vectors from the readers in \n   *  <code>mergeState</code>. The default implementation skips\n   *  over deleted documents, and uses {@link #startDocument(int)},\n   *  {@link #startField(FieldInfo, int, boolean, boolean)}, \n   *  {@link #startTerm(BytesRef, int)}, {@link #addPosition(int, int, int)},\n   *  and {@link #finish(int)},\n   *  returning the number of documents that were written.\n   *  Implementations can override this method for more sophisticated\n   *  merging (bulk-byte copying, etc). */\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final int maxDoc = reader.reader.maxDoc();\n      final Bits liveDocs = reader.liveDocs;\n      for (int docID = 0; docID < maxDoc; docID++) {\n        if (liveDocs != null && !liveDocs.get(docID)) {\n          // skip deleted docs\n          continue;\n        }\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Fields vectors = reader.reader.getTermVectors(docID);\n        addAllDocVectors(vectors, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","sourceOld":"  /** Merges in the term vectors from the readers in \n   *  <code>mergeState</code>. The default implementation skips\n   *  over deleted documents, and uses {@link #startDocument(int)},\n   *  {@link #startField(FieldInfo, int, boolean, boolean)}, \n   *  {@link #startTerm(BytesRef, int)}, {@link #addPosition(int, int, int)},\n   *  and {@link #finish(int)},\n   *  returning the number of documents that were written.\n   *  Implementations can override this method for more sophisticated\n   *  merging (bulk-byte copying, etc). */\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final int maxDoc = reader.reader.maxDoc();\n      final Bits liveDocs = reader.liveDocs;\n      for (int docID = 0; docID < maxDoc; docID++) {\n        if (liveDocs != null && !liveDocs.get(docID)) {\n          // skip deleted docs\n          continue;\n        }\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Fields vectors = reader.reader.getTermVectors(docID);\n        addAllDocVectors(vectors, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  /** Merges in the term vectors from the readers in \n   *  <code>mergeState</code>. The default implementation skips\n   *  over deleted documents, and uses {@link #startDocument(int)},\n   *  {@link #startField(FieldInfo, int, boolean, boolean)}, \n   *  {@link #startTerm(BytesRef, int)}, {@link #addPosition(int, int, int)},\n   *  and {@link #finish(int)},\n   *  returning the number of documents that were written.\n   *  Implementations can override this method for more sophisticated\n   *  merging (bulk-byte copying, etc). */\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final int maxDoc = reader.reader.maxDoc();\n      final Bits liveDocs = reader.liveDocs;\n      for (int docID = 0; docID < maxDoc; docID++) {\n        if (liveDocs != null && !liveDocs.get(docID)) {\n          // skip deleted docs\n          continue;\n        }\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Fields vectors = reader.reader.getTermVectors(docID);\n        addAllDocVectors(vectors, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","sourceOld":"  /** Merges in the term vectors from the readers in \n   *  <code>mergeState</code>. The default implementation skips\n   *  over deleted documents, and uses {@link #startDocument(int)},\n   *  {@link #startField(FieldInfo, int, boolean, boolean)}, \n   *  {@link #startTerm(BytesRef, int)}, {@link #addPosition(int, int, int)},\n   *  and {@link #finish(int)},\n   *  returning the number of documents that were written.\n   *  Implementations can override this method for more sophisticated\n   *  merging (bulk-byte copying, etc). */\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final int maxDoc = reader.reader.maxDoc();\n      final Bits liveDocs = reader.liveDocs;\n      for (int docID = 0; docID < maxDoc; docID++) {\n        if (liveDocs != null && !liveDocs.get(docID)) {\n          // skip deleted docs\n          continue;\n        }\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Fields vectors = reader.reader.getTermVectors(docID);\n        addAllDocVectors(vectors, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}