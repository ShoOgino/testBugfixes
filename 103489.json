{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegisterTerm() throws InterruptedException {\r\n    String collection = \"registerTerm\";\r\n    ZkShardTerms rep1Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms rep2Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep1\"));\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep2\"));\r\n    }\r\n    waitFor(2, () -> rep1Terms.getTerms().size());\r\n    rep1Terms.ensureTermsIsHigher(\"rep1\", Collections.singleton(\"rep2\"));\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n    assertEquals(0L, rep1Terms.getTerm(\"rep2\"));\r\n\r\n    // assert registerTerm does not override current value\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n\r\n    waitFor(1L, () -> rep2Terms.getTerm(\"rep1\"));\r\n    rep2Terms.setEqualsToMax(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n\r\n    // zkShardTerms must stay updated by watcher\r\n    Map<String, Long> expectedTerms = new HashMap<>();\r\n    expectedTerms.put(\"rep1\", 1L);\r\n    expectedTerms.put(\"rep2\", 1L);\r\n\r\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n    while (!timeOut.hasTimedOut()) {\r\n      if (Objects.equals(expectedTerms, rep1Terms.getTerms()) && Objects.equals(expectedTerms, rep2Terms.getTerms())) break;\r\n    }\r\n    if (timeOut.hasTimedOut()) fail(\"Expected zkShardTerms must stay updated\");\r\n\r\n    rep1Terms.close();\r\n    rep2Terms.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","sourceNew":"  public void testRegisterTerm() throws InterruptedException {\r\n    String collection = \"registerTerm\";\r\n    ZkShardTerms rep1Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms rep2Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep1\"));\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep2\"));\r\n    }\r\n    waitFor(2, () -> rep1Terms.getTerms().size());\r\n    rep1Terms.ensureTermsIsHigher(\"rep1\", Collections.singleton(\"rep2\"));\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n    assertEquals(0L, rep1Terms.getTerm(\"rep2\"));\r\n\r\n    // assert registerTerm does not override current value\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n\r\n    waitFor(1L, () -> rep2Terms.getTerm(\"rep1\"));\r\n    rep2Terms.setTermEqualsToLeader(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n\r\n    // zkShardTerms must stay updated by watcher\r\n    Map<String, Long> expectedTerms = new HashMap<>();\r\n    expectedTerms.put(\"rep1\", 1L);\r\n    expectedTerms.put(\"rep2\", 1L);\r\n\r\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n    while (!timeOut.hasTimedOut()) {\r\n      if (Objects.equals(expectedTerms, rep1Terms.getTerms()) && Objects.equals(expectedTerms, rep2Terms.getTerms())) break;\r\n    }\r\n    if (timeOut.hasTimedOut()) fail(\"Expected zkShardTerms must stay updated\");\r\n\r\n    rep1Terms.close();\r\n    rep2Terms.close();\r\n  }\r\n\n","sourceOld":"  public void testRegisterTerm() throws InterruptedException {\r\n    String collection = \"registerTerm\";\r\n    ZkShardTerms rep1Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms rep2Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep1\"));\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep2\"));\r\n    }\r\n    waitFor(2, () -> rep1Terms.getTerms().size());\r\n    rep1Terms.ensureTermsIsHigher(\"rep1\", Collections.singleton(\"rep2\"));\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n    assertEquals(0L, rep1Terms.getTerm(\"rep2\"));\r\n\r\n    // assert registerTerm does not override current value\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n\r\n    waitFor(1L, () -> rep2Terms.getTerm(\"rep1\"));\r\n    rep2Terms.setEqualsToMax(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n\r\n    // zkShardTerms must stay updated by watcher\r\n    Map<String, Long> expectedTerms = new HashMap<>();\r\n    expectedTerms.put(\"rep1\", 1L);\r\n    expectedTerms.put(\"rep2\", 1L);\r\n\r\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n    while (!timeOut.hasTimedOut()) {\r\n      if (Objects.equals(expectedTerms, rep1Terms.getTerms()) && Objects.equals(expectedTerms, rep2Terms.getTerms())) break;\r\n    }\r\n    if (timeOut.hasTimedOut()) fail(\"Expected zkShardTerms must stay updated\");\r\n\r\n    rep1Terms.close();\r\n    rep2Terms.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRegisterTerm().mjava","sourceNew":"  public void testRegisterTerm() throws InterruptedException {\n    String collection = \"registerTerm\";\n    ZkShardTerms rep1Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\n    ZkShardTerms rep2Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\n\n    rep1Terms.registerTerm(\"rep1\");\n    rep2Terms.registerTerm(\"rep2\");\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      assertEquals(0L, zkShardTerms.getTerm(\"rep1\"));\n      assertEquals(0L, zkShardTerms.getTerm(\"rep2\"));\n    }\n    waitFor(2, () -> rep1Terms.getTerms().size());\n    rep1Terms.ensureTermsIsHigher(\"rep1\", Collections.singleton(\"rep2\"));\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\n    assertEquals(0L, rep1Terms.getTerm(\"rep2\"));\n\n    // assert registerTerm does not override current value\n    rep1Terms.registerTerm(\"rep1\");\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\n\n    waitFor(1L, () -> rep2Terms.getTerm(\"rep1\"));\n    rep2Terms.setTermEqualsToLeader(\"rep2\");\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\n    rep2Terms.registerTerm(\"rep2\");\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\n\n    // zkShardTerms must stay updated by watcher\n    Map<String, Long> expectedTerms = new HashMap<>();\n    expectedTerms.put(\"rep1\", 1L);\n    expectedTerms.put(\"rep2\", 1L);\n\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (Objects.equals(expectedTerms, rep1Terms.getTerms()) && Objects.equals(expectedTerms, rep2Terms.getTerms())) break;\n    }\n    if (timeOut.hasTimedOut()) fail(\"Expected zkShardTerms must stay updated\");\n\n    rep1Terms.close();\n    rep2Terms.close();\n  }\n\n","sourceOld":"  public void testRegisterTerm() throws InterruptedException {\r\n    String collection = \"registerTerm\";\r\n    ZkShardTerms rep1Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms rep2Terms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep1\"));\r\n      assertEquals(0L, zkShardTerms.getTerm(\"rep2\"));\r\n    }\r\n    waitFor(2, () -> rep1Terms.getTerms().size());\r\n    rep1Terms.ensureTermsIsHigher(\"rep1\", Collections.singleton(\"rep2\"));\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n    assertEquals(0L, rep1Terms.getTerm(\"rep2\"));\r\n\r\n    // assert registerTerm does not override current value\r\n    rep1Terms.registerTerm(\"rep1\");\r\n    assertEquals(1L, rep1Terms.getTerm(\"rep1\"));\r\n\r\n    waitFor(1L, () -> rep2Terms.getTerm(\"rep1\"));\r\n    rep2Terms.setTermEqualsToLeader(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n    rep2Terms.registerTerm(\"rep2\");\r\n    assertEquals(1L, rep2Terms.getTerm(\"rep2\"));\r\n\r\n    // zkShardTerms must stay updated by watcher\r\n    Map<String, Long> expectedTerms = new HashMap<>();\r\n    expectedTerms.put(\"rep1\", 1L);\r\n    expectedTerms.put(\"rep2\", 1L);\r\n\r\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n    while (!timeOut.hasTimedOut()) {\r\n      if (Objects.equals(expectedTerms, rep1Terms.getTerms()) && Objects.equals(expectedTerms, rep2Terms.getTerms())) break;\r\n    }\r\n    if (timeOut.hasTimedOut()) fail(\"Expected zkShardTerms must stay updated\");\r\n\r\n    rep1Terms.close();\r\n    rep2Terms.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}