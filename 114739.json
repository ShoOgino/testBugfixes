{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    InvertedFields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    InvertedFields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.getUniqueFieldCount());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newField(\"field\", \"one\", TextField.TYPE_STORED));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null, false);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum, true);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    try {\n      writer.addDocument(doc);\n      fail(\"should have hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"field\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    try {\n      writer.addDocument(doc);\n      fail(\"should have hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"field\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    try {\n      writer.addDocument(doc);\n      fail(\"should have hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"field\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    Fields vectors = searcher.reader.getTermVectors(hits[0].doc);\n    assertNotNull(vectors);\n    assertEquals(1, vectors.size());\n    Terms vector = vectors.terms(\"field\");\n    assertNotNull(vector);\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(\"one\", termsEnum.term().utf8ToString());\n    assertEquals(5, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum dpEnum = termsEnum.docsAndPositions(null, null);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      assertEquals(i, dpEnum.nextPosition());\n    }\n\n    dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n    assertNotNull(dpEnum);\n    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(5, dpEnum.freq());\n    for(int i=0;i<5;i++) {\n      dpEnum.nextPosition();\n      assertEquals(4*i, dpEnum.startOffset());\n      assertEquals(4*i+3, dpEnum.endOffset());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8","date":1398861883,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":null,"sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true)).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    \n    FieldType ft2 = new FieldType(TextField.TYPE_STORED);\n    ft2.setStoreTermVectors(true);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_STORED);\n    ft3.setStoreTermVectors(true);\n    ft3.setStoreTermVectorPositions(true);\n    \n    FieldType ft4 = new FieldType(TextField.TYPE_STORED);\n    ft4.setStoreTermVectors(true);\n    ft4.setStoreTermVectorOffsets(true);\n    \n    FieldType ft5 = new FieldType(TextField.TYPE_STORED);\n    ft5.setStoreTermVectors(true);\n    ft5.setStoreTermVectorOffsets(true);\n    ft5.setStoreTermVectorPositions(true);\n    \n    doc.add(newTextField(\"field\", \"one\", Field.Store.YES));\n    doc.add(newField(\"field\", \"one\", ft2));\n    doc.add(newField(\"field\", \"one\", ft3));\n    doc.add(newField(\"field\", \"one\", ft4));\n    doc.add(newField(\"field\", \"one\", ft5));\n    try {\n      writer.addDocument(doc);\n      fail(\"should have hit exception\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\\\"field\\\")\",\n                   iae.getMessage());\n    }\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","3394716f52b34ab259ad5247e7595d9f9db6e935"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"52c7e49be259508735752fba88085255014a6ecf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","bec174f3de70d10a1f89b7d7a6ff40d1136ec4b8"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}