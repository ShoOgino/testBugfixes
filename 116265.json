{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#getRedactionContext(ClusterState).mjava","commits":[{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#getRedactionContext(ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepare collection and node / host names for redaction.\n   * @param clusterState cluster state\n   */\n  public static RedactionUtils.RedactionContext getRedactionContext(ClusterState clusterState) {\n    RedactionUtils.RedactionContext ctx = new RedactionUtils.RedactionContext();\n    TreeSet<String> names = new TreeSet<>(clusterState.getLiveNodes());\n    for (String nodeName : names) {\n      String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n      try {\n        URL u = new URL(urlString);\n        // protocol format\n        String hostPort = u.getHost() + \":\" + u.getPort();\n        ctx.addName(u.getHost() + \":\" + u.getPort(), RedactionUtils.NODE_REDACTION_PREFIX);\n        // node name format\n        ctx.addEquivalentName(hostPort, u.getHost() + \"_\" + u.getPort() + \"_\", RedactionUtils.NODE_REDACTION_PREFIX);\n      } catch (MalformedURLException e) {\n        log.warn(\"Invalid URL for node name \" + nodeName + \", replacing including protocol and path\", e);\n        ctx.addName(urlString, RedactionUtils.NODE_REDACTION_PREFIX);\n        ctx.addEquivalentName(urlString, Utils.getBaseUrlForNodeName(nodeName, \"https\"), RedactionUtils.NODE_REDACTION_PREFIX);\n      }\n    }\n    names.clear();\n    names.addAll(clusterState.getCollectionStates().keySet());\n    names.forEach(n -> ctx.addName(n, RedactionUtils.COLL_REDACTION_PREFIX));\n    return ctx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#getRedactionContext(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#getRedactionContext(ClusterState).mjava","sourceNew":"  /**\n   * Prepare collection and node / host names for redaction.\n   * @param clusterState cluster state\n   */\n  public static RedactionUtils.RedactionContext getRedactionContext(ClusterState clusterState) {\n    RedactionUtils.RedactionContext ctx = new RedactionUtils.RedactionContext();\n    TreeSet<String> names = new TreeSet<>(clusterState.getLiveNodes());\n    for (String nodeName : names) {\n      String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n      try {\n        URL u = new URL(urlString);\n        // protocol format\n        String hostPort = u.getHost() + \":\" + u.getPort();\n        ctx.addName(u.getHost() + \":\" + u.getPort(), RedactionUtils.NODE_REDACTION_PREFIX);\n        // node name format\n        ctx.addEquivalentName(hostPort, u.getHost() + \"_\" + u.getPort() + \"_\", RedactionUtils.NODE_REDACTION_PREFIX);\n      } catch (MalformedURLException e) {\n        log.warn(\"Invalid URL for node name {}, replacing including protocol and path\", nodeName, e);\n        ctx.addName(urlString, RedactionUtils.NODE_REDACTION_PREFIX);\n        ctx.addEquivalentName(urlString, Utils.getBaseUrlForNodeName(nodeName, \"https\"), RedactionUtils.NODE_REDACTION_PREFIX);\n      }\n    }\n    names.clear();\n    names.addAll(clusterState.getCollectionStates().keySet());\n    names.forEach(n -> ctx.addName(n, RedactionUtils.COLL_REDACTION_PREFIX));\n    return ctx;\n  }\n\n","sourceOld":"  /**\n   * Prepare collection and node / host names for redaction.\n   * @param clusterState cluster state\n   */\n  public static RedactionUtils.RedactionContext getRedactionContext(ClusterState clusterState) {\n    RedactionUtils.RedactionContext ctx = new RedactionUtils.RedactionContext();\n    TreeSet<String> names = new TreeSet<>(clusterState.getLiveNodes());\n    for (String nodeName : names) {\n      String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n      try {\n        URL u = new URL(urlString);\n        // protocol format\n        String hostPort = u.getHost() + \":\" + u.getPort();\n        ctx.addName(u.getHost() + \":\" + u.getPort(), RedactionUtils.NODE_REDACTION_PREFIX);\n        // node name format\n        ctx.addEquivalentName(hostPort, u.getHost() + \"_\" + u.getPort() + \"_\", RedactionUtils.NODE_REDACTION_PREFIX);\n      } catch (MalformedURLException e) {\n        log.warn(\"Invalid URL for node name \" + nodeName + \", replacing including protocol and path\", e);\n        ctx.addName(urlString, RedactionUtils.NODE_REDACTION_PREFIX);\n        ctx.addEquivalentName(urlString, Utils.getBaseUrlForNodeName(nodeName, \"https\"), RedactionUtils.NODE_REDACTION_PREFIX);\n      }\n    }\n    names.clear();\n    names.addAll(clusterState.getCollectionStates().keySet());\n    names.forEach(n -> ctx.addName(n, RedactionUtils.COLL_REDACTION_PREFIX));\n    return ctx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#getRedactionContext(ClusterState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Prepare collection and node / host names for redaction.\n   * @param clusterState cluster state\n   */\n  public static RedactionUtils.RedactionContext getRedactionContext(ClusterState clusterState) {\n    RedactionUtils.RedactionContext ctx = new RedactionUtils.RedactionContext();\n    TreeSet<String> names = new TreeSet<>(clusterState.getLiveNodes());\n    for (String nodeName : names) {\n      String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n      try {\n        URL u = new URL(urlString);\n        // protocol format\n        String hostPort = u.getHost() + \":\" + u.getPort();\n        ctx.addName(u.getHost() + \":\" + u.getPort(), RedactionUtils.NODE_REDACTION_PREFIX);\n        // node name format\n        ctx.addEquivalentName(hostPort, u.getHost() + \"_\" + u.getPort() + \"_\", RedactionUtils.NODE_REDACTION_PREFIX);\n      } catch (MalformedURLException e) {\n        log.warn(\"Invalid URL for node name {}, replacing including protocol and path\", nodeName, e);\n        ctx.addName(urlString, RedactionUtils.NODE_REDACTION_PREFIX);\n        ctx.addEquivalentName(urlString, Utils.getBaseUrlForNodeName(nodeName, \"https\"), RedactionUtils.NODE_REDACTION_PREFIX);\n      }\n    }\n    names.clear();\n    names.addAll(clusterState.getCollectionStates().keySet());\n    names.forEach(n -> ctx.addName(n, RedactionUtils.COLL_REDACTION_PREFIX));\n    return ctx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["e35f2dde06b35aa9904949a3a93fabd090371077"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}