{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc410f098656580547e9b4a50cc74069a95d3818","date":1358125555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<String,String>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Version.LATEST.toString());\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Constants.LUCENE_VERSION);\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"552952562ab3b98c499d9cbf0b7a1691af0084ed","date":1434126156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setDiagnostics(SegmentInfo,String,Map[String,String]).mjava","sourceNew":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Version.LATEST.toString());\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    // On IBM J9 JVM this is better than java.version which is just 1.7.0 (no update level):\n    diagnostics.put(\"java.runtime.version\", System.getProperty(\"java.runtime.version\", \"undefined\"));\n    // Hotspot version, e.g. 2.8 for J9:\n    diagnostics.put(\"java.vm.version\", System.getProperty(\"java.vm.version\", \"undefined\"));\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","sourceOld":"  private static void setDiagnostics(SegmentInfo info, String source, Map<String,String> details) {\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"source\", source);\n    diagnostics.put(\"lucene.version\", Version.LATEST.toString());\n    diagnostics.put(\"os\", Constants.OS_NAME);\n    diagnostics.put(\"os.arch\", Constants.OS_ARCH);\n    diagnostics.put(\"os.version\", Constants.OS_VERSION);\n    diagnostics.put(\"java.version\", Constants.JAVA_VERSION);\n    diagnostics.put(\"java.vendor\", Constants.JAVA_VENDOR);\n    diagnostics.put(\"timestamp\", Long.toString(new Date().getTime()));\n    if (details != null) {\n      diagnostics.putAll(details);\n    }\n    info.setDiagnostics(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bc410f098656580547e9b4a50cc74069a95d3818"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bc410f098656580547e9b4a50cc74069a95d3818"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"552952562ab3b98c499d9cbf0b7a1691af0084ed":["057a1793765d068ea9302f1a29e21734ee58d41e"],"bc410f098656580547e9b4a50cc74069a95d3818":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"057a1793765d068ea9302f1a29e21734ee58d41e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["552952562ab3b98c499d9cbf0b7a1691af0084ed"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["057a1793765d068ea9302f1a29e21734ee58d41e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8917bfede3b4ca30f4305c1e391e9218959cd723","bc410f098656580547e9b4a50cc74069a95d3818"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"552952562ab3b98c499d9cbf0b7a1691af0084ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc410f098656580547e9b4a50cc74069a95d3818":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8917bfede3b4ca30f4305c1e391e9218959cd723"],"057a1793765d068ea9302f1a29e21734ee58d41e":["552952562ab3b98c499d9cbf0b7a1691af0084ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}