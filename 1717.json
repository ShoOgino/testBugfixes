{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges in the count contributions from the specified shard for each.\n   * This method is recursive if the shard data includes sub-pivots\n   *\n   * @see PivotFacetField#contributeFromShard\n   * @see PivotFacetField#createFromListOfNamedLists\n   */\n  public void mergeContributionFromShard(int shardNumber, ResponseBuilder rb, NamedList<Object> value) {\n    assert null != value : \"can't merge in null data\";\n    \n    if (!shardHasContributed(shardNumber)) {\n      sourceShards.set(shardNumber);      \n      count += PivotFacetHelper.getCount(value);\n    }\n    \n    List<NamedList<Object>> shardChildPivots = PivotFacetHelper.getPivots(value);\n    // sub pivot -- we may not have seen this yet depending on refinement\n    if (null == childPivot) {\n      childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb,  this,  shardChildPivots);\n    } else {\n      childPivot.contributeFromShard(shardNumber, rb, shardChildPivots);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","sourceNew":"  /**\n   * Merges in the count contributions from the specified shard for each.\n   * This method is recursive if the shard data includes sub-pivots\n   *\n   * @see PivotFacetField#contributeFromShard\n   * @see PivotFacetField#createFromListOfNamedLists\n   */\n  public void mergeContributionFromShard(int shardNumber, ResponseBuilder rb, NamedList<Object> value) {\n    assert null != value : \"can't merge in null data\";\n    \n    if (!shardHasContributed(shardNumber)) {\n      sourceShards.set(shardNumber);      \n      count += PivotFacetHelper.getCount(value);\n      NamedList<NamedList<NamedList<?>>> stats = PivotFacetHelper.getStats(value);\n      if (stats != null) {\n        statsValues = PivotFacetHelper.mergeStats(statsValues, stats, rb._statsInfo);\n      }\n    }\n    \n    List<NamedList<Object>> shardChildPivots = PivotFacetHelper.getPivots(value);\n    // sub pivot -- we may not have seen this yet depending on refinement\n    if (null == childPivot) {\n      childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb,  this,  shardChildPivots);\n    } else {\n      childPivot.contributeFromShard(shardNumber, rb, shardChildPivots);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges in the count contributions from the specified shard for each.\n   * This method is recursive if the shard data includes sub-pivots\n   *\n   * @see PivotFacetField#contributeFromShard\n   * @see PivotFacetField#createFromListOfNamedLists\n   */\n  public void mergeContributionFromShard(int shardNumber, ResponseBuilder rb, NamedList<Object> value) {\n    assert null != value : \"can't merge in null data\";\n    \n    if (!shardHasContributed(shardNumber)) {\n      sourceShards.set(shardNumber);      \n      count += PivotFacetHelper.getCount(value);\n    }\n    \n    List<NamedList<Object>> shardChildPivots = PivotFacetHelper.getPivots(value);\n    // sub pivot -- we may not have seen this yet depending on refinement\n    if (null == childPivot) {\n      childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb,  this,  shardChildPivots);\n    } else {\n      childPivot.contributeFromShard(shardNumber, rb, shardChildPivots);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#mergeContributionFromShard(int,ResponseBuilder,NamedList[Object]).mjava","sourceNew":"  /**\n   * Merges in the count contributions from the specified shard for each.\n   * This method is recursive if the shard data includes sub-pivots\n   *\n   * @see PivotFacetField#contributeFromShard\n   * @see PivotFacetField#createFromListOfNamedLists\n   */\n  public void mergeContributionFromShard(int shardNumber, ResponseBuilder rb, NamedList<Object> value) {\n    assert null != value : \"can't merge in null data\";\n    \n    if (!shardHasContributed(shardNumber)) {\n      sourceShards.set(shardNumber);      \n      count += PivotFacetHelper.getCount(value);\n      NamedList<NamedList<NamedList<?>>> stats = PivotFacetHelper.getStats(value);\n      if (stats != null) {\n        statsValues = PivotFacetHelper.mergeStats(statsValues, stats, rb._statsInfo);\n      }\n      NamedList<Number> shardQueryCounts = PivotFacetHelper.getQueryCounts(value);\n      if(shardQueryCounts != null) {\n        queryCounts = PivotFacetHelper.mergeQueryCounts(queryCounts, shardQueryCounts);\n      }\n      SimpleOrderedMap<SimpleOrderedMap<Object>> shardRanges = PivotFacetHelper.getRanges(value);\n      if (shardRanges != null)  {\n        if (rangeCounts == null)  {\n          rangeCounts = new LinkedHashMap<>(shardRanges.size() / 2);\n        }\n        RangeFacetRequest.DistribRangeFacet.mergeFacetRangesFromShardResponse(rangeCounts, shardRanges);\n      }\n    }\n    \n    List<NamedList<Object>> shardChildPivots = PivotFacetHelper.getPivots(value);\n    // sub pivot -- we may not have seen this yet depending on refinement\n    if (null == childPivot) {\n      childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb,  this,  shardChildPivots);\n    } else {\n      childPivot.contributeFromShard(shardNumber, rb, shardChildPivots);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges in the count contributions from the specified shard for each.\n   * This method is recursive if the shard data includes sub-pivots\n   *\n   * @see PivotFacetField#contributeFromShard\n   * @see PivotFacetField#createFromListOfNamedLists\n   */\n  public void mergeContributionFromShard(int shardNumber, ResponseBuilder rb, NamedList<Object> value) {\n    assert null != value : \"can't merge in null data\";\n    \n    if (!shardHasContributed(shardNumber)) {\n      sourceShards.set(shardNumber);      \n      count += PivotFacetHelper.getCount(value);\n      NamedList<NamedList<NamedList<?>>> stats = PivotFacetHelper.getStats(value);\n      if (stats != null) {\n        statsValues = PivotFacetHelper.mergeStats(statsValues, stats, rb._statsInfo);\n      }\n    }\n    \n    List<NamedList<Object>> shardChildPivots = PivotFacetHelper.getPivots(value);\n    // sub pivot -- we may not have seen this yet depending on refinement\n    if (null == childPivot) {\n      childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb,  this,  shardChildPivots);\n    } else {\n      childPivot.contributeFromShard(shardNumber, rb, shardChildPivots);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}