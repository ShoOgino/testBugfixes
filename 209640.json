{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        long space = Files.getFileStore(Paths.get(\"/\")).getUsableSpace();\n        long spaceInGB = space / 1024 / 1024 / 1024;\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","4532ba8e59acd790546fd70dbf60086b24b2795c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4532ba8e59acd790546fd70dbf60086b24b2795c","date":1431009695,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        long space = Files.getFileStore(Paths.get(\"/\")).getUsableSpace();\n        long spaceInGB = space / 1024 / 1024 / 1024;\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP+prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        long space = Files.getFileStore(Paths.get(\"/\")).getUsableSpace();\n        long spaceInGB = space / 1024 / 1024 / 1024;\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32107162655f090081799924aa5b12d561689fcc","date":1434560890,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP+prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        long space = Files.getFileStore(Paths.get(\"/\")).getUsableSpace();\n        long spaceInGB = space / 1024 / 1024 / 1024;\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP+prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d029fbe10fe5651865203eddc5b9d07fa3c59128","date":1456214468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP+prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","date":1472818982,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","32107162655f090081799924aa5b12d561689fcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB();\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getLoadedCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#invoke(SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getLoadedCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> invoke(SolrQueryRequest req) {\n    Map<String, Object> result = new HashMap<>();\n    CoreContainer cc = (CoreContainer) req.getContext().get(CoreContainer.class.getName());\n    if (req.getParams().getInt(CORES, -1) == 1) {\n      result.put(CORES, cc.getCoreNames().size());\n    }\n    if (req.getParams().getInt(DISK, -1) == 1) {\n      try {\n        final long spaceInGB = getUsableSpaceInGB(cc.getCoreRootDirectory());\n        result.put(DISK, spaceInGB);\n      } catch (IOException e) {\n\n      }\n    }\n    String[] sysProps = req.getParams().getParams(SYSPROP);\n    if (sysProps != null && sysProps.length > 0) {\n      for (String prop : sysProps) result.put(SYSPROP + prop, System.getProperty(prop));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"32107162655f090081799924aa5b12d561689fcc":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["d029fbe10fe5651865203eddc5b9d07fa3c59128","5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["32107162655f090081799924aa5b12d561689fcc"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d029fbe10fe5651865203eddc5b9d07fa3c59128","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d029fbe10fe5651865203eddc5b9d07fa3c59128","dded3df9e710f258905cff1def2f25eb51c62e0f"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["bc8f206328a706450934717bec7ccc22ad166fc0","dded3df9e710f258905cff1def2f25eb51c62e0f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"32107162655f090081799924aa5b12d561689fcc":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["32107162655f090081799924aa5b12d561689fcc"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}