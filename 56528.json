{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","commits":[{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","pathOld":"/dev/null","sourceNew":"    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < MAX_PENDING_COUNT; ) {\n          k += deltas[vOff].get(k, currentValues, k, MAX_PENDING_COUNT - k);\n        }\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","pathOld":"/dev/null","sourceNew":"    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < MAX_PENDING_COUNT; ) {\n          k += deltas[vOff].get(k, currentValues, k, MAX_PENDING_COUNT - k);\n        }\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","sourceNew":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < pending.length; ) {\n          k += deltas[vOff].get(k, currentValues, k, pending.length - k);\n        }\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","sourceOld":"    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < MAX_PENDING_COUNT; ) {\n          k += deltas[vOff].get(k, currentValues, k, MAX_PENDING_COUNT - k);\n        }\n        for (int k = 0; k < MAX_PENDING_COUNT; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","sourceNew":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n        currentCount = pendingOff;\n      } else {\n        currentCount = deltas[vOff].size();\n        for (int k = 0; k < currentCount; ) {\n          k += deltas[vOff].get(k, currentValues, k, currentCount - k);\n        }\n        for (int k = 0; k < currentCount; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < pending.length; ) {\n          k += deltas[vOff].get(k, currentValues, k, pending.length - k);\n        }\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","sourceNew":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n        currentCount = pendingOff;\n      } else {\n        currentCount = deltas[vOff].size();\n        for (int k = 0; k < currentCount; ) {\n          k += deltas[vOff].get(k, currentValues, k, currentCount - k);\n        }\n        for (int k = 0; k < currentCount; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n      } else if (deltas[vOff] == null) {\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k);\n        }\n      } else {\n        for (int k = 0; k < pending.length; ) {\n          k += deltas[vOff].get(k, currentValues, k, pending.length - k);\n        }\n        for (int k = 0; k < pending.length; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","sourceNew":null,"sourceOld":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n        currentCount = pendingOff;\n      } else {\n        currentCount = deltas[vOff].size();\n        for (int k = 0; k < currentCount; ) {\n          k += deltas[vOff].get(k, currentValues, k, currentCount - k);\n        }\n        for (int k = 0; k < currentCount; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.Iterator#fillValues().mjava","sourceNew":null,"sourceOld":"    @Override\n    void fillValues() {\n      if (vOff == valuesOff) {\n        currentValues = pending;\n        currentCount = pendingOff;\n      } else {\n        currentCount = deltas[vOff].size();\n        for (int k = 0; k < currentCount; ) {\n          k += deltas[vOff].get(k, currentValues, k, currentCount - k);\n        }\n        for (int k = 0; k < currentCount; ++k) {\n          currentValues[k] = minValues[vOff] + (long) (averages[vOff] * (long) k) + zigZagDecode(currentValues[k]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["22344cc5c695683a5a6cecff291f840d71c20d25"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["22344cc5c695683a5a6cecff291f840d71c20d25","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae3be3418aea9954be27a83315087f67c0c2201e"],"ae3be3418aea9954be27a83315087f67c0c2201e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb240aebd5a347d79f642127ad9255dd9a979f06"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"22344cc5c695683a5a6cecff291f840d71c20d25":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}