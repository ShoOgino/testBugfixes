{"path":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","commits":[{"id":"959f192d46200c65ecff4fa688b244abca230b73","date":1118097808,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndex#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.delete(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n    \n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.delete(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    /* new merge policy\n    assertEquals(0, i.getMaxBufferedDocs());\n    */\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(0, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    /* new merge policy\n    assertEquals(0, i.getMaxBufferedDocs());\n    */\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(0, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":null,"sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","sourceNew":null,"sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.deleteDocument(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    // depend on merge policy - assertEquals(3, i.docCount());\n    i.deleteDocuments(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.deleteDocuments(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"959f192d46200c65ecff4fa688b244abca230b73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7052f725a053aa55424f966831826f61b798bf1":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["959f192d46200c65ecff4fa688b244abca230b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["d7052f725a053aa55424f966831826f61b798bf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"959f192d46200c65ecff4fa688b244abca230b73":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"d7052f725a053aa55424f966831826f61b798bf1":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["d7052f725a053aa55424f966831826f61b798bf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["959f192d46200c65ecff4fa688b244abca230b73"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}