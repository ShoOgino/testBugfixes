{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["28288370235ed02234a64753cdbf0c6ec096304a"],"197bbedf08450ade98a11f4a0001448059666bec":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b693a83132c9e45afcd564fd65a25b60ed80388b","197bbedf08450ade98a11f4a0001448059666bec"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"28288370235ed02234a64753cdbf0c6ec096304a":["b693a83132c9e45afcd564fd65a25b60ed80388b","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"28288370235ed02234a64753cdbf0c6ec096304a":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}