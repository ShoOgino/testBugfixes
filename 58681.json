{"path":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","commits":[{"id":"cc29674855884c7ea8ac29eeb09a0276a16f334f","date":1247637346,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}