{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4485732f2b76c4d25f5b4d6d48bc1b5204817e8e","date":1340876809,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","date":1345254460,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"fmap.AAPL:Keywords\", \"ignored_a\",\n          \"fmap.xmpTPg:NPages\", \"ignored_a\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"literal.id\", \"one\");\n    });\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"literal.id\", \"one\");\n    });\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testTikaExceptionHandling().mjava","sourceNew":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"literal.id\", \"one\");\n    });\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","sourceOld":"  @Test\n  public void testTikaExceptionHandling() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) \n      h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\",\n          \"literal.id\", \"one\");\n      fail(\"TikaException is expected because of trying to extract text from password protected word file without supplying a password.\");\n    }\n    catch(Exception expected){}\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=0]\");\n\n    try{\n      loadLocal(\"extraction/password-is-solrcell.docx\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Creation-Date\", \"extractedDate\",\n          \"uprefix\", \"ignored_\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"wdf_nocase\",\n          \"literal.id\", \"one\",\n          \"ignoreTikaException\", \"true\",  // set ignore flag\n          \"fmap.Last-Modified\", \"extractedDate\");\n    }\n    catch(Exception e){\n      fail(\"TikaException should be ignored.\");\n    }\n    assertU(commit());\n    assertQ(req(\"*:*\"), \"//result[@numFound=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["4485732f2b76c4d25f5b4d6d48bc1b5204817e8e","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"4485732f2b76c4d25f5b4d6d48bc1b5204817e8e":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["4485732f2b76c4d25f5b4d6d48bc1b5204817e8e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["abd55340ba9df8b62edcd692b34e46cf0614a52e","4485732f2b76c4d25f5b4d6d48bc1b5204817e8e"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"4485732f2b76c4d25f5b4d6d48bc1b5204817e8e":["616c1830142ff5c1ddedec1ed898733b73c8e23b","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["616c1830142ff5c1ddedec1ed898733b73c8e23b","f8061ddd97f3352007d927dae445884a6f3d857b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["4485732f2b76c4d25f5b4d6d48bc1b5204817e8e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","f8061ddd97f3352007d927dae445884a6f3d857b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}