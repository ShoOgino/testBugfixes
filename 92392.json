{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted auto scaling configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottle();\n      cluster.simRestartOverseer(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      // clear any dead nodes\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted auto scaling configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottle();\n      cluster.simRestartOverseer(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      // clear any dead nodes\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","bugFix":null,"bugIntro":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      // clear any dead nodes\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03ed29fadbe8510105056c5c6b3c70051d6b4998","date":1528278522,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","bugFix":["a4422b331d00607258b0ed3e43934306e67764aa","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      // clear any dead nodes\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (cluster != null) {\n      // clear any persisted configuration\n      cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n      cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n      cluster.getSimClusterStateProvider().simDeleteAllCollections();\n      cluster.simClearSystemCollection();\n      cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n      cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n      // restore the expected number of nodes\n      int currentSize = cluster.getLiveNodesSet().size();\n      if (currentSize < clusterNodeCount) {\n        int addCnt = clusterNodeCount - currentSize;\n        while (addCnt-- > 0) {\n          cluster.simAddNode();\n        }\n      } else if (currentSize > clusterNodeCount) {\n        cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n      }\n      // clean any persisted trigger state or events\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n      removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n      cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n      cluster.simRestartOverseer(null);\n      cluster.getTimeSource().sleep(5000);\n      cluster.simResetOpCounts();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a4422b331d00607258b0ed3e43934306e67764aa","03ed29fadbe8510105056c5c6b3c70051d6b4998"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"03ed29fadbe8510105056c5c6b3c70051d6b4998":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["a4422b331d00607258b0ed3e43934306e67764aa"],"f592209545c71895260367152601e9200399776d":["a4422b331d00607258b0ed3e43934306e67764aa","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","03ed29fadbe8510105056c5c6b3c70051d6b4998"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"03ed29fadbe8510105056c5c6b3c70051d6b4998":["3f504512a03d978990cbff30db0522b354e846db","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["03ed29fadbe8510105056c5c6b3c70051d6b4998","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}