{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","sourceNew":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   * \n   * @throws FacetException\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","sourceOld":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   * \n   * @throws FacetException\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","sourceNew":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","sourceOld":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   * \n   * @throws FacetException\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryContainerTest#testCategoryAttributeMerge().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that {@link CategoryContainer} merges properties.\n   */\n  @Test\n  public void testCategoryAttributeMerge() throws FacetException {\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(2));\n    categoryContainer.addCategory(initialCatgeories[0],\n        new AssociationIntProperty(15));\n\n    Iterator<CategoryAttribute> iterator = categoryContainer.iterator();\n\n    int nCategories;\n    int nAssociations = 0;\n    for (nCategories = 0; iterator.hasNext(); nCategories++) {\n      CategoryAttribute ca = iterator.next();\n      AssociationProperty aa = (AssociationProperty) ca\n          .getProperty(AssociationIntProperty.class);\n      if (aa != null) {\n        assertEquals(\"Wrong association value\", 17, aa.getAssociation());\n        nAssociations++;\n      }\n    }\n    assertEquals(\"Wrong number of tokens\", 3, nCategories);\n    assertEquals(\"Wrong number of tokens with associations\", 1,\n        nAssociations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}