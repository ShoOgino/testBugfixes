{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a16b40feb4e6e0d55c1716733bde48296bedd20","date":1400540388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocsIn, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocsIn != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray, liveDocs);\n        } else {\n          assert posEnum.liveDocs == liveDocs;\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray, liveDocs);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocsIn, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocsIn != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray, liveDocs);\n        } else {\n          assert posEnum.liveDocs == liveDocs;\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray, liveDocs);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      FreqProxDocsAndPositionsEnum posEnum;\n\n      if (!terms.hasProx) {\n        // Caller wants positions but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index positions\");\n      }\n\n      if (!terms.hasOffsets && (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0) {\n        // Caller wants offsets but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index offsets\");\n      }\n\n      if (reuse instanceof FreqProxDocsAndPositionsEnum) {\n        posEnum = (FreqProxDocsAndPositionsEnum) reuse;\n        if (posEnum.postingsArray != postingsArray) {\n          posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n        }\n      } else {\n        posEnum = new FreqProxDocsAndPositionsEnum(terms, postingsArray);\n      }\n      posEnum.reset(sortedTermIDs[ord]);\n      return posEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"51f5280f31484820499077f41fcdfe92d527d9dc":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["0a16b40feb4e6e0d55c1716733bde48296bedd20","51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a2a0b58a171748f1022e63a0483908e6f50b0abf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}