{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = IndexReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb","date":1327857831,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = IndexReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = IndexReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","3a81e1267c45ab68de86e86ac4b4c99e6e628ceb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["3a81e1267c45ab68de86e86ac4b4c99e6e628ceb","5cab9a86bd67202d20b6adc463008c8e982b070a"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}