{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[Field,Object],Collection[Object]).mjava","commits":[{"id":"9d34561cfa6c4a189806b851dc6e06c4ef8c8556","date":1409388745,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,java.util.Map[Field,Object],java.util.Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, java.util.Map<Field, Object> fieldValues, java.util.Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[Field,Object],Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, Map<Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"],"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b07132423639577d6f68cebbec9c83599d5d5a3a"]},"commit2Childs":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}