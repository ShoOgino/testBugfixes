{"path":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}