{"path":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += DocumentsWriter.BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac6c04e543a6a90005bb9fbfecb597f57b3759d","date":1292173839,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    buffers = ArrayUtil.grow(buffers, 2+bufferUpto);\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fc28d227571aea72029cf9096fcf7d3865a6b40","date":1292211129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    buffers = ArrayUtil.grow(buffers, 2+bufferUpto);\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"/dev/null","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fc28d227571aea72029cf9096fcf7d3865a6b40"],"1ac6c04e543a6a90005bb9fbfecb597f57b3759d":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["1ac6c04e543a6a90005bb9fbfecb597f57b3759d"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["1ac6c04e543a6a90005bb9fbfecb597f57b3759d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1ac6c04e543a6a90005bb9fbfecb597f57b3759d":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}