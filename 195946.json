{"path":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"/dev/null","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd1f3c5c06036aebe90bc6da756a37d03f63884","date":1200847858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      try {\n        Thread.sleep(10);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<5;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["e82780afe6097066eb5befb86e9432f077667e3d"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["e82780afe6097066eb5befb86e9432f077667e3d"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"e82780afe6097066eb5befb86e9432f077667e3d":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}