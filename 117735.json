{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#benchmarkNodeLost().mjava","sourceNew":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setupCluster();\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    results.forEach(s -> log.info(s));\n  }\n\n","sourceOld":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setupCluster();\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    results.forEach(s -> log.info(s));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","sourceNew":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    results.forEach(s -> log.info(s));\n  }\n\n","sourceOld":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setupCluster();\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    results.forEach(s -> log.info(s));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","sourceNew":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    if (log.isInfoEnabled()) {\n      results.forEach(s -> log.info(s));\n    }\n  }\n\n","sourceOld":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    results.forEach(s -> log.info(s));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#benchmarkNodeLost().mjava","sourceNew":null,"sourceOld":"  //@Test\n  public void benchmarkNodeLost() throws Exception {\n    List<String> results = new ArrayList<>();\n    for (int wait : renard5x) {\n      for (int delay : renard5x) {\n        SummaryStatistics totalTime = new SummaryStatistics();\n        SummaryStatistics ignoredOurEvents = new SummaryStatistics();\n        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();\n        SummaryStatistics startedOurEvents = new SummaryStatistics();\n        SummaryStatistics startedOtherEvents = new SummaryStatistics();\n        for (int i = 0; i < 5; i++) {\n          if (cluster != null) {\n            cluster.close();\n          }\n          setUp();\n          setupTest();\n          long total = doTestNodeLost(wait, delay * 1000, 0);\n          totalTime.addValue(total);\n          // get event counts\n          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();\n          Map<String, AtomicInteger> map = counts.remove(\"node_lost_trigger\");\n          startedOurEvents.addValue(map.getOrDefault(\"STARTED\", ZERO).get());\n          ignoredOurEvents.addValue(map.getOrDefault(\"IGNORED\", ZERO).get());\n          int otherStarted = 0;\n          int otherIgnored = 0;\n          for (Map<String, AtomicInteger> m : counts.values()) {\n            otherStarted += m.getOrDefault(\"STARTED\", ZERO).get();\n            otherIgnored += m.getOrDefault(\"IGNORED\", ZERO).get();\n          }\n          startedOtherEvents.addValue(otherStarted);\n          ignoredOtherEvents.addValue(otherIgnored);\n        }\n        results.add(String.format(Locale.ROOT, \"%d\\t%d\\t%4.0f\\t%4.0f\\t%4.0f\\t%4.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\\t%6.0f\",\n            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),\n            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),\n            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));\n      }\n    }\n    log.info(\"===== RESULTS ======\");\n    log.info(\"waitFor\\tdelay\\tSTRT\\tIGN\\toSTRT\\toIGN\\tmin\\tmax\\tmean\\tstdev\\tvar\");\n    if (log.isInfoEnabled()) {\n      results.forEach(s -> log.info(s));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["967a6347853ee35b432c965743a902d42f24e697"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["967a6347853ee35b432c965743a902d42f24e697"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}