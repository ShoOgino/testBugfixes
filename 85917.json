{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":null,"sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}