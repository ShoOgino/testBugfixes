{"path":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff981809447a8d1a2638507b11c6e6a944bf0f2b","date":1347105584,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16352a5354766214a2b62fe2ead0551e68aad9cc","date":1347106607,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedExveption\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"682ad99732dde07d803679569727049becfbc16a","date":1347107736,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(TestUtil.createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(TestUtil.createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInput slicer = mmapDir.openInput(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.slice(\"first int\", 0, 4);\n    IndexInput two = slicer.slice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInput slicer = mmapDir.openInput(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.slice(\"first int\", 0, 4);\n    IndexInput two = slicer.slice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInputSlicer slicer = mmapDir.createSlicer(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.openSlice(\"first int\", 0, 4);\n    IndexInput two = slicer.openSlice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testCloneSliceSafety().mjava","sourceNew":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInput slicer = mmapDir.openInput(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.slice(\"first int\", 0, 4);\n    IndexInput two = slicer.slice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    expectThrows(AlreadyClosedException.class, () -> {\n      one.readInt();\n    });\n    expectThrows(AlreadyClosedException.class, () -> {\n      two.readInt();\n    });\n    expectThrows(AlreadyClosedException.class, () -> {\n      three.readInt();\n    });\n    expectThrows(AlreadyClosedException.class, () -> {\n      four.readInt();\n    });\n\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","sourceOld":"  public void testCloneSliceSafety() throws Exception {\n    MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testCloneSliceSafety\"));\n    IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n    io.writeInt(1);\n    io.writeInt(2);\n    io.close();\n    IndexInput slicer = mmapDir.openInput(\"bytes\", newIOContext(random()));\n    IndexInput one = slicer.slice(\"first int\", 0, 4);\n    IndexInput two = slicer.slice(\"second int\", 4, 4);\n    IndexInput three = one.clone(); // clone of clone\n    IndexInput four = two.clone(); // clone of clone\n    slicer.close();\n    try {\n      one.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      two.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      three.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    try {\n      four.readInt();\n      fail(\"Must throw AlreadyClosedException\");\n    } catch (AlreadyClosedException ignore) {\n      // pass\n    }\n    one.close();\n    two.close();\n    three.close();\n    four.close();\n    // test double-close of slicer:\n    slicer.close();\n    mmapDir.close();\n  }\n\n","bugFix":["16352a5354766214a2b62fe2ead0551e68aad9cc","4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16352a5354766214a2b62fe2ead0551e68aad9cc":["ff981809447a8d1a2638507b11c6e6a944bf0f2b"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["682ad99732dde07d803679569727049becfbc16a"],"05fe562aa248790944d43cdd478f512572835ba0":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"56572ec06f1407c066d6b7399413178b33176cd8":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"ff981809447a8d1a2638507b11c6e6a944bf0f2b":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"682ad99732dde07d803679569727049becfbc16a":["16352a5354766214a2b62fe2ead0551e68aad9cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"16352a5354766214a2b62fe2ead0551e68aad9cc":["682ad99732dde07d803679569727049becfbc16a"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["ff981809447a8d1a2638507b11c6e6a944bf0f2b"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["56572ec06f1407c066d6b7399413178b33176cd8","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ff981809447a8d1a2638507b11c6e6a944bf0f2b":["16352a5354766214a2b62fe2ead0551e68aad9cc"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["05fe562aa248790944d43cdd478f512572835ba0","56572ec06f1407c066d6b7399413178b33176cd8"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"682ad99732dde07d803679569727049becfbc16a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}