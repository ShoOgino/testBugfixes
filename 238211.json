{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","commits":[{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d528fd7ae22865015b756e0a03832e2051de2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}