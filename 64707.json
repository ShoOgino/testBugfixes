{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","commits":[{"id":"af8334dcf26521da965e339ff1096e0e7bcdd8c6","date":1504885366,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doProcessSearchByIds(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    String ids = params.get(ShardParams.IDS);\n    if (ids == null) {\n      return false;\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    SchemaField idField = schema.getUniqueKeyField();\n    List<String> idArr = StrUtils.splitSmart(ids, \",\", true);\n    int[] luceneIds = new int[idArr.size()];\n    int docs = 0;\n    if (idField.getType().isPointField()) {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.search(\n            idField.getType().getFieldQuery(null, idField, idArr.get(i)), 1).scoreDocs[0].doc;\n        if (id >= 0) {\n          luceneIds[docs++] = id;\n        }\n      }\n    } else {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.getFirstMatch(\n            new Term(idField.getName(), idField.getType().toInternal(idArr.get(i))));\n        if (id >= 0)\n          luceneIds[docs++] = id;\n      }\n    }\n\n    DocListAndSet res = new DocListAndSet();\n    res.docList = new DocSlice(0, docs, luceneIds, null, docs, 0);\n    if (rb.isNeedDocSet()) {\n      // TODO: create a cache for this!\n      List<Query> queries = new ArrayList<>();\n      queries.add(rb.getQuery());\n      List<Query> filters = rb.getFilters();\n      if (filters != null) queries.addAll(filters);\n      res.docSet = searcher.getDocSet(queries);\n    }\n    rb.setResults(res);\n\n    ResultContext ctx = new BasicResultContext(rb);\n    rsp.addResponse(ctx);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd68c90c39731aaa564d6995e5dd4a4c2388e13e","date":1504887539,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doProcessSearchByIds(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    String ids = params.get(ShardParams.IDS);\n    if (ids == null) {\n      return false;\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    SchemaField idField = schema.getUniqueKeyField();\n    List<String> idArr = StrUtils.splitSmart(ids, \",\", true);\n    int[] luceneIds = new int[idArr.size()];\n    int docs = 0;\n    if (idField.getType().isPointField()) {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.search(\n            idField.getType().getFieldQuery(null, idField, idArr.get(i)), 1).scoreDocs[0].doc;\n        if (id >= 0) {\n          luceneIds[docs++] = id;\n        }\n      }\n    } else {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.getFirstMatch(\n            new Term(idField.getName(), idField.getType().toInternal(idArr.get(i))));\n        if (id >= 0)\n          luceneIds[docs++] = id;\n      }\n    }\n\n    DocListAndSet res = new DocListAndSet();\n    res.docList = new DocSlice(0, docs, luceneIds, null, docs, 0);\n    if (rb.isNeedDocSet()) {\n      // TODO: create a cache for this!\n      List<Query> queries = new ArrayList<>();\n      queries.add(rb.getQuery());\n      List<Query> filters = rb.getFilters();\n      if (filters != null) queries.addAll(filters);\n      res.docSet = searcher.getDocSet(queries);\n    }\n    rb.setResults(res);\n\n    ResultContext ctx = new BasicResultContext(rb);\n    rsp.addResponse(ctx);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doProcessSearchByIds(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    String ids = params.get(ShardParams.IDS);\n    if (ids == null) {\n      return false;\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    SchemaField idField = schema.getUniqueKeyField();\n    List<String> idArr = StrUtils.splitSmart(ids, \",\", true);\n    int[] luceneIds = new int[idArr.size()];\n    int docs = 0;\n    if (idField.getType().isPointField()) {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.search(\n            idField.getType().getFieldQuery(null, idField, idArr.get(i)), 1).scoreDocs[0].doc;\n        if (id >= 0) {\n          luceneIds[docs++] = id;\n        }\n      }\n    } else {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.getFirstMatch(\n            new Term(idField.getName(), idField.getType().toInternal(idArr.get(i))));\n        if (id >= 0)\n          luceneIds[docs++] = id;\n      }\n    }\n\n    DocListAndSet res = new DocListAndSet();\n    res.docList = new DocSlice(0, docs, luceneIds, null, docs, 0);\n    if (rb.isNeedDocSet()) {\n      // TODO: create a cache for this!\n      List<Query> queries = new ArrayList<>();\n      queries.add(rb.getQuery());\n      List<Query> filters = rb.getFilters();\n      if (filters != null) queries.addAll(filters);\n      res.docSet = searcher.getDocSet(queries);\n    }\n    rb.setResults(res);\n\n    ResultContext ctx = new BasicResultContext(rb);\n    rsp.addResponse(ctx);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessSearchByIds(ResponseBuilder).mjava","sourceNew":"  private boolean doProcessSearchByIds(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    String ids = params.get(ShardParams.IDS);\n    if (ids == null) {\n      return false;\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    SchemaField idField = schema.getUniqueKeyField();\n    List<String> idArr = StrUtils.splitSmart(ids, \",\", true);\n    int[] luceneIds = new int[idArr.size()];\n    int docs = 0;\n    if (idField.getType().isPointField()) {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.search(\n            idField.getType().getFieldQuery(null, idField, idArr.get(i)), 1).scoreDocs[0].doc;\n        if (id >= 0) {\n          luceneIds[docs++] = id;\n        }\n      }\n    } else {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.getFirstMatch(\n            new Term(idField.getName(), idField.getType().toInternal(idArr.get(i))));\n        if (id >= 0)\n          luceneIds[docs++] = id;\n      }\n    }\n\n    DocListAndSet res = new DocListAndSet();\n    res.docList = new DocSlice(0, docs, luceneIds, null, docs, 0, TotalHits.Relation.EQUAL_TO);\n    if (rb.isNeedDocSet()) {\n      // TODO: create a cache for this!\n      List<Query> queries = new ArrayList<>();\n      queries.add(rb.getQuery());\n      List<Query> filters = rb.getFilters();\n      if (filters != null) queries.addAll(filters);\n      res.docSet = searcher.getDocSet(queries);\n    }\n    rb.setResults(res);\n\n    ResultContext ctx = new BasicResultContext(rb);\n    rsp.addResponse(ctx);\n    return true;\n  }\n\n","sourceOld":"  private boolean doProcessSearchByIds(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    String ids = params.get(ShardParams.IDS);\n    if (ids == null) {\n      return false;\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n    SchemaField idField = schema.getUniqueKeyField();\n    List<String> idArr = StrUtils.splitSmart(ids, \",\", true);\n    int[] luceneIds = new int[idArr.size()];\n    int docs = 0;\n    if (idField.getType().isPointField()) {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.search(\n            idField.getType().getFieldQuery(null, idField, idArr.get(i)), 1).scoreDocs[0].doc;\n        if (id >= 0) {\n          luceneIds[docs++] = id;\n        }\n      }\n    } else {\n      for (int i=0; i<idArr.size(); i++) {\n        int id = searcher.getFirstMatch(\n            new Term(idField.getName(), idField.getType().toInternal(idArr.get(i))));\n        if (id >= 0)\n          luceneIds[docs++] = id;\n      }\n    }\n\n    DocListAndSet res = new DocListAndSet();\n    res.docList = new DocSlice(0, docs, luceneIds, null, docs, 0);\n    if (rb.isNeedDocSet()) {\n      // TODO: create a cache for this!\n      List<Query> queries = new ArrayList<>();\n      queries.add(rb.getQuery());\n      List<Query> filters = rb.getFilters();\n      if (filters != null) queries.addAll(filters);\n      res.docSet = searcher.getDocSet(queries);\n    }\n    rb.setResults(res);\n\n    ResultContext ctx = new BasicResultContext(rb);\n    rsp.addResponse(ctx);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af8334dcf26521da965e339ff1096e0e7bcdd8c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af8334dcf26521da965e339ff1096e0e7bcdd8c6","685bd38810c206c93e9058f3c2cfa9827c086c27","dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["685bd38810c206c93e9058f3c2cfa9827c086c27","640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}