{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  /** Returns null if it's borderline case */\n  protected abstract Boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon);\n\n","sourceOld":"  /** Returns null if it's borderline case */\n  protected abstract Boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  /** Returns null if it's borderline case */\n  protected abstract Boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon);\n\n","sourceOld":"  /** Returns null if it's borderline case */\n  protected abstract Boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  static final boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    // TODO write better random polygon tests\n    \n    // note: logic must be slightly different than rectContainsPoint, to satisfy\n    // insideness for cases exactly on boundaries.\n    \n    assert Double.isNaN(pointLat) == false;\n    assert rect.crossesDateline() == false;\n    double polyLats[] = new double[] { rect.minLat, rect.maxLat, rect.maxLat, rect.minLat, rect.minLat };\n    double polyLons[] = new double[] { rect.minLon, rect.minLon, rect.maxLon, rect.maxLon, rect.minLon };\n\n    // TODO: separately test this method is 100% correct, here treat it like a black box (like haversin)\n    return GeoRelationUtils.pointInPolygon(polyLats, polyLons, pointLat, pointLon);\n  }\n\n","sourceOld":"  /** Returns null if it's borderline case */\n  protected abstract Boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae4376ac9dc30118cb178489db6519070ba5bb","date":1459106837,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#polyRectContainsPoint(GeoRect,double,double).mjava","sourceNew":null,"sourceOld":"  static final boolean polyRectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    // TODO write better random polygon tests\n    \n    // note: logic must be slightly different than rectContainsPoint, to satisfy\n    // insideness for cases exactly on boundaries.\n    \n    assert Double.isNaN(pointLat) == false;\n    assert rect.crossesDateline() == false;\n    double polyLats[] = new double[] { rect.minLat, rect.maxLat, rect.maxLat, rect.minLat, rect.minLat };\n    double polyLons[] = new double[] { rect.minLon, rect.minLon, rect.maxLon, rect.maxLon, rect.minLon };\n\n    // TODO: separately test this method is 100% correct, here treat it like a black box (like haversin)\n    return GeoRelationUtils.pointInPolygon(polyLats, polyLons, pointLat, pointLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"53ae4376ac9dc30118cb178489db6519070ba5bb":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53ae4376ac9dc30118cb178489db6519070ba5bb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"53ae4376ac9dc30118cb178489db6519070ba5bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["53ae4376ac9dc30118cb178489db6519070ba5bb"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}