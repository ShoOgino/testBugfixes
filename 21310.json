{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","commits":[{"id":"284866683716f2dec31be6489f8f5d2432074d14","date":1431005603,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d757ce39e75479053df1fc9641acbe360e28376","date":1431020684,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c771b7f862d3df7cfa7208b4f79ac658406d6d15","date":1431023495,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e096dd0a4f62652c91292a2bfba8f08c4cdba94","date":1465245662,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n    Files.delete(tmpdir.toPath());\n    tmpdir.mkdir();\n    byte[] content = \"secret\".getBytes(StandardCharsets.UTF_8);\n    createFile(tmpdir, \"enckeyfile.txt\", content, false);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", new File(tmpdir, \"enckeyfile.txt\").getAbsolutePath());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0957b9b8725b7ad93845495d2512df18cd240731","date":1482658887,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    \n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n    \n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    \n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n    \n    EasyMock.expect(dataSource.getConnection(user, plainPassword)).andReturn(\n             connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n    \n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    //connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d757ce39e75479053df1fc9641acbe360e28376":["284866683716f2dec31be6489f8f5d2432074d14"],"284866683716f2dec31be6489f8f5d2432074d14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"191128ac5b85671b1671e2c857437694283b6ebf":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","2e096dd0a4f62652c91292a2bfba8f08c4cdba94"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["9d757ce39e75479053df1fc9641acbe360e28376"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0957b9b8725b7ad93845495d2512df18cd240731"],"0957b9b8725b7ad93845495d2512df18cd240731":["191128ac5b85671b1671e2c857437694283b6ebf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"]},"commit2Childs":{"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284866683716f2dec31be6489f8f5d2432074d14"],"9d757ce39e75479053df1fc9641acbe360e28376":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"284866683716f2dec31be6489f8f5d2432074d14":["9d757ce39e75479053df1fc9641acbe360e28376"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["2e096dd0a4f62652c91292a2bfba8f08c4cdba94","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0957b9b8725b7ad93845495d2512df18cd240731":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}