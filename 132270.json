{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"101117eb159dcdbcaa90405b08170aab248e5b2c","date":1289816139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new TermRangeQuery(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"101117eb159dcdbcaa90405b08170aab248e5b2c":["33a8b1f99104f4144f210f5d068411c297cd7163"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","101117eb159dcdbcaa90405b08170aab248e5b2c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["101117eb159dcdbcaa90405b08170aab248e5b2c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","101117eb159dcdbcaa90405b08170aab248e5b2c"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["101117eb159dcdbcaa90405b08170aab248e5b2c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"101117eb159dcdbcaa90405b08170aab248e5b2c":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e492fb0f2bb0b4b47208286f9331ff55963c656","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33a8b1f99104f4144f210f5d068411c297cd7163","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}