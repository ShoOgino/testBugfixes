{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(FacetLabel,CharBlockArray,int).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(FacetLabel,CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","sourceNew":"  /**\n   * Check whether the {@link FacetLabel} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(FacetLabel cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CategoryPathUtils#equalsToSerialized(FacetLabel,CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(FacetLabel,CharBlockArray,int).mjava","sourceNew":"  /**\n   * Check whether the {@link FacetLabel} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(FacetLabel cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Check whether the {@link FacetLabel} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(FacetLabel cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}