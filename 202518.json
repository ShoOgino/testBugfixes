{"path":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":null,"sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b31138e7b06f84b96de212b2102103cb629ee68"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["9b31138e7b06f84b96de212b2102103cb629ee68"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}