{"path":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a softCommit does not affect what data is in a backup\n   */\n  public void testBackupAfterSoftCommit() throws Exception {\n\n    // sanity check empty index...\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    // hard commit one doc...\n    assertU(adoc(\"id\", \"99\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    \n    final IndexCommit oneDocCommit = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(oneDocCommit);\n    final String oneDocSegmentFile = oneDocCommit.getSegmentsFileName();\n  \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    \n    final File backupDir = createTempDir().toFile();\n    \n    \n    { // take an initial 'backup1a' containing our 1 document\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1a\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1a\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and an initial \"snapshot1a' that should eventually match\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1a\"),\n         resp);\n      assertNull(\"Snapshot 1A should have succeeded\", resp.getException());\n    }\n\n    // now we add our 2nd doc, and make it searchable, but we do *NOT* hard commit it to the index dir...\n    assertU(adoc(\"id\", \"42\"));\n    assertU(commit(\"softCommit\", \"true\", \"openSearcher\", \"true\"));\n    \n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='2']\");\n\n    \n    { // we now have an index with two searchable docs, but a new 'backup1b' should still\n      // be identical to the previous backup...\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1b\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1b\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and a second \"snapshot1b' should also still be identical\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1b\"),\n         resp);\n      assertNull(\"Snapshot 1B should have succeeded\", resp.getException());\n    }\n\n    // Hard Committing the 2nd doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n\n    for (String name : Arrays.asList(\"backup1a\", \"backup1b\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // But we should be able to confirm both docs appear in a new backup (not based on a previous snapshot)\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup2\"), 2);\n    }\n\n    // if we go back and create backups from our earlier snapshots they should still only\n    // have 1 expected doc...\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"snapshot1a\", \"snapshot1b\")) {\n      String name = \"backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        1, oneDocSegmentFile);\n      \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","sourceNew":"  /**\n   * Tests that a softCommit does not affect what data is in a backup\n   */\n  public void testBackupAfterSoftCommit() throws Exception {\n\n    // sanity check empty index...\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    // hard commit one doc...\n    assertU(adoc(\"id\", \"99\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    \n    final IndexCommit oneDocCommit = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(oneDocCommit);\n    final String oneDocSegmentFile = oneDocCommit.getSegmentsFileName();\n  \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    \n    final File backupDir = createTempDir().toFile();\n    \n    \n    { // take an initial 'backup1a' containing our 1 document\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1a\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1a\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and an initial \"snapshot1a' that should eventually match\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1a\"),\n         resp);\n      assertNull(\"Snapshot 1A should have succeeded\", resp.getException());\n    }\n\n    // now we add our 2nd doc, and make it searchable, but we do *NOT* hard commit it to the index dir...\n    assertU(adoc(\"id\", \"42\"));\n    assertU(commit(\"softCommit\", \"true\", \"openSearcher\", \"true\"));\n    \n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='2']\");\n\n    \n    { // we now have an index with two searchable docs, but a new 'backup1b' should still\n      // be identical to the previous backup...\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1b\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1b\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and a second \"snapshot1b' should also still be identical\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1b\"),\n         resp);\n      assertNull(\"Snapshot 1B should have succeeded\", resp.getException());\n    }\n\n    // Hard Committing the 2nd doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n\n    for (String name : Arrays.asList(\"backup1a\", \"backup1b\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // But we should be able to confirm both docs appear in a new backup (not based on a previous snapshot)\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup2\"), 2);\n    }\n\n    // if we go back and create backups from our earlier snapshots they should still only\n    // have 1 expected doc...\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"snapshot1a\", \"snapshot1b\")) {\n      String name = \"backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        1, oneDocSegmentFile);\n      \n    }\n    admin.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that a softCommit does not affect what data is in a backup\n   */\n  public void testBackupAfterSoftCommit() throws Exception {\n\n    // sanity check empty index...\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    // hard commit one doc...\n    assertU(adoc(\"id\", \"99\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    \n    final IndexCommit oneDocCommit = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(oneDocCommit);\n    final String oneDocSegmentFile = oneDocCommit.getSegmentsFileName();\n  \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    \n    final File backupDir = createTempDir().toFile();\n    \n    \n    { // take an initial 'backup1a' containing our 1 document\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1a\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1a\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and an initial \"snapshot1a' that should eventually match\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1a\"),\n         resp);\n      assertNull(\"Snapshot 1A should have succeeded\", resp.getException());\n    }\n\n    // now we add our 2nd doc, and make it searchable, but we do *NOT* hard commit it to the index dir...\n    assertU(adoc(\"id\", \"42\"));\n    assertU(commit(\"softCommit\", \"true\", \"openSearcher\", \"true\"));\n    \n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='2']\");\n\n    \n    { // we now have an index with two searchable docs, but a new 'backup1b' should still\n      // be identical to the previous backup...\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1b\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1b\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and a second \"snapshot1b' should also still be identical\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1b\"),\n         resp);\n      assertNull(\"Snapshot 1B should have succeeded\", resp.getException());\n    }\n\n    // Hard Committing the 2nd doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n\n    for (String name : Arrays.asList(\"backup1a\", \"backup1b\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // But we should be able to confirm both docs appear in a new backup (not based on a previous snapshot)\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup2\"), 2);\n    }\n\n    // if we go back and create backups from our earlier snapshots they should still only\n    // have 1 expected doc...\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"snapshot1a\", \"snapshot1b\")) {\n      String name = \"backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        1, oneDocSegmentFile);\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupAfterSoftCommit().mjava","sourceNew":"  /**\n   * Tests that a softCommit does not affect what data is in a backup\n   */\n  public void testBackupAfterSoftCommit() throws Exception {\n\n    // sanity check empty index...\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    // hard commit one doc...\n    assertU(adoc(\"id\", \"99\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    \n    final IndexCommit oneDocCommit = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(oneDocCommit);\n    final String oneDocSegmentFile = oneDocCommit.getSegmentsFileName();\n  \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    \n    final File backupDir = createTempDir().toFile();\n    cores.getAllowPaths().add(backupDir.toPath());\n\n\n    { // take an initial 'backup1a' containing our 1 document\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1a\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1a\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and an initial \"snapshot1a' that should eventually match\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1a\"),\n         resp);\n      assertNull(\"Snapshot 1A should have succeeded\", resp.getException());\n    }\n\n    // now we add our 2nd doc, and make it searchable, but we do *NOT* hard commit it to the index dir...\n    assertU(adoc(\"id\", \"42\"));\n    assertU(commit(\"softCommit\", \"true\", \"openSearcher\", \"true\"));\n    \n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='2']\");\n\n    \n    { // we now have an index with two searchable docs, but a new 'backup1b' should still\n      // be identical to the previous backup...\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1b\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1b\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and a second \"snapshot1b' should also still be identical\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1b\"),\n         resp);\n      assertNull(\"Snapshot 1B should have succeeded\", resp.getException());\n    }\n\n    // Hard Committing the 2nd doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n\n    for (String name : Arrays.asList(\"backup1a\", \"backup1b\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // But we should be able to confirm both docs appear in a new backup (not based on a previous snapshot)\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup2\"), 2);\n    }\n\n    // if we go back and create backups from our earlier snapshots they should still only\n    // have 1 expected doc...\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"snapshot1a\", \"snapshot1b\")) {\n      String name = \"backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        1, oneDocSegmentFile);\n      \n    }\n    admin.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that a softCommit does not affect what data is in a backup\n   */\n  public void testBackupAfterSoftCommit() throws Exception {\n\n    // sanity check empty index...\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='0']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='0']\");\n\n    // hard commit one doc...\n    assertU(adoc(\"id\", \"99\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    \n    final IndexCommit oneDocCommit = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(oneDocCommit);\n    final String oneDocSegmentFile = oneDocCommit.getSegmentsFileName();\n  \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    \n    final File backupDir = createTempDir().toFile();\n    \n    \n    { // take an initial 'backup1a' containing our 1 document\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1a\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1a\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and an initial \"snapshot1a' that should eventually match\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1a\"),\n         resp);\n      assertNull(\"Snapshot 1A should have succeeded\", resp.getException());\n    }\n\n    // now we add our 2nd doc, and make it searchable, but we do *NOT* hard commit it to the index dir...\n    assertU(adoc(\"id\", \"42\"));\n    assertU(commit(\"softCommit\", \"true\", \"openSearcher\", \"true\"));\n    \n    assertQ(req(\"q\", \"id:99\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:42\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='2']\");\n\n    \n    { // we now have an index with two searchable docs, but a new 'backup1b' should still\n      // be identical to the previous backup...\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup1b\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup1b\"),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // and a second \"snapshot1b' should also still be identical\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"snapshot1b\"),\n         resp);\n      assertNull(\"Snapshot 1B should have succeeded\", resp.getException());\n    }\n\n    // Hard Committing the 2nd doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n\n    for (String name : Arrays.asList(\"backup1a\", \"backup1b\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        1, oneDocSegmentFile);\n    }\n    \n    { // But we should be able to confirm both docs appear in a new backup (not based on a previous snapshot)\n      final SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.backup2\"), 2);\n    }\n\n    // if we go back and create backups from our earlier snapshots they should still only\n    // have 1 expected doc...\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"snapshot1a\", \"snapshot1b\")) {\n      String name = \"backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        1, oneDocSegmentFile);\n      \n    }\n    admin.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["19f02bb04467ed179738a398a7da80bbbe161c16"],"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba055e19afc289adcb5bedaf68513793a7254012":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}