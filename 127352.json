{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall(String).mjava","commits":[{"id":"c1c1ca1e9ab1271a360852c85d18bcb52157d087","date":1445615344,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * calculate recall on the given class\n     *\n     * @param klass the class to calculate the recall for\n     * @return the recall for the given class\n     */\n    public double getRecall(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n        if (klass.equals(entry.getKey())) {\n          tp += entry.getValue();\n        } else {\n          fn += entry.getValue();\n        }\n      }\n      return tp / (tp + fn);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dce777c41006be1f71018e7565152f6dbc67140","date":1445869278,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall(String).mjava","sourceNew":"    /**\n     * calculate recall on the given class\n     *\n     * @param klass the class to calculate the recall for\n     * @return the recall for the given class\n     */\n    public double getRecall(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fn = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          } else {\n            fn += entry.getValue();\n          }\n        }\n      }\n      return tp + fn > 0 ? tp / (tp + fn) : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate recall on the given class\n     *\n     * @param klass the class to calculate the recall for\n     * @return the recall for the given class\n     */\n    public double getRecall(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n        if (klass.equals(entry.getKey())) {\n          tp += entry.getValue();\n        } else {\n          fn += entry.getValue();\n        }\n      }\n      return tp / (tp + fn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dce777c41006be1f71018e7565152f6dbc67140":["c1c1ca1e9ab1271a360852c85d18bcb52157d087"],"c1c1ca1e9ab1271a360852c85d18bcb52157d087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dce777c41006be1f71018e7565152f6dbc67140"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1c1ca1e9ab1271a360852c85d18bcb52157d087"],"9dce777c41006be1f71018e7565152f6dbc67140":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c1ca1e9ab1271a360852c85d18bcb52157d087":["9dce777c41006be1f71018e7565152f6dbc67140"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}