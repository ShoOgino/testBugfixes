{"path":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","commits":[{"id":"6fdc35812ba3a566ec91032d28da131ae8dc601c","date":1272905807,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Lucene default index order. Currently the same as String.compareTo() (UTF16) but will change\n   * in the future to unsigned byte comparison. */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      if (aByte != bByte) {\n\n        // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n        // We know the terms are not equal, but, we may\n        // have to carefully fixup the bytes at the\n        // difference to match UTF16's sort order:\n        if (aByte >= 0xee && bByte >= 0xee) {\n          if ((aByte & 0xfe) == 0xee) {\n            aByte += 0x10;\n          }\n          if ((bByte&0xfe) == 0xee) {\n            bByte += 0x10;\n          }\n        }\n        return aByte - bByte;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      int diff = aByte - bByte;\n      if (diff != 0) return diff;\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Lucene default index order. Currently the same as String.compareTo() (UTF16) but will change\n   * in the future to unsigned byte comparison. */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      if (aByte != bByte) {\n\n        // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n        // We know the terms are not equal, but, we may\n        // have to carefully fixup the bytes at the\n        // difference to match UTF16's sort order:\n        if (aByte >= 0xee && bByte >= 0xee) {\n          if ((aByte & 0xfe) == 0xee) {\n            aByte += 0x10;\n          }\n          if ((bByte&0xfe) == 0xee) {\n            bByte += 0x10;\n          }\n        }\n        return aByte - bByte;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      int diff = aByte - bByte;\n      if (diff != 0) return diff;\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Lucene default index order. Currently the same as String.compareTo() (UTF16) but will change\n   * in the future to unsigned byte comparison. */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      if (aByte != bByte) {\n\n        // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n        // We know the terms are not equal, but, we may\n        // have to carefully fixup the bytes at the\n        // difference to match UTF16's sort order:\n        if (aByte >= 0xee && bByte >= 0xee) {\n          if ((aByte & 0xfe) == 0xee) {\n            aByte += 0x10;\n          }\n          if ((bByte&0xfe) == 0xee) {\n            bByte += 0x10;\n          }\n        }\n        return aByte - bByte;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867c935d21f9b0e5740841f988a4919546dcb374","date":1322417002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    if (this == other) return 0;\n\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n      int diff = aByte - bByte;\n      if (diff != 0) return diff;\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"6fdc35812ba3a566ec91032d28da131ae8dc601c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["867c935d21f9b0e5740841f988a4919546dcb374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["6fdc35812ba3a566ec91032d28da131ae8dc601c","08932c793647a36953d1816b1060121f48820d3f"],"867c935d21f9b0e5740841f988a4919546dcb374":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","867c935d21f9b0e5740841f988a4919546dcb374"],"6fdc35812ba3a566ec91032d28da131ae8dc601c":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"867c935d21f9b0e5740841f988a4919546dcb374":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}