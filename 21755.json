{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link FunctionValues}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    FunctionValues v = (FunctionValues) context.get(\"scorer\");\n    if (v == null) {\n      throw new NullPointerException();\n    }\n    return v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link FunctionValues}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    FunctionValues v = (FunctionValues) context.get(\"scorer\");\n    if (v == null) {\n      throw new NullPointerException();\n    }\n    return v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","date":1379734663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link FunctionValues}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    FunctionValues v = (FunctionValues) context.get(\"scorer\");\n    if (v == null) {\n      throw new IllegalStateException(\"Expressions referencing the score can only be used for sorting\");\n    }\n    return v;\n  }\n\n","sourceOld":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link FunctionValues}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    FunctionValues v = (FunctionValues) context.get(\"scorer\");\n    if (v == null) {\n      throw new NullPointerException();\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link Scorer}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Scorer v = (Scorer) context.get(\"scorer\");\n    if (v == null) {\n      throw new IllegalStateException(\"Expressions referencing the score can only be used for sorting\");\n    }\n    return new ScoreFunctionValues(this, v);\n  }\n\n","sourceOld":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link FunctionValues}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    FunctionValues v = (FunctionValues) context.get(\"scorer\");\n    if (v == null) {\n      throw new IllegalStateException(\"Expressions referencing the score can only be used for sorting\");\n    }\n    return v;\n  }\n\n","bugFix":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * <code>context</code> must contain a key \"scorer\" which is a {@link Scorer}.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Scorer v = (Scorer) context.get(\"scorer\");\n    if (v == null) {\n      throw new IllegalStateException(\"Expressions referencing the score can only be used for sorting\");\n    }\n    return new ScoreFunctionValues(this, v);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f18d4e1cdc7330101ca433af5e8564dfd894f2bf"]},"commit2Childs":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}