{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#collectValFirstPhase(int,long).mjava","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","sourceOld":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot, slotNum -> {\n        Comparable value = calc.bitsToValue(val);\n        return new SlotContext(sf.getType().getFieldQuery(null, sf, calc.formatValue(value)));\n      });\n  }\n\n","sourceOld":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot);\n  }\n\n","bugFix":null,"bugIntro":["0ab6c824319a848552cc98a36ffa93885c15362e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ab6c824319a848552cc98a36ffa93885c15362e","date":1541099116,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectValFirstPhase(int,long).mjava","sourceNew":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot, slotContext);\n  }\n\n","sourceOld":"  private void collectValFirstPhase(int segDoc, long val) throws IOException {\n    int slot = table.add(val); // this can trigger a rehash\n\n    // Our countAcc is virtual, so this is not needed:\n    // countAcc.incrementCount(slot, 1);\n\n    super.collectFirstPhase(segDoc, slot, slotNum -> {\n        Comparable value = calc.bitsToValue(val);\n        return new SlotContext(sf.getType().getFieldQuery(null, sf, calc.formatValue(value)));\n      });\n  }\n\n","bugFix":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ab6c824319a848552cc98a36ffa93885c15362e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ab6c824319a848552cc98a36ffa93885c15362e"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["0ab6c824319a848552cc98a36ffa93885c15362e"],"602cca3f75af03832471d8324bbc5b977a02969c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"0ab6c824319a848552cc98a36ffa93885c15362e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2c705a0d590cf911e7c942df49563ca2ea176e22","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}