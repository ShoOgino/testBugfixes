{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","sourceNew":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}