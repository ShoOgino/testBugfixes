{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"270881512f74569f7bc71bfe95534b337d53a60b","date":1454112544,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertPointsEquals(info,\n                       MultiFields.getMergedFieldInfos(leftReader),\n                       MultiPointValues.get(leftReader),\n                       MultiFields.getMergedFieldInfos(rightReader),\n                       MultiPointValues.get(rightReader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertPointsEquals(info,\n                       MultiFields.getMergedFieldInfos(leftReader),\n                       MultiPointValues.get(leftReader),\n                       MultiFields.getMergedFieldInfos(rightReader),\n                       MultiPointValues.get(rightReader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertPointsEquals(info,\n                       MultiFields.getMergedFieldInfos(leftReader),\n                       MultiPointValues.get(leftReader),\n                       MultiFields.getMergedFieldInfos(rightReader),\n                       MultiPointValues.get(rightReader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo2.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo1.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","sourceOld":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertPointsEquals(info,\n                       MultiFields.getMergedFieldInfos(leftReader),\n                       MultiPointValues.get(leftReader),\n                       MultiFields.getMergedFieldInfos(rightReader),\n                       MultiPointValues.get(rightReader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo2.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo1.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","sourceOld":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertPointsEquals(info,\n                       MultiFields.getMergedFieldInfos(leftReader),\n                       MultiPointValues.get(leftReader),\n                       MultiFields.getMergedFieldInfos(rightReader),\n                       MultiPointValues.get(rightReader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo2.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo2.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo1.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo1.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","sourceOld":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo2.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo1.getPointDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo2.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo2.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo1.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo1.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","sourceOld":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo2.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo2.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo1.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo1.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPointsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo2.getPointDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo2.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDimensionCount(), fieldInfo1.getPointDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo1.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","sourceOld":"  public void assertPointsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(leftReader);\n    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(rightReader);\n    for(FieldInfo fieldInfo1 : fieldInfos1) {\n      if (fieldInfo1.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldInfo1.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo2.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo2.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo2.getPointNumBytes());\n\n        assertEquals(info + \" field=\" + fieldInfo1.name,\n                     uninvert(fieldInfo1.name, leftReader),\n                     uninvert(fieldInfo1.name, rightReader));\n      }\n    }\n\n    // make sure FieldInfos2 doesn't have any point fields that FieldInfo1 didn't have\n    for(FieldInfo fieldInfo2 : fieldInfos2) {\n      if (fieldInfo2.getPointDataDimensionCount() != 0) {\n        FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldInfo2.name);\n        // same data dimension count?\n        assertEquals(info, fieldInfo2.getPointDataDimensionCount(), fieldInfo1.getPointDataDimensionCount());\n        // same index dimension count?\n        assertEquals(info, fieldInfo2.getPointIndexDimensionCount(), fieldInfo1.getPointIndexDimensionCount());\n        // same bytes per dimension?\n        assertEquals(info, fieldInfo2.getPointNumBytes(), fieldInfo1.getPointNumBytes());\n\n        // we don't need to uninvert and compare here ... we did that in the first loop above\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"f6652c943595e92c187ee904c382863013eae28f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"270881512f74569f7bc71bfe95534b337d53a60b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d15e34266d75e4e8b95da046cd0afc812367b38"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["f6652c943595e92c187ee904c382863013eae28f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["8d15e34266d75e4e8b95da046cd0afc812367b38","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","270881512f74569f7bc71bfe95534b337d53a60b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"270881512f74569f7bc71bfe95534b337d53a60b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["270881512f74569f7bc71bfe95534b337d53a60b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["f6652c943595e92c187ee904c382863013eae28f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}