{"path":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","commits":[{"id":"55a2827d0d71109587ffe968ce8689de25394314","date":1565098388,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","pathOld":"/dev/null","sourceNew":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class, withSettings().defaultAnswer(InvocationOnMock::callRealMethod));\n    zkStatusHandler.validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n        \"zoo1:2181\", \"mntr\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13597a6e284cc0abfb7d1a40181acb867448cdb1","date":1565098761,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","sourceNew":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    new ZookeeperStatusHandler(null).validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n        \"zoo1:2181\", \"mntr\");\n  }\n\n","sourceOld":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class, withSettings().defaultAnswer(InvocationOnMock::callRealMethod));\n    zkStatusHandler.validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n        \"zoo1:2181\", \"mntr\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":0,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","pathOld":"/dev/null","sourceNew":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    new ZookeeperStatusHandler(null).validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n        \"zoo1:2181\", \"mntr\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#validateNotWhitelisted().mjava","sourceNew":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    try (ZookeeperStatusHandler zsh = new ZookeeperStatusHandler(null)) {\n     zsh.validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n          \"zoo1:2181\", \"mntr\");\n    }  catch (IOException e) {\n      fail(\"Error closing ZookeeperStatusHandler\");\n    }\n  }\n\n","sourceOld":"  @Test(expected = SolrException.class)\n  public void validateNotWhitelisted() {\n    new ZookeeperStatusHandler(null).validateZkRawResponse(Collections.singletonList(\"mntr is not executed because it is not in the whitelist.\"),\n        \"zoo1:2181\", \"mntr\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13597a6e284cc0abfb7d1a40181acb867448cdb1":["55a2827d0d71109587ffe968ce8689de25394314"],"ba055e19afc289adcb5bedaf68513793a7254012":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","13597a6e284cc0abfb7d1a40181acb867448cdb1"],"55a2827d0d71109587ffe968ce8689de25394314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"13597a6e284cc0abfb7d1a40181acb867448cdb1":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["ba055e19afc289adcb5bedaf68513793a7254012"],"55a2827d0d71109587ffe968ce8689de25394314":["13597a6e284cc0abfb7d1a40181acb867448cdb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f5c7f5182346fe6abaab42f901d3728750aa0bc","55a2827d0d71109587ffe968ce8689de25394314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}