{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedDeletes freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(\n          globalBufferedDeletes, false);\n      globalBufferedDeletes.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedDeletes freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(\n          globalBufferedDeletes, false);\n      globalBufferedDeletes.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(\n          globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedDeletes freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(\n          globalBufferedDeletes, false);\n      globalBufferedDeletes.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(\n          globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(\n          globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(\n          globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n//      System.out.println(Thread.currentThread().getName() + \": now freeze global buffer \" + globalBufferedDeletes);\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(\n          globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) throws IOException {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      if (globalBufferedUpdates.any()) {\n        final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(infoStream, globalBufferedUpdates, null);\n        globalBufferedUpdates.clear();\n        return packet;\n      } else {\n        return null;\n      }\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) throws IOException {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      if (globalBufferedUpdates.any()) {\n        final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(infoStream, globalBufferedUpdates, null);\n        globalBufferedUpdates.clear();\n        return packet;\n      } else {\n        return null;\n      }\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) throws IOException {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      if (globalBufferedUpdates.any()) {\n        final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(infoStream, globalBufferedUpdates, null);\n        globalBufferedUpdates.clear();\n        return packet;\n      } else {\n        return null;\n      }\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(globalBufferedUpdates, false);\n      globalBufferedUpdates.clear();\n      return packet;\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    try {\n      ensureOpen();\n      /*\n       * Here we freeze the global buffer so we need to lock it, apply all\n       * deletes in the queue and reset the global slice to let the GC prune the\n       * queue.\n       */\n      final Node<?> currentTail = tail; // take the current tail make this local any\n      // Changes after this call are applied later\n      // and not relevant here\n      if (callerSlice != null) {\n        // Update the callers slices so we are on the same page\n        callerSlice.sliceTail = currentTail;\n      }\n      return freezeGlobalBufferInternal(currentTail);\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) throws IOException {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      if (globalBufferedUpdates.any()) {\n        final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(infoStream, globalBufferedUpdates, null);\n        globalBufferedUpdates.clear();\n        return packet;\n      } else {\n        return null;\n      }\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#freezeGlobalBuffer(DeleteSlice).mjava","sourceNew":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) {\n    globalBufferLock.lock();\n    try {\n      ensureOpen();\n      /*\n       * Here we freeze the global buffer so we need to lock it, apply all\n       * deletes in the queue and reset the global slice to let the GC prune the\n       * queue.\n       */\n      final Node<?> currentTail = tail; // take the current tail make this local any\n      // Changes after this call are applied later\n      // and not relevant here\n      if (callerSlice != null) {\n        // Update the callers slices so we are on the same page\n        callerSlice.sliceTail = currentTail;\n      }\n      return freezeGlobalBufferInternal(currentTail);\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","sourceOld":"  FrozenBufferedUpdates freezeGlobalBuffer(DeleteSlice callerSlice) throws IOException {\n    globalBufferLock.lock();\n    /*\n     * Here we freeze the global buffer so we need to lock it, apply all\n     * deletes in the queue and reset the global slice to let the GC prune the\n     * queue.\n     */\n    final Node<?> currentTail = tail; // take the current tail make this local any\n    // Changes after this call are applied later\n    // and not relevant here\n    if (callerSlice != null) {\n      // Update the callers slices so we are on the same page\n      callerSlice.sliceTail = currentTail;\n    }\n    try {\n      if (globalSlice.sliceTail != currentTail) {\n        globalSlice.sliceTail = currentTail;\n        globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n      }\n\n      if (globalBufferedUpdates.any()) {\n        final FrozenBufferedUpdates packet = new FrozenBufferedUpdates(infoStream, globalBufferedUpdates, null);\n        globalBufferedUpdates.clear();\n        return packet;\n      } else {\n        return null;\n      }\n    } finally {\n      globalBufferLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["191128ac5b85671b1671e2c857437694283b6ebf"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["28288370235ed02234a64753cdbf0c6ec096304a","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"6483e4260c08168709c02238ae083a51519a28dd":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","6483e4260c08168709c02238ae083a51519a28dd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["f492fe129985750df09c8dac738aecc503158bb3","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"28288370235ed02234a64753cdbf0c6ec096304a":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["f492fe129985750df09c8dac738aecc503158bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}