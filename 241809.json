{"path":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(coreContainer.getZkController().getZkClient());\n      // Very basic sanity check (not checking class actually exists)\n      if (!placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replace them\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(coreContainer.getZkController().getZkClient());\n      // Very basic sanity check (not checking class actually exists)\n      if (!placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replace them\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84d8696c7083cb2327aebb0489ec57a33166bda4","date":1600347679,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(coreContainer.getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(coreContainer.getZkController().getZkClient());\n      // Very basic sanity check (not checking class actually exists)\n      if (!placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replace them\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(collectionsHandler.getCoreContainer().getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(coreContainer.getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["ac6609a105711e36f7f7b2710753870e64192deb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac6609a105711e36f7f7b2710753870e64192deb","date":1600909120,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(getCoreContainer().getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(collectionsHandler.getCoreContainer().getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","bugFix":["1852cb03cf4922477072449dd9de2fab588d1adb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1988108a22fb3ea9d98b1824e6012048d97629eb","date":1600932401,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ClusterAPI.Commands#setPlacementPlugin(PayloadObj[Map[String,Object]]).mjava","sourceNew":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      if(placementPluginConfig.isEmpty()) placementPluginConfig = null;\n      ClusterProperties clusterProperties = new ClusterProperties(getCoreContainer().getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!(placementPluginConfig == null) && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        clusterProperties.update(placementPluginConfig == null?\n            null:\n            new MapWriterMap(placementPluginConfig),\n            PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","sourceOld":"    @Command(name = \"set-placement-plugin\")\n    public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n      Map<String, Object> placementPluginConfig = obj.getDataMap();\n      ClusterProperties clusterProperties = new ClusterProperties(getCoreContainer().getZkController().getZkClient());\n      // When the json contains { \"set-placement-plugin\" : null }, the map is empty, not null.\n      final boolean unset = placementPluginConfig.isEmpty();\n      // Very basic sanity check. Real validation will be done when the config is used...\n      if (!unset && !placementPluginConfig.containsKey(PlacementPluginConfigImpl.CONFIG_CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Must contain \" + PlacementPluginConfigImpl.CONFIG_CLASS + \" attribute (or be null)\");\n      }\n      try {\n        // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n        // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n        clusterProperties.setClusterProperties(\n                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n        if (!unset) {\n          clusterProperties.setClusterProperties(\n                  Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84d8696c7083cb2327aebb0489ec57a33166bda4":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"ac6609a105711e36f7f7b2710753870e64192deb":["1852cb03cf4922477072449dd9de2fab588d1adb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"1988108a22fb3ea9d98b1824e6012048d97629eb":["ac6609a105711e36f7f7b2710753870e64192deb"],"1852cb03cf4922477072449dd9de2fab588d1adb":["84d8696c7083cb2327aebb0489ec57a33166bda4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1988108a22fb3ea9d98b1824e6012048d97629eb"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"84d8696c7083cb2327aebb0489ec57a33166bda4":["1852cb03cf4922477072449dd9de2fab588d1adb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"ac6609a105711e36f7f7b2710753870e64192deb":["1988108a22fb3ea9d98b1824e6012048d97629eb"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["84d8696c7083cb2327aebb0489ec57a33166bda4"],"1852cb03cf4922477072449dd9de2fab588d1adb":["ac6609a105711e36f7f7b2710753870e64192deb"],"1988108a22fb3ea9d98b1824e6012048d97629eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}