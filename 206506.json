{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = LegacyNumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = LegacyNumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = LegacyNumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = LegacyNumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = LegacyNumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = LegacyNumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}