{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence).mjava","sourceNew":"  /**\n   * Add the given component to the end of the path.\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence component) {\n    // Set the new end, increasing the \"ends\" array sizes if necessary:\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    short prevend = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    int cmplen = component.length();\n    ends[ncomponents] = (short) (prevend + cmplen);\n\n    // Copy the new component's characters, increasing the \"chars\" array\n    // sizes if necessary:\n    if (ends[ncomponents] > chars.length) {\n      char[] newchars = new char[ends[ncomponents] * 2];\n      System.arraycopy(chars, 0, newchars, 0, chars.length);\n      chars = newchars;\n    }\n    for (int i = 0; i < cmplen; i++) {\n      chars[prevend++] = component.charAt(i);\n    }\n\n    ncomponents++;\n  }\n\n","sourceOld":"  /**\n   * Add the given component to the end of the path.\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence component) {\n    // Set the new end, increasing the \"ends\" array sizes if necessary:\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    short prevend = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    int cmplen = component.length();\n    ends[ncomponents] = (short) (prevend + cmplen);\n\n    // Copy the new component's characters, increasing the \"chars\" array\n    // sizes if necessary:\n    if (ends[ncomponents] > chars.length) {\n      char[] newchars = new char[ends[ncomponents] * 2];\n      System.arraycopy(chars, 0, newchars, 0, chars.length);\n      chars = newchars;\n    }\n    for (int i = 0; i < cmplen; i++) {\n      chars[prevend++] = component.charAt(i);\n    }\n\n    ncomponents++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add the given component to the end of the path.\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence component) {\n    // Set the new end, increasing the \"ends\" array sizes if necessary:\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    short prevend = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    int cmplen = component.length();\n    ends[ncomponents] = (short) (prevend + cmplen);\n\n    // Copy the new component's characters, increasing the \"chars\" array\n    // sizes if necessary:\n    if (ends[ncomponents] > chars.length) {\n      char[] newchars = new char[ends[ncomponents] * 2];\n      System.arraycopy(chars, 0, newchars, 0, chars.length);\n      chars = newchars;\n    }\n    for (int i = 0; i < cmplen; i++) {\n      chars[prevend++] = component.charAt(i);\n    }\n\n    ncomponents++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add the given component to the end of the path.\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence component) {\n    // Set the new end, increasing the \"ends\" array sizes if necessary:\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    short prevend = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    int cmplen = component.length();\n    ends[ncomponents] = (short) (prevend + cmplen);\n\n    // Copy the new component's characters, increasing the \"chars\" array\n    // sizes if necessary:\n    if (ends[ncomponents] > chars.length) {\n      char[] newchars = new char[ends[ncomponents] * 2];\n      System.arraycopy(chars, 0, newchars, 0, chars.length);\n      chars = newchars;\n    }\n    for (int i = 0; i < cmplen; i++) {\n      chars[prevend++] = component.charAt(i);\n    }\n\n    ncomponents++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}