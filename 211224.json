{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","commits":[{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":1,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","sourceNew":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n      addVal(slave, IndexFetcher.CLEARED_LOCAL_IDX, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","sourceOld":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","sourceNew":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n      addVal(slave, IndexFetcher.CLEARED_LOCAL_IDX, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","sourceOld":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n      addVal(slave, IndexFetcher.CLEARED_LOCAL_IDX, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","sourceNew":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showFollowerDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> leader = new SimpleOrderedMap<>();\n    NamedList<Object> follower = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isLeader\", String.valueOf(isLeader));\n    details.add(\"isFollower\", String.valueOf(isFollower));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isLeader) {\n      if (includeConfFiles != null) leader.add(CONF_FILES, includeConfFiles);\n      leader.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      leader.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isLeader && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      leader.add(\"replicableVersion\", repCommitInfo.version);\n      leader.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showFollowerDetails) {\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList nl = fetcher.getDetails();\n          follower.add(\"leaderDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on leader \",\n              e);\n          follower.add(ERR_STATUS, \"invalid_leader\");\n        }\n      }\n      follower.add(LEADER_URL, fetcher.getLeaderUrl());\n      if (getPollInterval() != null) {\n        follower.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        follower.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        follower.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(follower, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(follower, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(follower, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(follower, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(follower, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(follower, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(follower, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(follower, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(follower, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(follower, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(follower, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n      addVal(follower, IndexFetcher.CLEARED_LOCAL_IDX, props, Long.class);\n\n      follower.add(\"currentDate\", new Date().toString());\n      follower.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      follower.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          follower.add(\"filesToDownload\", filesToDownload);\n          follower.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          follower.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          follower.add(\"filesDownloaded\", filesDownloaded);\n          follower.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            follower.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          follower.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            follower.add(\"currentFile\", currFile);\n          follower.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          follower.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          follower.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          follower.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          follower.add(\"totalPercent\", String.valueOf(totalPercent));\n          follower.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          follower.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isLeader)\n      details.add(\"leader\", leader);\n    if (follower.size() > 0)\n      details.add(\"follower\", follower);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","sourceOld":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n      addVal(slave, IndexFetcher.CLEARED_LOCAL_IDX, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}