{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:build/classes/test-framework:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:build/classes/test-framework:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f04dea8ce9675dc75eb2483feb840a86f765fb82","date":1328049049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f04dea8ce9675dc75eb2483feb840a86f765fb82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f04dea8ce9675dc75eb2483feb840a86f765fb82":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","f04dea8ce9675dc75eb2483feb840a86f765fb82"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"f04dea8ce9675dc75eb2483feb840a86f765fb82":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}