{"path":"lucene/src/java/org/apache/lucene/util/automaton/SortedIntSet#decr(int).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SortedIntSet#decr(int).mjava","pathOld":"/dev/null","sourceNew":"  // Removes this state from the set, if count decrs to 0\n  public void decr(int num) {\n\n    if (useTreeMap) {\n      final int count = map.get(num);\n      if (count == 1) {\n        map.remove(num);\n      } else {\n        map.put(num, count-1);\n      }\n      // Fall back to simple arrays once we touch zero again\n      if (map.size() == 0) {\n        useTreeMap = false;\n        upto = 0;\n      }\n      return;\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]--;\n        if (counts[i] == 0) {\n          final int limit = upto-1;\n          while(i < limit) {\n            values[i] = values[i+1];\n            counts[i] = counts[i+1];\n            i++;\n          }\n          upto = limit;\n        }\n        return;\n      }\n    }\n    assert false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#decr(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SortedIntSet#decr(int).mjava","sourceNew":"  // Removes this state from the set, if count decrs to 0\n  public void decr(int num) {\n\n    if (useTreeMap) {\n      final int count = map.get(num);\n      if (count == 1) {\n        map.remove(num);\n      } else {\n        map.put(num, count-1);\n      }\n      // Fall back to simple arrays once we touch zero again\n      if (map.size() == 0) {\n        useTreeMap = false;\n        upto = 0;\n      }\n      return;\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]--;\n        if (counts[i] == 0) {\n          final int limit = upto-1;\n          while(i < limit) {\n            values[i] = values[i+1];\n            counts[i] = counts[i+1];\n            i++;\n          }\n          upto = limit;\n        }\n        return;\n      }\n    }\n    assert false;\n  }\n\n","sourceOld":"  // Removes this state from the set, if count decrs to 0\n  public void decr(int num) {\n\n    if (useTreeMap) {\n      final int count = map.get(num);\n      if (count == 1) {\n        map.remove(num);\n      } else {\n        map.put(num, count-1);\n      }\n      // Fall back to simple arrays once we touch zero again\n      if (map.size() == 0) {\n        useTreeMap = false;\n        upto = 0;\n      }\n      return;\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]--;\n        if (counts[i] == 0) {\n          final int limit = upto-1;\n          while(i < limit) {\n            values[i] = values[i+1];\n            counts[i] = counts[i+1];\n            i++;\n          }\n          upto = limit;\n        }\n        return;\n      }\n    }\n    assert false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}