{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","pathOld":"/dev/null","sourceNew":"\t/** returns all files matching the given file name patterns (quick n'dirty) */\n\tstatic String[] listFiles(String[] fileNames) {\n\t\tLinkedHashSet allFiles = new LinkedHashSet();\n\t\tfor (int i=0; i < fileNames.length; i++) {\n\t\t\tint k;\n\t\t\tif ((k = fileNames[i].indexOf(\"*\")) < 0) {\n\t\t\t\tallFiles.add(fileNames[i]);\n\t\t\t} else {\n\t\t\t\tString prefix = fileNames[i].substring(0, k);\n\t\t\t\tif (prefix.length() == 0) prefix = \".\";\n\t\t\t\tfinal String suffix = fileNames[i].substring(k+1);\n\t\t\t\tFile[] files = new File(prefix).listFiles(new FilenameFilter() {\n\t\t\t\t\tpublic boolean accept(File dir, String name) {\n\t\t\t\t\t\treturn name.endsWith(suffix);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (files != null) {\n\t\t\t\t\tfor (int j=0; j < files.length; j++) {\n\t\t\t\t\t\tallFiles.add(files[j].getPath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\tString[] result = new String[allFiles.size()];\n\t\tallFiles.toArray(result);\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","sourceNew":"  /** returns all files matching the given file name patterns (quick n'dirty) */\n  static String[] listFiles(String[] fileNames) {\n    LinkedHashSet allFiles = new LinkedHashSet();\n    for (int i=0; i < fileNames.length; i++) {\n      int k;\n      if ((k = fileNames[i].indexOf(\"*\")) < 0) {\n        allFiles.add(fileNames[i]);\n      } else {\n        String prefix = fileNames[i].substring(0, k);\n        if (prefix.length() == 0) prefix = \".\";\n        final String suffix = fileNames[i].substring(k+1);\n        File[] files = new File(prefix).listFiles(new FilenameFilter() {\n          public boolean accept(File dir, String name) {\n            return name.endsWith(suffix);\n          }\n        });\n        if (files != null) {\n          for (int j=0; j < files.length; j++) {\n            allFiles.add(files[j].getPath());\n          }\n        }\n      }      \n    }\n    \n    String[] result = new String[allFiles.size()];\n    allFiles.toArray(result);\n    return result;\n  }\n\n","sourceOld":"\t/** returns all files matching the given file name patterns (quick n'dirty) */\n\tstatic String[] listFiles(String[] fileNames) {\n\t\tLinkedHashSet allFiles = new LinkedHashSet();\n\t\tfor (int i=0; i < fileNames.length; i++) {\n\t\t\tint k;\n\t\t\tif ((k = fileNames[i].indexOf(\"*\")) < 0) {\n\t\t\t\tallFiles.add(fileNames[i]);\n\t\t\t} else {\n\t\t\t\tString prefix = fileNames[i].substring(0, k);\n\t\t\t\tif (prefix.length() == 0) prefix = \".\";\n\t\t\t\tfinal String suffix = fileNames[i].substring(k+1);\n\t\t\t\tFile[] files = new File(prefix).listFiles(new FilenameFilter() {\n\t\t\t\t\tpublic boolean accept(File dir, String name) {\n\t\t\t\t\t\treturn name.endsWith(suffix);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (files != null) {\n\t\t\t\t\tfor (int j=0; j < files.length; j++) {\n\t\t\t\t\t\tallFiles.add(files[j].getPath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\tString[] result = new String[allFiles.size()];\n\t\tallFiles.toArray(result);\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","sourceNew":"  /** returns all files matching the given file name patterns (quick n'dirty) */\n  static String[] listFiles(String[] fileNames) {\n    LinkedHashSet<String> allFiles = new LinkedHashSet<String>();\n    for (int i=0; i < fileNames.length; i++) {\n      int k;\n      if ((k = fileNames[i].indexOf(\"*\")) < 0) {\n        allFiles.add(fileNames[i]);\n      } else {\n        String prefix = fileNames[i].substring(0, k);\n        if (prefix.length() == 0) prefix = \".\";\n        final String suffix = fileNames[i].substring(k+1);\n        File[] files = new File(prefix).listFiles(new FilenameFilter() {\n          public boolean accept(File dir, String name) {\n            return name.endsWith(suffix);\n          }\n        });\n        if (files != null) {\n          for (int j=0; j < files.length; j++) {\n            allFiles.add(files[j].getPath());\n          }\n        }\n      }      \n    }\n    \n    String[] result = new String[allFiles.size()];\n    allFiles.toArray(result);\n    return result;\n  }\n\n","sourceOld":"  /** returns all files matching the given file name patterns (quick n'dirty) */\n  static String[] listFiles(String[] fileNames) {\n    LinkedHashSet allFiles = new LinkedHashSet();\n    for (int i=0; i < fileNames.length; i++) {\n      int k;\n      if ((k = fileNames[i].indexOf(\"*\")) < 0) {\n        allFiles.add(fileNames[i]);\n      } else {\n        String prefix = fileNames[i].substring(0, k);\n        if (prefix.length() == 0) prefix = \".\";\n        final String suffix = fileNames[i].substring(k+1);\n        File[] files = new File(prefix).listFiles(new FilenameFilter() {\n          public boolean accept(File dir, String name) {\n            return name.endsWith(suffix);\n          }\n        });\n        if (files != null) {\n          for (int j=0; j < files.length; j++) {\n            allFiles.add(files[j].getPath());\n          }\n        }\n      }      \n    }\n    \n    String[] result = new String[allFiles.size()];\n    allFiles.toArray(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#listFiles(String[]).mjava","sourceNew":"  /** returns all files matching the given file name patterns (quick n'dirty) */\n  static String[] listFiles(String[] fileNames) {\n    LinkedHashSet<String> allFiles = new LinkedHashSet<String>();\n    for (int i=0; i < fileNames.length; i++) {\n      int k;\n      if ((k = fileNames[i].indexOf(\"*\")) < 0) {\n        allFiles.add(fileNames[i]);\n      } else {\n        String prefix = fileNames[i].substring(0, k);\n        if (prefix.length() == 0) prefix = \".\";\n        final String suffix = fileNames[i].substring(k+1);\n        File[] files = new File(prefix).listFiles(new FilenameFilter() {\n          public boolean accept(File dir, String name) {\n            return name.endsWith(suffix);\n          }\n        });\n        if (files != null) {\n          for (int j=0; j < files.length; j++) {\n            allFiles.add(files[j].getPath());\n          }\n        }\n      }      \n    }\n    \n    String[] result = new String[allFiles.size()];\n    allFiles.toArray(result);\n    return result;\n  }\n\n","sourceOld":"  /** returns all files matching the given file name patterns (quick n'dirty) */\n  static String[] listFiles(String[] fileNames) {\n    LinkedHashSet<String> allFiles = new LinkedHashSet<String>();\n    for (int i=0; i < fileNames.length; i++) {\n      int k;\n      if ((k = fileNames[i].indexOf(\"*\")) < 0) {\n        allFiles.add(fileNames[i]);\n      } else {\n        String prefix = fileNames[i].substring(0, k);\n        if (prefix.length() == 0) prefix = \".\";\n        final String suffix = fileNames[i].substring(k+1);\n        File[] files = new File(prefix).listFiles(new FilenameFilter() {\n          public boolean accept(File dir, String name) {\n            return name.endsWith(suffix);\n          }\n        });\n        if (files != null) {\n          for (int j=0; j < files.length; j++) {\n            allFiles.add(files[j].getPath());\n          }\n        }\n      }      \n    }\n    \n    String[] result = new String[allFiles.size()];\n    allFiles.toArray(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}