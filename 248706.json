{"path":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testXcjfNonroutedCollection().mjava","commits":[{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testXcjfNonroutedCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testXcjfNonroutedCollection() throws Exception {\n    setupIndexes(false);\n\n    // This query will expect the collection to have been routed on product_id, so it should return\n    // incomplete results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s}size_s:M\",\n        false);\n    // Now if we set routed=false we should get a complete set of results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s routed=false}size_s:M\",\n        true);\n    // The xcjf_nonrouted query parser doesn't assume that the collection was routed on product_id,\n    // so we should get the full set of results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s}size_s:M\",\n        true);\n    // But if we set routed=true, we are now assuming again that the collection was routed on product_id,\n    // so we should get incomplete results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s routed=true}size_s:M\",\n        false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testXcjfNonroutedCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testXcjfNonroutedCollection() throws Exception {\n    setupIndexes(false);\n\n    // This query will expect the collection to have been routed on product_id, so it should return\n    // incomplete results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s}size_s:M\",\n        false);\n    // Now if we set routed=false we should get a complete set of results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s routed=false}size_s:M\",\n        true);\n    // The xcjf_nonrouted query parser doesn't assume that the collection was routed on product_id,\n    // so we should get the full set of results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s}size_s:M\",\n        true);\n    // But if we set routed=true, we are now assuming again that the collection was routed on product_id,\n    // so we should get incomplete results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s routed=true}size_s:M\",\n        false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":5,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#testCcJoinNonroutedCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testXcjfNonroutedCollection().mjava","sourceNew":"  @Test\n  public void testCcJoinNonroutedCollection() throws Exception {\n    setupIndexes(false);\n\n    // This query will expect the collection to have been routed on product_id, so it should return\n    // incomplete results.\n    testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_s to=product_id_s}size_s:M\",\n        false);\n    // Now if we set routed=false we should get a complete set of results.\n    testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_s to=product_id_s routed=false}size_s:M\",\n        true);\n    // The join_nonrouted query parser doesn't assume that the collection was routed on product_id,\n    // so we should get the full set of results.\n    testCcJoinQuery(\"{!join_nonrouted method=crossCollection fromIndex=products from=product_id_s to=product_id_s}size_s:M\",\n        true);\n    // But if we set routed=true, we are now assuming again that the collection was routed on product_id,\n    // so we should get incomplete results.\n    testCcJoinQuery(\"{!join_nonrouted method=crossCollection fromIndex=products from=product_id_s to=product_id_s routed=true}size_s:M\",\n        false);\n  }\n\n","sourceOld":"  @Test\n  public void testXcjfNonroutedCollection() throws Exception {\n    setupIndexes(false);\n\n    // This query will expect the collection to have been routed on product_id, so it should return\n    // incomplete results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s}size_s:M\",\n        false);\n    // Now if we set routed=false we should get a complete set of results.\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s routed=false}size_s:M\",\n        true);\n    // The xcjf_nonrouted query parser doesn't assume that the collection was routed on product_id,\n    // so we should get the full set of results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s}size_s:M\",\n        true);\n    // But if we set routed=true, we are now assuming again that the collection was routed on product_id,\n    // so we should get incomplete results.\n    testXcjfQuery(\"{!xcjf_nonrouted collection=products from=product_id_s to=product_id_s routed=true}size_s:M\",\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}