{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans,SpanCollector).mjava","commits":[{"id":"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2","date":1432114286,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans,SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   * @param collector the {@link SpanCollector} associated with the Spans\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException;\n\n","sourceOld":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans,SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans,SpanCollector).mjava","sourceNew":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   * @param collector the {@link SpanCollector} associated with the Spans\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException;\n\n","sourceOld":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   * @param collector the {@link SpanCollector} associated with the Spans\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptPosition(Spans,SpanCollector).mjava","sourceNew":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans) throws IOException;\n\n","sourceOld":"  /**\n   * Implementing classes are required to return whether the current position is a match for the passed in\n   * \"match\" {@link SpanQuery}.\n   *\n   * This is only called if the underlying last {@link Spans#nextStartPosition()} for the\n   * match indicated a valid start position.\n   *\n   * @param spans The {@link Spans} instance, positioned at the spot to check\n   * @param collector the {@link SpanCollector} associated with the Spans\n   *\n   * @return whether the match is accepted, rejected, or rejected and should move to the next doc.\n   *\n   * @see Spans#nextDoc()\n   *\n   */\n  protected abstract AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29aea3139c4326c0501d75d51059855463220279"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["29aea3139c4326c0501d75d51059855463220279"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}