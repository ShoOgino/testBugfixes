{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd9165e54429bb5c99e75d5cb1c926cc98772456","date":1337362687,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      // nocommit these trip ... which is spooky... means\n      // the FI we are cloning was in a bad state...\n      //assert !storeTermVector;\n      //assert !storePayloads;\n      //assert !omitNorms;\n      //assert normsType == null;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf09c02272f823c216c96545af03876602d27996","date":1337363554,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      // nocommit these trip ... which is spooky... means\n      // the FI we are cloning was in a bad state...\n      //assert !storeTermVector;\n      //assert !storePayloads;\n      //assert !omitNorms;\n      //assert normsType == null;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["cf09c02272f823c216c96545af03876602d27996"],"cf09c02272f823c216c96545af03876602d27996":["cd9165e54429bb5c99e75d5cb1c926cc98772456"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["cd9165e54429bb5c99e75d5cb1c926cc98772456"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cf09c02272f823c216c96545af03876602d27996":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["cf09c02272f823c216c96545af03876602d27996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}