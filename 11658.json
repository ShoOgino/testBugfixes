{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","commits":[{"id":"55f9a7c79d02b12eb3ed60661eafdc34ad4c38aa","date":1343094536,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<S>> services = new LinkedHashMap<String,Class<S>>();\n    final String suffix = clazz.getSimpleName();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      final int suffixIndex = clazzName.lastIndexOf(suffix);\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, (Class<S>) service.getClass());\n      }\n    }\n    this.modifiableServices = services; // hack, remove when IBM J9 is fixed!\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, new String[] { clazz.getSimpleName() });\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<S>> services = new LinkedHashMap<String,Class<S>>();\n    final String suffix = clazz.getSimpleName();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      final int suffixIndex = clazzName.lastIndexOf(suffix);\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, (Class<S>) service.getClass());\n      }\n    }\n    this.modifiableServices = services; // hack, remove when IBM J9 is fixed!\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, new String[] { clazz.getSimpleName() });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, new String[] { clazz.getSimpleName() });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, new String[] { clazz.getSimpleName() });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1b329156f9702cbfcdd80795c864111bcd341b","date":1561167997,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, null);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, new String[] { clazz.getSimpleName() });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, null);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz) {\n    this(clazz, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f9a7c79d02b12eb3ed60661eafdc34ad4c38aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["55f9a7c79d02b12eb3ed60661eafdc34ad4c38aa"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["7b1b329156f9702cbfcdd80795c864111bcd341b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"7b1b329156f9702cbfcdd80795c864111bcd341b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"55f9a7c79d02b12eb3ed60661eafdc34ad4c38aa":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"280bf88d9ed3d9923e393961b594d9553970e4fd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55f9a7c79d02b12eb3ed60661eafdc34ad4c38aa","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7b1b329156f9702cbfcdd80795c864111bcd341b"],"7b1b329156f9702cbfcdd80795c864111bcd341b":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}