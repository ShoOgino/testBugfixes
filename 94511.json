{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, segment, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, segment, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8febb56d1ed9f3314d35d075599fd9aff857be3c","date":1337729003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, segment, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, segment, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    boolean success = false;\n    int numDocs;\n    try {\n      numDocs = termVectorsWriter.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termVectorsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termVectorsWriter);\n      }\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    try {\n      return termVectorsWriter.merge(mergeState);\n    } finally {\n      termVectorsWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f984bc3fef371bf2393a453ebd7835bcb0ee8d","date":1418246768,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeVectors().mjava","sourceNew":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    try (TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context)) {\n      return termVectorsWriter.merge(mergeState);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merge the TermVectors from each of the segments into the new one.\n   * @throws IOException if there is a low-level IO error\n   */\n  private int mergeVectors() throws IOException {\n    final TermVectorsWriter termVectorsWriter = codec.termVectorsFormat().vectorsWriter(directory, mergeState.segmentInfo, context);\n    \n    boolean success = false;\n    int numDocs;\n    try {\n      numDocs = termVectorsWriter.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termVectorsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termVectorsWriter);\n      }\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8febb56d1ed9f3314d35d075599fd9aff857be3c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","55eeb2534cd53d2a985669829df942468ebf5314"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"55eeb2534cd53d2a985669829df942468ebf5314":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d4d69c535930b5cce125cff868d40f6373dc27d4","55eeb2534cd53d2a985669829df942468ebf5314"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8febb56d1ed9f3314d35d075599fd9aff857be3c","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"],"55eeb2534cd53d2a985669829df942468ebf5314":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}