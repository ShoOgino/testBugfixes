{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    client.add(docs);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = client.query( query );\n    assertEquals(docs.size(), rsp.getResults().getNumFound());\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals(\"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString());\n    \n    // with minCount > 3\n    query.setFacetMinCount(4);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount(-1);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\" );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    client.add(docs);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = client.query( query );\n    assertEquals(docs.size(), rsp.getResults().getNumFound());\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals(\"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString());\n    \n    // with minCount > 3\n    query.setFacetMinCount(4);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount(-1);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    client.add(docs);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = client.query( query );\n    assertEquals(docs.size(), rsp.getResults().getNumFound());\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals(\"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString());\n    \n    // with minCount > 3\n    query.setFacetMinCount(4);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount(-1);\n    rsp = client.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}