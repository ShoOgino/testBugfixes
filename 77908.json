{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < values.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(FIELD, values[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery1 = new BooleanQuery();\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n      BooleanQuery query = new BooleanQuery();\n      query.add(booleanQuery1, BooleanClause.Occur.MUST);\n      query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 2, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < values.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(FIELD, values[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery1 = new BooleanQuery();\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n      BooleanQuery query = new BooleanQuery();\n      query.add(booleanQuery1, BooleanClause.Occur.MUST);\n      query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 2, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":null,"sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < values.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(FIELD, values[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery1 = new BooleanQuery();\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n      booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n      BooleanQuery query = new BooleanQuery();\n      query.add(booleanQuery1, BooleanClause.Occur.MUST);\n      query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 2, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}