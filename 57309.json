{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba74b188d46af33b86ff8e5a500d6f066852a182","date":1312857652,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dccd36091d3547bf3a42b32aa932bb6082269048","date":1331137820,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList nl = snapPuller.getDetails();\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList nl = snapPuller.getDetails();\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList nl = snapPuller.getDetails();\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList nl = snapPuller.getDetails();\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","date":1361552322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList nl = snapPuller.getDetails();\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":["3d8a2f376efa71aa3586481085547daf29dc5c6c","0b11f32acac13cc087cc735808dfe19c2b52673b","e1c62d84fa064ee3b226a7ed01c37d152d0253bb","4f1a1d7f1604a41328b566b1be0c5ad6038117e8","f2425308ebcd91b538a601df94ae1551ccaab2bb","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8191177d7e99590f340be1dbfb1cb0f01bf2f993","date":1366233200,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = snapPuller.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n    \n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      if (getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (fetcher.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(fetcher.getReplicationStartTime()).toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d","date":1483555724,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          LOG.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  //TODO Should a failure retrieving any piece of info mark the overall request as a failure?  Is there a core set of values that are required to make a response here useful?\n  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(SolrQueryResponse rsp, boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    if (rsp.getValues().get(STATUS) == null) {\n      rsp.add(STATUS, OK_STATUS);\n    }\n    rsp.add(CMD_DETAILS, details);\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<>();\n    NamedList<Object> master = new SimpleOrderedMap<>();\n    NamedList<Object> slave = new SimpleOrderedMap<>();\n\n    details.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    CommitVersionInfo vInfo = getIndexVersion();\n    details.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n    details.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      CommitVersionInfo repCommitInfo = CommitVersionInfo.build(commit);\n      master.add(\"replicableVersion\", repCommitInfo.version);\n      master.add(\"replicableGeneration\", repCommitInfo.generation);\n    }\n\n    IndexFetcher fetcher = currentIndexFetcher;\n    if (fetcher != null) {\n      Properties props = loadReplicationProperties();\n      if (showSlaveDetails) {\n        try {\n          NamedList nl = fetcher.getDetails();\n          slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n        } catch (Exception e) {\n          log.warn(\n              \"Exception while invoking 'details' method for replication on master \",\n              e);\n          slave.add(ERR_STATUS, \"invalid_master\");\n        }\n      }\n      slave.add(MASTER_URL, fetcher.getMasterUrl());\n      if (getPollInterval() != null) {\n        slave.add(POLL_INTERVAL, getPollInterval());\n      }\n      Date nextScheduled = getNextScheduledExecTime();\n      if (nextScheduled != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, nextScheduled.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, IndexFetcher.TIMES_FAILED, props, Integer.class);\n      addVal(slave, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"currentDate\", new Date().toString());\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : fetcher.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", NumberUtils.readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<>();\n          for (Map<String, Object> file : fetcher.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : fetcher.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = fetcher.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          Date replicationStartTimeStamp = fetcher.getReplicationStartTimeStamp();\n          if (replicationStartTimeStamp != null) {\n            slave.add(\"replicationStartTime\", replicationStartTimeStamp.toString());\n          }\n          long elapsed = fetcher.getReplicationTimeElapsed();\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", NumberUtils.readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", NumberUtils.readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", NumberUtils.readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", NumberUtils.readableSize(downloadSpeed));\n        } catch (Exception e) {\n          log.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (slave.size() > 0)\n      details.add(\"slave\", slave);\n\n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n\n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["ba74b188d46af33b86ff8e5a500d6f066852a182"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["dccd36091d3547bf3a42b32aa932bb6082269048"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["ba74b188d46af33b86ff8e5a500d6f066852a182","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["bcf9886c8ff537aafde14de48ebf744f5673f08b","a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","dccd36091d3547bf3a42b32aa932bb6082269048"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"ba74b188d46af33b86ff8e5a500d6f066852a182":["c26f00b574427b55127e869b935845554afde1fa"],"dccd36091d3547bf3a42b32aa932bb6082269048":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["ba74b188d46af33b86ff8e5a500d6f066852a182","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["dccd36091d3547bf3a42b32aa932bb6082269048","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["5b6fdfce35d0adb18836cf8711abe487a934df33","38e3b736c7ca086d61b7dbb841c905ee115490da","dccd36091d3547bf3a42b32aa932bb6082269048","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"c26f00b574427b55127e869b935845554afde1fa":["ba74b188d46af33b86ff8e5a500d6f066852a182"],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"ba74b188d46af33b86ff8e5a500d6f066852a182":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","5b6fdfce35d0adb18836cf8711abe487a934df33","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"dccd36091d3547bf3a42b32aa932bb6082269048":["f2425308ebcd91b538a601df94ae1551ccaab2bb","38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["491c9672ec42582fe43960452dbd37f1c80fe0f0","a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","5b6fdfce35d0adb18836cf8711abe487a934df33","491c9672ec42582fe43960452dbd37f1c80fe0f0","38e3b736c7ca086d61b7dbb841c905ee115490da","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}