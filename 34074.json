{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.info(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.info(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.debug(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.info(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.debug(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.info(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.debug(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.info(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#loadFromSnapshotMetadataFile().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the snapshot meta-data information from the given {@link Directory}.\n   */\n  private synchronized void loadFromSnapshotMetadataFile() throws IOException {\n    log.debug(\"Loading from snapshot metadata file...\");\n    long genLoaded = -1;\n    IOException ioe = null;\n    List<String> snapshotFiles = new ArrayList<>();\n    for(String file : dir.listAll()) {\n      if (file.startsWith(SNAPSHOTS_PREFIX)) {\n        long gen = Long.parseLong(file.substring(SNAPSHOTS_PREFIX.length()));\n        if (genLoaded == -1 || gen > genLoaded) {\n          snapshotFiles.add(file);\n          Map<String, SnapshotMetaData> snapshotMetaDataMapping = new HashMap<>();\n          IndexInput in = dir.openInput(file, IOContext.DEFAULT);\n          try {\n            CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n            int count = in.readVInt();\n            for(int i=0;i<count;i++) {\n              String name = in.readString();\n              String indexDirPath = in.readString();\n              long commitGen = in.readVLong();\n              snapshotMetaDataMapping.put(name, new SnapshotMetaData(name, indexDirPath, commitGen));\n            }\n          } catch (IOException ioe2) {\n            // Save first exception & throw in the end\n            if (ioe == null) {\n              ioe = ioe2;\n            }\n          } finally {\n            in.close();\n          }\n\n          genLoaded = gen;\n          nameToDetailsMapping.clear();\n          nameToDetailsMapping.putAll(snapshotMetaDataMapping);\n        }\n      }\n    }\n\n    if (genLoaded == -1) {\n      // Nothing was loaded...\n      if (ioe != null) {\n        // ... not for lack of trying:\n        throw ioe;\n      }\n    } else {\n      if (snapshotFiles.size() > 1) {\n        // Remove any broken / old snapshot files:\n        String curFileName = SNAPSHOTS_PREFIX + genLoaded;\n        for(String file : snapshotFiles) {\n          if (!curFileName.equals(file)) {\n            IOUtils.deleteFilesIgnoringExceptions(dir, file);\n          }\n        }\n      }\n      nextWriteGen = 1+genLoaded;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"126d6ad24eed13163ba0959435d5a80e5672837c":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","126d6ad24eed13163ba0959435d5a80e5672837c"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}