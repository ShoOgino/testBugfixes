{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c0b7c041280280c54063d34a48a0ee85332b1e3","date":1287540778,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParserWrapper was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d572389229127c297dd1fa5ce4758e1cec41e799","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8c0b7c041280280c54063d34a48a0ee85332b1e3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d572389229127c297dd1fa5ce4758e1cec41e799":["8c0b7c041280280c54063d34a48a0ee85332b1e3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}