{"path":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<Integer>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd5345d467d0ee13701d24481e4c90995f06339","date":1484419619,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#addHotSpots(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\r\n    //System.out.println(\"hot spotting\");\r\n    ArrayList<Integer> temphs = new ArrayList<>(\r\n                              text.length() / targetFragChars);\r\n    Matcher match = textRE.matcher(text);\r\n    int cur = 0;\r\n    while(match.find() && cur < maxAnalyzedChars) {\r\n      int start=match.start(), end=match.end();\r\n      temphs.add(start);\r\n      temphs.add(end);\r\n      cur = end;\r\n      //System.out.println(\"Matched \" + match.group());\r\n    }    \r\n    hotspots = new int[temphs.size()];\r\n    for(int i = 0; i < temphs.size(); i++) {\r\n      hotspots[i] = temphs.get(i);\r\n    }\r\n    // perhaps not necessary--I don't know if re matches are non-overlapping\r\n    Arrays.sort(hotspots);\r\n  }\r\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#addHotSpots(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#addHotSpots(String).mjava","sourceNew":"  protected void addHotSpots(String text) {\r\n    //System.out.println(\"hot spotting\");\r\n    ArrayList<Integer> temphs = new ArrayList<>(\r\n                              text.length() / targetFragChars);\r\n    Matcher match = textRE.matcher(text);\r\n    int cur = 0;\r\n    while(match.find() && cur < maxAnalyzedChars) {\r\n      int start=match.start(), end=match.end();\r\n      temphs.add(start);\r\n      temphs.add(end);\r\n      cur = end;\r\n      //System.out.println(\"Matched \" + match.group());\r\n    }    \r\n    hotspots = new int[temphs.size()];\r\n    for(int i = 0; i < temphs.size(); i++) {\r\n      hotspots[i] = temphs.get(i);\r\n    }\r\n    // perhaps not necessary--I don't know if re matches are non-overlapping\r\n    Arrays.sort(hotspots);\r\n  }\r\n\n","sourceOld":"  protected void addHotSpots(String text) {\n    //System.out.println(\"hot spotting\");\n    ArrayList<Integer> temphs = new ArrayList<>(\n                              text.length() / targetFragChars);\n    Matcher match = textRE.matcher(text);\n    int cur = 0;\n    while(match.find() && cur < maxAnalyzedChars) {\n      int start=match.start(), end=match.end();\n      temphs.add(start);\n      temphs.add(end);\n      cur = end;\n      //System.out.println(\"Matched \" + match.group());\n    }    \n    hotspots = new int[temphs.size()];\n    for(int i = 0; i < temphs.size(); i++) {\n      hotspots[i] = temphs.get(i);\n    }\n    // perhaps not necessary--I don't know if re matches are non-overlapping\n    Arrays.sort(hotspots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"cfd5345d467d0ee13701d24481e4c90995f06339":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","cfd5345d467d0ee13701d24481e4c90995f06339"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd5345d467d0ee13701d24481e4c90995f06339"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cfd5345d467d0ee13701d24481e4c90995f06339","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cfd5345d467d0ee13701d24481e4c90995f06339":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}