{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator().mjava","commits":[{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator() {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator() {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c066767cf781550d3a8f94fff30ed80464bc0ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9856095f7afb5a607bf5e65077615ed91273508c","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}