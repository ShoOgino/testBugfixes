{"path":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertFail(ModifiableSolrParams).mjava","commits":[{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertFail(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * execute a request, verify that we get an expected error\n   */\n  public void assertFail(ModifiableSolrParams p) throws Exception {\n    String timeoutMessage = \"Request took too long during query expansion. Terminating request.\";\n\n    try {\n      ignoreException(timeoutMessage);\n      queryServer(p);\n      fail(\"no exception matching expected: \" + ErrorCode.BAD_REQUEST.code + \": \" + timeoutMessage);\n    } catch (SolrServerException e) {\n      assertTrue(\"Exception \" + e.getCause() + \" is not a SolrException:\\n\" + prettyStackTrace(e.getCause()),\n          e.getCause() instanceof SolrException);\n      assertEquals(ErrorCode.BAD_REQUEST.code, ((SolrException)e.getCause()).code());\n      assertTrue(\"Expected error message substr not found: \" + timeoutMessage + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(timeoutMessage));\n    } finally {\n      unIgnoreException(timeoutMessage);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertFail(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * execute a request, verify that we get an expected error\n   */\n  public void assertFail(ModifiableSolrParams p) throws Exception {\n    String timeoutMessage = \"Request took too long during query expansion. Terminating request.\";\n\n    try {\n      ignoreException(timeoutMessage);\n      queryServer(p);\n      fail(\"no exception matching expected: \" + ErrorCode.BAD_REQUEST.code + \": \" + timeoutMessage);\n    } catch (SolrServerException e) {\n      assertTrue(\"Exception \" + e.getCause() + \" is not a SolrException:\\n\" + prettyStackTrace(e.getCause()),\n          e.getCause() instanceof SolrException);\n      assertEquals(ErrorCode.BAD_REQUEST.code, ((SolrException)e.getCause()).code());\n      assertTrue(\"Expected error message substr not found: \" + timeoutMessage + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(timeoutMessage));\n    } finally {\n      unIgnoreException(timeoutMessage);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f001da93ec624cbfbf3655c529836b5b1ec1aa46","date":1412885266,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertFail(ModifiableSolrParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * execute a request, verify that we get an expected error\n   */\n  public void assertFail(ModifiableSolrParams p) throws Exception {\n    String timeoutMessage = \"Request took too long during query expansion. Terminating request.\";\n\n    try {\n      ignoreException(timeoutMessage);\n      queryServer(p);\n      fail(\"no exception matching expected: \" + ErrorCode.BAD_REQUEST.code + \": \" + timeoutMessage);\n    } catch (SolrServerException e) {\n      assertTrue(\"Exception \" + e.getCause() + \" is not a SolrException:\\n\" + prettyStackTrace(e.getCause()),\n          e.getCause() instanceof SolrException);\n      assertEquals(ErrorCode.BAD_REQUEST.code, ((SolrException)e.getCause()).code());\n      assertTrue(\"Expected error message substr not found: \" + timeoutMessage + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(timeoutMessage));\n    } finally {\n      unIgnoreException(timeoutMessage);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertFail(ModifiableSolrParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * execute a request, verify that we get an expected error\n   */\n  public void assertFail(ModifiableSolrParams p) throws Exception {\n    String timeoutMessage = \"Request took too long during query expansion. Terminating request.\";\n\n    try {\n      ignoreException(timeoutMessage);\n      queryServer(p);\n      fail(\"no exception matching expected: \" + ErrorCode.BAD_REQUEST.code + \": \" + timeoutMessage);\n    } catch (SolrServerException e) {\n      assertTrue(\"Exception \" + e.getCause() + \" is not a SolrException:\\n\" + prettyStackTrace(e.getCause()),\n          e.getCause() instanceof SolrException);\n      assertEquals(ErrorCode.BAD_REQUEST.code, ((SolrException)e.getCause()).code());\n      assertTrue(\"Expected error message substr not found: \" + timeoutMessage + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(timeoutMessage));\n    } finally {\n      unIgnoreException(timeoutMessage);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f001da93ec624cbfbf3655c529836b5b1ec1aa46"]},"commit2Childs":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"55980207f1977bd1463465de1659b821347e2fa8":[],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}