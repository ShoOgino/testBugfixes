{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().text(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().text(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().getTerm().bytes(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().text(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().getTerm().bytes(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().text(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {\n    InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];\n    if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {\n      List<InstantiatedTermDocumentInformation> tv = doc.getVectorSpace().get(field);\n      mapper.setExpectations(field, tv.size(), true, true);\n      for (InstantiatedTermDocumentInformation tdi : tv) {\n        mapper.map(tdi.getTerm().getTerm().bytes(), tdi.getTermPositions().length, tdi.getTermOffsets(), tdi.getTermPositions());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["3cc749c053615f5871f3b95715fe292f34e70a53","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}