{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"f45b4d1a00eca88b48ea7e1ffae3041b63da020e","date":1402400148,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    boolean success = false;\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n      readFields(in, state.fieldInfos);\n      CodecUtil.checkFooter(in);\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene50NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    merging = false;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkSegmentHeader(in, metaCodec, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId());\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkSegmentHeader(data, dataCodec, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId());\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    merging = false;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#Lucene50NormsProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#Lucene49NormsProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene50NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    merging = false;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkSegmentHeader(in, metaCodec, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkSegmentHeader(data, dataCodec, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene49NormsProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n    int version = -1;\n    \n    // read in the entries from the metadata file.\n    try (ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context)) {\n      Throwable priorE = null;\n      try {\n        version = CodecUtil.checkHeader(in, metaCodec, VERSION_START, VERSION_CURRENT);\n        readFields(in, state.fieldInfos);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(in, priorE);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    boolean success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, VERSION_START, VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch: meta=\" + version + \",data=\" + version2, data);\n      }\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(data);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"bc8f80fee115148a0e4a0574560be06b494de821":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["500867f0f15393f6b2c38c3366e414fccba04ed6","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}