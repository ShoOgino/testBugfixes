{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","commits":[{"id":"16ffb58ba57f805651a528311c104f104d9f4573","date":1457861471,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9028cf27fe30db95667505bb92ecaee8fa3aef7","date":1457861734,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16ffb58ba57f805651a528311c104f104d9f4573":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16ffb58ba57f805651a528311c104f104d9f4573"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b9028cf27fe30db95667505bb92ecaee8fa3aef7","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["b9028cf27fe30db95667505bb92ecaee8fa3aef7","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"16ffb58ba57f805651a528311c104f104d9f4573":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16ffb58ba57f805651a528311c104f104d9f4573","b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}