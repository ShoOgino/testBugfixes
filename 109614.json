{"path":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(readers[pointer++]);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent.close();\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2","date":1011633132,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(readers[pointer++]);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent.close();\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6473e45cde7e2f73ee961148e3272fb52d93a25e","date":1032413465,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","sourceNew":null,"sourceOld":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7087f8343d1904252decbbea451a5324aaf83f00","date":1032414664,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["7087f8343d1904252decbbea451a5324aaf83f00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"7087f8343d1904252decbbea451a5324aaf83f00":["6473e45cde7e2f73ee961148e3272fb52d93a25e"],"6473e45cde7e2f73ee961148e3272fb52d93a25e":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"]},"commit2Childs":{"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["6473e45cde7e2f73ee961148e3272fb52d93a25e"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7087f8343d1904252decbbea451a5324aaf83f00":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6473e45cde7e2f73ee961148e3272fb52d93a25e":["7087f8343d1904252decbbea451a5324aaf83f00"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}