{"path":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir).toPath());\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir));\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97a8b50707170c51f7803726e3927ab08eec820","date":1455662465,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      // TODO: this is a workaround for SpellChecker repeatedly closing and opening a new IndexWriter while leaving readers open, which on\n      // Windows causes problems because deleted files can't be opened.  It would be better for SpellChecker to hold a single IW instance,\n      // and close it on close, but Solr never seems to close its spell checkers.  Wrapping as FilterDirectory prevents IndexWriter from\n      // catching the pending deletions:\n      index = new FilterDirectory(FSDirectory.open(new File(indexDir).toPath())) {\n      };\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      index = FSDirectory.open(new File(indexDir).toPath());\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#initIndex().mjava","sourceNew":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      // TODO: this is a workaround for SpellChecker repeatedly closing and opening a new IndexWriter while leaving readers open, which on\n      // Windows causes problems because deleted files can't be opened.  It would be better for SpellChecker to hold a single IW instance,\n      // and close it on close, but Solr never seems to close its spell checkers.  Wrapping as FilterDirectory prevents IndexWriter from\n      // catching the pending deletions:\n      index = new FilterDirectory(FSDirectory.open(new File(indexDir).toPath())) {\n      };\n    } else {\n      index = new ByteBuffersDirectory();\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the {@link #index} variable based on the {@link #indexDir}.  Does not actually create the spelling index.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected void initIndex() throws IOException {\n    if (indexDir != null) {\n      // TODO: this is a workaround for SpellChecker repeatedly closing and opening a new IndexWriter while leaving readers open, which on\n      // Windows causes problems because deleted files can't be opened.  It would be better for SpellChecker to hold a single IW instance,\n      // and close it on close, but Solr never seems to close its spell checkers.  Wrapping as FilterDirectory prevents IndexWriter from\n      // catching the pending deletions:\n      index = new FilterDirectory(FSDirectory.open(new File(indexDir).toPath())) {\n      };\n    } else {\n      index = new RAMDirectory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["f97a8b50707170c51f7803726e3927ab08eec820"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"],"f97a8b50707170c51f7803726e3927ab08eec820":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f4abec28b874149a7223e32cc7a01704c27790de"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f4abec28b874149a7223e32cc7a01704c27790de":["f97a8b50707170c51f7803726e3927ab08eec820"],"f97a8b50707170c51f7803726e3927ab08eec820":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}