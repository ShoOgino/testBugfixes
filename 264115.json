{"path":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5ac9c2d15e75a72c2c461039fb6789654439323","date":1284413428,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n        finally {\n          req.close();\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","bbdd035c502312d32111b9642ba3dbd5c52ee64f","bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78785171cc26b582e4b759dac7e5ff8def9ad502","date":1287359541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n        finally {\n          req.close();\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["3a5e336414841f2315620497003210b2447553a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n        finally {\n          req.close();\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a5e336414841f2315620497003210b2447553a9","date":1287676807,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      try {\n        if (req != null) req.close();\n      } finally {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n    }\n  }\n\n","bugFix":["78785171cc26b582e4b759dac7e5ff8def9ad502","c28792ff7d1774c306e16afbd44ded91a417049b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      try {\n        if (req != null) req.close();\n      } finally {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","date":1292210954,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      try {\n        if (req != null) req.close();\n      } finally {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      try {\n        if (req != null) req.close();\n      } finally {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ids.matches() );\n              docs.setStart( ids.offset() );\n              docs.setMaxScore( ids.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              int sz = ids.size();\n              \n              if(searcher == null) searcher = solrQueryRequest.getSearcher();\n              if(schema == null) schema = solrQueryRequest.getSchema(); \n              DocIterator iterator = ids.iterator();\n              for (int i = 0; i < sz; i++) {\n                int id = iterator.nextDoc();\n                Document doc = searcher.doc(id, returnFields);\n                SolrDocument sdoc = getDoc(doc);\n                if (includeScore && ids.hasScores()) {\n                  sdoc.addField(\"score\", iterator.score());\n                }\n                callback.streamSolrDocument( sdoc );\n              }\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc, Set<String> fields) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"78785171cc26b582e4b759dac7e5ff8def9ad502":["e5ac9c2d15e75a72c2c461039fb6789654439323"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5ac9c2d15e75a72c2c461039fb6789654439323":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["6aedf81f068e430dec27d94310415cc6ff52731c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","3a5e336414841f2315620497003210b2447553a9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["b12d3e81e0f95a4527b5703953c503f71120ffcc","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","6aedf81f068e430dec27d94310415cc6ff52731c"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["3a5e336414841f2315620497003210b2447553a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a5e336414841f2315620497003210b2447553a9":["78785171cc26b582e4b759dac7e5ff8def9ad502"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6aedf81f068e430dec27d94310415cc6ff52731c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["e5ac9c2d15e75a72c2c461039fb6789654439323","78785171cc26b582e4b759dac7e5ff8def9ad502"],"6aedf81f068e430dec27d94310415cc6ff52731c":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"78785171cc26b582e4b759dac7e5ff8def9ad502":["3a5e336414841f2315620497003210b2447553a9","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"e5ac9c2d15e75a72c2c461039fb6789654439323":["78785171cc26b582e4b759dac7e5ff8def9ad502","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["e5ac9c2d15e75a72c2c461039fb6789654439323","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"3a5e336414841f2315620497003210b2447553a9":["b12d3e81e0f95a4527b5703953c503f71120ffcc","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}