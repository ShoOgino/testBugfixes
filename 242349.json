{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    return new FuzzyQuery(term,minimumSimilarity,prefixLength);\n  }\n\n","sourceOld":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    return new FuzzyQuery(term,minimumSimilarity,prefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    String text = term.text();\n    int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, \n        text.codePointCount(0, text.length()));\n    return new FuzzyQuery(term,numEdits,prefixLength);\n  }\n\n","sourceOld":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    return new FuzzyQuery(term,minimumSimilarity,prefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  @SuppressWarnings(\"deprecation\")\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    String text = term.text();\n    int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, \n        text.codePointCount(0, text.length()));\n    return new FuzzyQuery(term,numEdits,prefixLength);\n  }\n\n","sourceOld":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    String text = term.text();\n    int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, \n        text.codePointCount(0, text.length()));\n    return new FuzzyQuery(term,numEdits,prefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    String text = term.text();\n    int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, \n        text.codePointCount(0, text.length()));\n    return new FuzzyQuery(term,numEdits,prefixLength);\n  }\n\n","sourceOld":"  /**\n   * Builds a new FuzzyQuery instance\n   * @param term Term\n   * @param minimumSimilarity minimum similarity\n   * @param prefixLength prefix length\n   * @return new FuzzyQuery Instance\n   */\n  @SuppressWarnings(\"deprecation\")\n  protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    // FuzzyQuery doesn't yet allow constant score rewrite\n    String text = term.text();\n    int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, \n        text.codePointCount(0, text.length()));\n    return new FuzzyQuery(term,numEdits,prefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}