{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","commits":[{"id":"bbd0e8fef7999fa0d948a876724808ca2131cc79","date":1200951763,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=false\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(writer.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertEquals(false, writer.getUseCompoundFile());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64","date":1201200417,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=false\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertEquals(false, writer.getUseCompoundFile());\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=false\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(writer.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertEquals(false, writer.getUseCompoundFile());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bc667c48cc0a6ef96df2ed9a764da342e3d1730","date":1205081012,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=false\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertEquals(false, writer.getUseCompoundFile());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getMaxBufferedDocs());\n    assertEquals(IndexWriter.DISABLE_AUTO_FLUSH, (int) writer.getRAMBufferSizeMB());\n    assertEquals(3, writer.getMergeFactor());\n    assertFalse(writer.getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["4256bc1b3c94786287ccdfc751230374521843cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"bbd0e8fef7999fa0d948a876724808ca2131cc79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["bbd0e8fef7999fa0d948a876724808ca2131cc79"],"4256bc1b3c94786287ccdfc751230374521843cf":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["4256bc1b3c94786287ccdfc751230374521843cf"],"bbd0e8fef7999fa0d948a876724808ca2131cc79":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbd0e8fef7999fa0d948a876724808ca2131cc79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"4256bc1b3c94786287ccdfc751230374521843cf":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}