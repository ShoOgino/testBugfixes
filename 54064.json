{"path":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Returns the a DocIdSetIterator representing the Boolean composition\r\n   * of the filters that have been added.\r\n   */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n  {\r\n    OpenBitSetDISI res = null;\r\n  \r\n    if (shouldFilters != null) {\r\n      for (int i = 0; i < shouldFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\r\n        } else { \r\n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.or((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (notFilters!=null) {\r\n      for (int i = 0; i < notFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\r\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\r\n        } else {\r\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.andNot((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceNot(getDISI(notFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (mustFilters!=null) {\r\n      for (int i = 0; i < mustFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\r\n        } else {\r\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.and((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (res !=null)\r\n      return finalResult(res, reader.maxDoc());\r\n\r\n    if (emptyDocIdSet == null)\r\n      emptyDocIdSet = new OpenBitSetDISI(1);\r\n\r\n    return emptyDocIdSet;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    if (emptyDocIdSet == null)\n      emptyDocIdSet = new OpenBitSetDISI(1);\n\n    return emptyDocIdSet;\n  }\n\n","sourceOld":"  /**\r\n   * Returns the a DocIdSetIterator representing the Boolean composition\r\n   * of the filters that have been added.\r\n   */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n  {\r\n    OpenBitSetDISI res = null;\r\n  \r\n    if (shouldFilters != null) {\r\n      for (int i = 0; i < shouldFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\r\n        } else { \r\n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.or((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (notFilters!=null) {\r\n      for (int i = 0; i < notFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\r\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\r\n        } else {\r\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.andNot((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceNot(getDISI(notFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (mustFilters!=null) {\r\n      for (int i = 0; i < mustFilters.size(); i++) {\r\n        if (res == null) {\r\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\r\n        } else {\r\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\r\n          if(dis instanceof OpenBitSet) {\r\n            // optimized case for OpenBitSets\r\n            res.and((OpenBitSet) dis);\r\n          } else {\r\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (res !=null)\r\n      return finalResult(res, reader.maxDoc());\r\n\r\n    if (emptyDocIdSet == null)\r\n      emptyDocIdSet = new OpenBitSetDISI(1);\r\n\r\n    return emptyDocIdSet;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1d5a61526b1ff43f372d164a7c5895be2384b2","date":1249039957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    if (emptyDocIdSet == null)\n      emptyDocIdSet = new OpenBitSetDISI(1);\n\n    return emptyDocIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = ((Filter)notFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = ((Filter)mustFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"6c1d5a61526b1ff43f372d164a7c5895be2384b2":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["6c1d5a61526b1ff43f372d164a7c5895be2384b2"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6c1d5a61526b1ff43f372d164a7c5895be2384b2":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["6c1d5a61526b1ff43f372d164a7c5895be2384b2"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}