{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(Path).mjava","commits":[{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(Path).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","sourceNew":"  public void write(Path baseDir) throws IOException {\n    Files.createDirectories(baseDir);\n    String fileName = ConnectionCosts.class.getName().replace('.', '/') + ConnectionCosts.FILENAME_SUFFIX;\n    try (OutputStream os = Files.newOutputStream(baseDir.resolve(fileName));\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (short cost : a) {\n          int delta = (int) cost - last;\n          out.writeZInt(delta);\n          last = cost;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeZInt(delta);\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(Path).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(Path).mjava","sourceNew":"  public void write(Path baseDir) throws IOException {\n    Files.createDirectories(baseDir);\n    String fileName = ConnectionCosts.class.getName().replace('.', '/') + ConnectionCosts.FILENAME_SUFFIX;\n    try (OutputStream os = Files.newOutputStream(baseDir.resolve(fileName));\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      for (int i = 0; i < costs.limit() / 2; i++) {\n        short cost = costs.getShort(i * 2);\n        int delta = (int) cost - last;\n        out.writeZInt(delta);\n        last = cost;\n      }\n    }\n  }\n\n","sourceOld":"  public void write(Path baseDir) throws IOException {\n    Files.createDirectories(baseDir);\n    String fileName = ConnectionCosts.class.getName().replace('.', '/') + ConnectionCosts.FILENAME_SUFFIX;\n    try (OutputStream os = Files.newOutputStream(baseDir.resolve(fileName));\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (short cost : a) {\n          int delta = (int) cost - last;\n          out.writeZInt(delta);\n          last = cost;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05feb7eb5e91cb64742ce32b2ca3f02433530446":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"05feb7eb5e91cb64742ce32b2ca3f02433530446":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}