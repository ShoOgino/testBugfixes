{"path":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#doTestRandom(int).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#doTestRandom(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 0 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (missing.get(oldDocID) == false) {\n            break;\n          }\n        }\n            \n        // Identical to old value\n        values[docID] = values[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" value=\" + values[docID] + \" bytes=\" + longToBytes(values[docID]) + \" (same as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        values[docID] = randomValue();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" value=\" + values[docID] + \" bytes=\" + longToBytes(values[docID]));\n        }\n      }\n    }\n\n    verify(missing, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#doTestRandom(int).mjava","sourceNew":null,"sourceOld":"  private void doTestRandom(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 0 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (missing.get(oldDocID) == false) {\n            break;\n          }\n        }\n            \n        // Identical to old value\n        values[docID] = values[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" value=\" + values[docID] + \" bytes=\" + longToBytes(values[docID]) + \" (same as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        values[docID] = randomValue();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" value=\" + values[docID] + \" bytes=\" + longToBytes(values[docID]));\n        }\n      }\n    }\n\n    verify(missing, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}