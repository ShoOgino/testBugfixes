{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}