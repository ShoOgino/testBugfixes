{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n","sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e87ea9fb673e8638747af83477322f07ed5a8b95","date":1374560737,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n\n","sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n\n","sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /**\n   * Returns {@link TermStatistics} for a term, or {@code null} if\n   * the term does not exist.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    if (context.docFreq() == 0) {\n      return null;\n    } else {\n      return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n  }\n\n","bugFix":["07d5ffcfd6079f307f8761e28519766a9ad27f2c","9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /**\n   * Returns {@link TermStatistics} for a term, or {@code null} if\n   * the term does not exist.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n    if (context.docFreq() == 0) {\n      return null;\n    } else {\n      return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term, or {@code null} if\n   * the term does not exist.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    if (context.docFreq() == 0) {\n      return null;\n    } else {\n      return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns {@link TermStatistics} for a term, or {@code null} if\n   * the term does not exist.\n   * \n   * This can be overridden for example, to return a term's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    if (context.docFreq() == 0) {\n      return null;\n    } else {\n      return new TermStatistics(term.bytes(), context.docFreq(), context.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e87ea9fb673e8638747af83477322f07ed5a8b95":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["e87ea9fb673e8638747af83477322f07ed5a8b95"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e87ea9fb673e8638747af83477322f07ed5a8b95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"e87ea9fb673e8638747af83477322f07ed5a8b95":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}