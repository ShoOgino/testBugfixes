{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#getMinCompetitiveScore(float,double).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#getMinCompetitiveScore(float,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the minimum score that a Scorer must produce in order for a hit to\n   * be competitive.\n   */\n  private float getMinCompetitiveScore(float minScoreSum, double sumOfOtherMaxScores) {\n    assert numClauses > 0;\n    if (minScoreSum <= sumOfOtherMaxScores) {\n      return 0f;\n    }\n\n    // We need to find a value 'minScore' so that 'minScore + sumOfOtherMaxScores <= minScoreSum'\n    // TODO: is there an efficient way to find the greatest value that meets this requirement?\n    float minScore = (float) (minScoreSum - sumOfOtherMaxScores);\n    int iters = 0;\n    while (sumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum) {\n      // Important: use ulp of minScoreSum and not minScore to make sure that we\n      // converge quickly.\n      minScore -= Math.ulp(minScoreSum);\n      // this should converge in at most two iterations:\n      //  - one because of the subtraction rounding error\n      //  - one because of the error introduced by sumUpperBound\n      assert ++iters <= 2: iters;\n    }\n    return Math.max(minScore, 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#getMinCompetitiveScore(float,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the minimum score that a Scorer must produce in order for a hit to\n   * be competitive.\n   */\n  private float getMinCompetitiveScore(float minScoreSum, double sumOfOtherMaxScores) {\n    assert numClauses > 0;\n    if (minScoreSum <= sumOfOtherMaxScores) {\n      return 0f;\n    }\n\n    // We need to find a value 'minScore' so that 'minScore + sumOfOtherMaxScores <= minScoreSum'\n    // TODO: is there an efficient way to find the greatest value that meets this requirement?\n    float minScore = (float) (minScoreSum - sumOfOtherMaxScores);\n    int iters = 0;\n    while (sumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum) {\n      // Important: use ulp of minScoreSum and not minScore to make sure that we\n      // converge quickly.\n      minScore -= Math.ulp(minScoreSum);\n      // this should converge in at most two iterations:\n      //  - one because of the subtraction rounding error\n      //  - one because of the error introduced by sumUpperBound\n      assert ++iters <= 2: iters;\n    }\n    return Math.max(minScore, 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#getMinCompetitiveScore(float,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the minimum score that a Scorer must produce in order for a hit to\n   * be competitive.\n   */\n  private float getMinCompetitiveScore(float minScoreSum, double sumOfOtherMaxScores) {\n    assert numClauses > 0;\n    if (minScoreSum <= sumOfOtherMaxScores) {\n      return 0f;\n    }\n\n    // We need to find a value 'minScore' so that 'minScore + sumOfOtherMaxScores <= minScoreSum'\n    // TODO: is there an efficient way to find the greatest value that meets this requirement?\n    float minScore = (float) (minScoreSum - sumOfOtherMaxScores);\n    int iters = 0;\n    while (scoreSumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum) {\n      // Important: use ulp of minScoreSum and not minScore to make sure that we\n      // converge quickly.\n      minScore -= Math.ulp(minScoreSum);\n      // this should converge in at most two iterations:\n      //  - one because of the subtraction rounding error\n      //  - one because of the error introduced by sumUpperBound\n      assert ++iters <= 2 : iters;\n    }\n    return Math.max(minScore, 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}