{"path":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"/dev/null","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator==null) return;\n\n    LRUCache other = (LRUCache)old;\n\n    // warm entries\n    if (autowarmCount != 0) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        int sz = other.map.size();\n        if (autowarmCount!=-1) sz = Math.min(sz,autowarmCount);\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry entry = (Map.Entry)iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50b25548d261afcf52a3ad2f48029de74fdfa668","date":1217398156,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache other = (LRUCache)old;\n\n    // warm entries\n    if (autowarmCount != 0) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        int sz = other.map.size();\n        if (autowarmCount!=-1) sz = Math.min(sz,autowarmCount);\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry entry = (Map.Entry)iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator==null) return;\n\n    LRUCache other = (LRUCache)old;\n\n    // warm entries\n    if (autowarmCount != 0) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        int sz = other.map.size();\n        if (autowarmCount!=-1) sz = Math.min(sz,autowarmCount);\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry entry = (Map.Entry)iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd10f25652bcb979f0a522653b94f86ad65f6656","date":1260783720,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarmCount != 0) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        int sz = other.map.size();\n        if (autowarmCount!=-1) sz = Math.min(sz,autowarmCount);\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache other = (LRUCache)old;\n\n    // warm entries\n    if (autowarmCount != 0) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        int sz = other.map.size();\n        if (autowarmCount!=-1) sz = Math.min(sz,autowarmCount);\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry entry = (Map.Entry)iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"50b25548d261afcf52a3ad2f48029de74fdfa668":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"dd10f25652bcb979f0a522653b94f86ad65f6656":["50b25548d261afcf52a3ad2f48029de74fdfa668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["50b25548d261afcf52a3ad2f48029de74fdfa668"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50b25548d261afcf52a3ad2f48029de74fdfa668":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"dd10f25652bcb979f0a522653b94f86ad65f6656":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd10f25652bcb979f0a522653b94f86ad65f6656","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}