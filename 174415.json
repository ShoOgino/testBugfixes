{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","commits":[{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    traverseZkTree(root, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","sourceNew":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    traverseZkTree(root, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","sourceNew":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.debug(\"Updated ACL on {}\", path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","sourceNew":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.debug(\"Updated ACL on {}\", path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#updateACLs(String).mjava","sourceNew":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    ZkMaintenanceUtils.traverseZkTree(this, root, ZkMaintenanceUtils.VISIT_ORDER.VISIT_POST, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.debug(\"Updated ACL on {}\", path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Update all ACLs for a zk tree based on our configured {@link ZkACLProvider}.\n   * @param root the root node to recursively update\n   */\n  public void updateACLs(final String root) throws KeeperException, InterruptedException {\n    traverseZkTree(root, path -> {\n      try {\n        setACL(path, getZkACLProvider().getACLsToAdd(path), true);\n        log.info(\"Updated ACL on \" + path);\n      } catch (NoNodeException e) {\n        // If a node was deleted, don't bother trying to set ACLs on it.\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","962cd4f5e313777f35da8f521265323e84184929"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["67cf727e72c71906ffd390c61b50a1c60f2ebd49","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}