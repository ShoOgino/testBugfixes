{"path":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","sourceOld":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","sourceOld":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricsContext, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","sourceOld":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricManager, String, String, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricsContext#registerMetricName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrInfoBean#registerMetricName(String).mjava","sourceNew":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricsContext, String)}).\n   */\n  public void registerMetricName(String name) {\n    metricNames.add(name);\n  }\n\n","sourceOld":"  /** Register a metric name that this component reports. This method is called by various\n   * metric registration methods in {@link org.apache.solr.metrics.SolrMetricManager} in order\n   * to capture what metric names are reported from this component (which in turn is called\n   * from {@link org.apache.solr.metrics.SolrMetricProducer#initializeMetrics(SolrMetricsContext, String)}).\n   * <p>Default implementation registers all metrics added by a component. Implementations may\n   * override this to avoid reporting some or all metrics returned by {@link #getMetricsSnapshot()}</p>\n   */\n  default void registerMetricName(String name) {\n    Set<String> names = getMetricNames();\n    if (names != null) {\n      names.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}