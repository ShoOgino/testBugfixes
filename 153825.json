{"path":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","commits":[{"id":"3ee067e27d1cce6d2d5d64280007410c2e1a38d8","date":1001438945,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Undoes some changes made by substitute(). That are character pairs and\n\t * character combinations.\n\t *\n\t * @return  The term without the not human reaqdable substitutions.\n\t */\n\tprivate StringBuffer resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b027969b494a02d6f7a03a43537cc6935afce2a","date":1008019104,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"\t/**\n\t * Undoes the changes made by substitute(). That are character pairs and\n\t * character combinations. Umlauts will remain as their corresponding vowel,\n\t * as \"�\" remains as \"ss\".\n\t *\n\t * @return  The term without the not human readable substitutions.\n\t */\n\tprivate StringBuffer resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","sourceOld":"\t/**\n\t * Undoes some changes made by substitute(). That are character pairs and\n\t * character combinations.\n\t *\n\t * @return  The term without the not human reaqdable substitutions.\n\t */\n\tprivate StringBuffer resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3","date":1013649547,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     *\n     * @return  The term without the not human readable substitutions.\n     */\n    private StringBuffer resubstitute( StringBuffer buffer ) {\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    if ( buffer.charAt( c ) == '*' ) {\n\t\tchar x = buffer.charAt( c - 1 );\n\t\tbuffer.setCharAt( c, x );\n\t    }\n\t    else if ( buffer.charAt( c ) == '$' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'c' );\n\t\tbuffer.insert( c + 1, 'h' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '%' ) {\n\t\tbuffer.setCharAt( c, 'e' );\n\t\tbuffer.insert( c + 1, 'i' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '&' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'e' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '#' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'g' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '!' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, 't' );\n\t    }\n\t}\n\treturn buffer;\n    }\n\n","sourceOld":"\t/**\n\t * Undoes the changes made by substitute(). That are character pairs and\n\t * character combinations. Umlauts will remain as their corresponding vowel,\n\t * as \"�\" remains as \"ss\".\n\t *\n\t * @return  The term without the not human readable substitutions.\n\t */\n\tprivate StringBuffer resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e","date":1027293369,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n    }\n\n","sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     *\n     * @return  The term without the not human readable substitutions.\n     */\n    private StringBuffer resubstitute( StringBuffer buffer ) {\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    if ( buffer.charAt( c ) == '*' ) {\n\t\tchar x = buffer.charAt( c - 1 );\n\t\tbuffer.setCharAt( c, x );\n\t    }\n\t    else if ( buffer.charAt( c ) == '$' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'c' );\n\t\tbuffer.insert( c + 1, 'h' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '%' ) {\n\t\tbuffer.setCharAt( c, 'e' );\n\t\tbuffer.insert( c + 1, 'i' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '&' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'e' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '#' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'g' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '!' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, 't' );\n\t    }\n\t}\n\treturn buffer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    if ( buffer.charAt( c ) == '*' ) {\n\t\tchar x = buffer.charAt( c - 1 );\n\t\tbuffer.setCharAt( c, x );\n\t    }\n\t    else if ( buffer.charAt( c ) == '$' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'c' );\n\t\tbuffer.insert( c + 1, 'h' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '%' ) {\n\t\tbuffer.setCharAt( c, 'e' );\n\t\tbuffer.insert( c + 1, 'i' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '&' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'e' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '#' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'g' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '!' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, 't' );\n\t    }\n\t}\n    }\n\n","sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer ) {\n\t\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t\t\tif ( buffer.charAt( c ) == '*' ) {\n\t\t\t\tchar x = buffer.charAt( c - 1 );\n\t\t\t\tbuffer.setCharAt( c, x );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '$' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '�' ) {\n\t\t\t\tbuffer.setCharAt( c, 'c' );\n\t\t\t\tbuffer.insert( c + 1, 'h' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '%' ) {\n\t\t\t\tbuffer.setCharAt( c, 'e' );\n\t\t\t\tbuffer.insert( c + 1, 'i' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '&' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'e' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '#' ) {\n\t\t\t\tbuffer.setCharAt( c, 'i' );\n\t\t\t\tbuffer.insert( c + 1, 'g' );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( c ) == '!' ) {\n\t\t\t\tbuffer.setCharAt( c, 's' );\n\t\t\t\tbuffer.insert( c + 1, 't' );\n\t\t\t}\n\t\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d195ac4f5f0fd16249e88707973706feb1214df0","date":1080662088,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n\tfor ( int c = 0; c < buffer.length(); c++ ) {\n\t    if ( buffer.charAt( c ) == '*' ) {\n\t\tchar x = buffer.charAt( c - 1 );\n\t\tbuffer.setCharAt( c, x );\n\t    }\n\t    else if ( buffer.charAt( c ) == '$' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n\t    }\n\t    else if ( buffer.charAt( c ) == '�' ) {\n\t\tbuffer.setCharAt( c, 'c' );\n\t\tbuffer.insert( c + 1, 'h' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '%' ) {\n\t\tbuffer.setCharAt( c, 'e' );\n\t\tbuffer.insert( c + 1, 'i' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '&' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'e' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '#' ) {\n\t\tbuffer.setCharAt( c, 'i' );\n\t\tbuffer.insert( c + 1, 'g' );\n\t    }\n\t    else if ( buffer.charAt( c ) == '!' ) {\n\t\tbuffer.setCharAt( c, 's' );\n\t\tbuffer.insert( c + 1, 't' );\n\t    }\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba81b33140312dc953ef8b8217e92c7de3da201d","date":1085948660,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"ß\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '§' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"�\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '�' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":null,"sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"ß\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '§' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"d195ac4f5f0fd16249e88707973706feb1214df0":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba81b33140312dc953ef8b8217e92c7de3da201d":["d195ac4f5f0fd16249e88707973706feb1214df0"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"]},"commit2Childs":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"d195ac4f5f0fd16249e88707973706feb1214df0":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["d195ac4f5f0fd16249e88707973706feb1214df0"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"ba81b33140312dc953ef8b8217e92c7de3da201d":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}