{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","commits":[{"id":"6e771d3bb64bb6db325ca1c015b256d08ad74424","date":1338972370,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    String origCreateTime = getCreateTime(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordinal, newOrdinal);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdinal);\n    \n    taxoWriter.close();\n    \n    String newCreateTime = getCreateTime(dir);\n    assertNotSame(\"create time should have been changed after replaceTaxonomy\", origCreateTime, newCreateTime);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78e718e9c24ea4b55bce0b93f10b8560bec6e2f9","78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordinal, newOrdinal);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdinal);\n    \n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    String origCreateTime = getCreateTime(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordinal, newOrdinal);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdinal);\n    \n    taxoWriter.close();\n    \n    String newCreateTime = getCreateTime(dir);\n    assertNotSame(\"create time should have been changed after replaceTaxonomy\", origCreateTime, newCreateTime);\n    \n    dir.close();\n    input.close();\n  }\n\n","bugFix":["6e771d3bb64bb6db325ca1c015b256d08ad74424"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78e718e9c24ea4b55bce0b93f10b8560bec6e2f9","date":1355652631,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new CategoryPath(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordinal, newOrdinal);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdinal);\n    \n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","bugFix":["6e771d3bb64bb6db325ca1c015b256d08ad74424"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new CategoryPath(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdinal = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordinal, newOrdinal);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdinal);\n    \n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new FacetLabel(\"b\"));\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new FacetLabel(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new FacetLabel(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new CategoryPath(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new FacetLabel(\"b\"));\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new FacetLabel(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new FacetLabel(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxonomy() throws Exception {\n    Directory input = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(input);\n    int ordA = taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.close();\n    \n    Directory dir = newDirectory();\n    taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int ordB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.commit();\n    \n    long origEpoch = getEpoch(dir);\n    \n    // replace the taxonomy with the input one\n    taxoWriter.replaceTaxonomy(input);\n    \n    // LUCENE-4633: make sure that category \"a\" is not added again in any case\n    taxoWriter.addTaxonomy(input, new MemoryOrdinalMap());\n    assertEquals(\"no categories should have been added\", 2, taxoWriter.getSize()); // root + 'a'\n    assertEquals(\"category 'a' received new ordinal?\", ordA, taxoWriter.addCategory(new CategoryPath(\"a\")));\n\n    // add the same category again -- it should not receive the same ordinal !\n    int newOrdB = taxoWriter.addCategory(new CategoryPath(\"b\"));\n    assertNotSame(\"new ordinal cannot be the original ordinal\", ordB, newOrdB);\n    assertEquals(\"ordinal should have been 2 since only one category was added by replaceTaxonomy\", 2, newOrdB);\n\n    taxoWriter.close();\n    \n    long newEpoch = getEpoch(dir);\n    assertTrue(\"index epoch should have been updated after replaceTaxonomy\", origEpoch < newEpoch);\n    \n    dir.close();\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","78e718e9c24ea4b55bce0b93f10b8560bec6e2f9"],"78e718e9c24ea4b55bce0b93f10b8560bec6e2f9":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["6e771d3bb64bb6db325ca1c015b256d08ad74424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e771d3bb64bb6db325ca1c015b256d08ad74424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["78e718e9c24ea4b55bce0b93f10b8560bec6e2f9","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78e718e9c24ea4b55bce0b93f10b8560bec6e2f9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"78e718e9c24ea4b55bce0b93f10b8560bec6e2f9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","78e718e9c24ea4b55bce0b93f10b8560bec6e2f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e771d3bb64bb6db325ca1c015b256d08ad74424"],"6e771d3bb64bb6db325ca1c015b256d08ad74424":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}