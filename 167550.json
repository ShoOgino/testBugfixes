{"path":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#getSentinelObject().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#getSentinelObject().mjava","pathOld":"backwards/src/java/org/apache/lucene/util/PriorityQueue#getSentinelObject().mjava","sourceNew":"  /**\n   * This method can be overridden by extending classes to return a sentinel\n   * object which will be used by {@link #initialize(int)} to fill the queue, so\n   * that the code which uses that queue can always assume it's full and only\n   * change the top without attempting to insert any new object.<br>\n   * \n   * Those sentinel values should always compare worse than any non-sentinel\n   * value (i.e., {@link #lessThan} should always favor the\n   * non-sentinel values).<br>\n   * \n   * By default, this method returns false, which means the queue will not be\n   * filled with sentinel values. Otherwise, the value returned will be used to\n   * pre-populate the queue. Adds sentinel values to the queue.<br>\n   * \n   * If this method is extended to return a non-null value, then the following\n   * usage pattern is recommended:\n   * \n   * <pre>\n   * // extends getSentinelObject() to return a non-null value.\n   * PriorityQueue<MyObject> pq = new MyQueue<MyObject>(numHits);\n   * // save the 'top' element, which is guaranteed to not be null.\n   * MyObject pqTop = pq.top();\n   * &lt;...&gt;\n   * // now in order to add a new element, which is 'better' than top (after \n   * // you've verified it is better), it is as simple as:\n   * pqTop.change().\n   * pqTop = pq.updateTop();\n   * </pre>\n   * \n   * <b>NOTE:</b> if this method returns a non-null value, it will be called by\n   * {@link #initialize(int)} {@link #size()} times, relying on a new object to\n   * be returned and will not check if it's null again. Therefore you should\n   * ensure any call to this method creates a new instance and behaves\n   * consistently, e.g., it cannot return null if it previously returned\n   * non-null.\n   * \n   * @return the sentinel object to use to pre-populate the queue, or null if\n   *         sentinel objects are not supported.\n   */\n  protected T getSentinelObject() {\n    return null;\n  }\n\n","sourceOld":"  /**\n   * This method can be overridden by extending classes to return a sentinel\n   * object which will be used by {@link #initialize(int)} to fill the queue, so\n   * that the code which uses that queue can always assume it's full and only\n   * change the top without attempting to insert any new object.<br>\n   * \n   * Those sentinel values should always compare worse than any non-sentinel\n   * value (i.e., {@link #lessThan} should always favor the\n   * non-sentinel values).<br>\n   * \n   * By default, this method returns false, which means the queue will not be\n   * filled with sentinel values. Otherwise, the value returned will be used to\n   * pre-populate the queue. Adds sentinel values to the queue.<br>\n   * \n   * If this method is extended to return a non-null value, then the following\n   * usage pattern is recommended:\n   * \n   * <pre>\n   * // extends getSentinelObject() to return a non-null value.\n   * PriorityQueue<MyObject> pq = new MyQueue<MyObject>(numHits);\n   * // save the 'top' element, which is guaranteed to not be null.\n   * MyObject pqTop = pq.top();\n   * &lt;...&gt;\n   * // now in order to add a new element, which is 'better' than top (after \n   * // you've verified it is better), it is as simple as:\n   * pqTop.change().\n   * pqTop = pq.updateTop();\n   * </pre>\n   * \n   * <b>NOTE:</b> if this method returns a non-null value, it will be called by\n   * {@link #initialize(int)} {@link #size()} times, relying on a new object to\n   * be returned and will not check if it's null again. Therefore you should\n   * ensure any call to this method creates a new instance and behaves\n   * consistently, e.g., it cannot return null if it previously returned\n   * non-null.\n   * \n   * @return the sentinel object to use to pre-populate the queue, or null if\n   *         sentinel objects are not supported.\n   */\n  protected T getSentinelObject() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#getSentinelObject().mjava","sourceNew":null,"sourceOld":"  /**\n   * This method can be overridden by extending classes to return a sentinel\n   * object which will be used by {@link #initialize(int)} to fill the queue, so\n   * that the code which uses that queue can always assume it's full and only\n   * change the top without attempting to insert any new object.<br>\n   * \n   * Those sentinel values should always compare worse than any non-sentinel\n   * value (i.e., {@link #lessThan} should always favor the\n   * non-sentinel values).<br>\n   * \n   * By default, this method returns false, which means the queue will not be\n   * filled with sentinel values. Otherwise, the value returned will be used to\n   * pre-populate the queue. Adds sentinel values to the queue.<br>\n   * \n   * If this method is extended to return a non-null value, then the following\n   * usage pattern is recommended:\n   * \n   * <pre>\n   * // extends getSentinelObject() to return a non-null value.\n   * PriorityQueue<MyObject> pq = new MyQueue<MyObject>(numHits);\n   * // save the 'top' element, which is guaranteed to not be null.\n   * MyObject pqTop = pq.top();\n   * &lt;...&gt;\n   * // now in order to add a new element, which is 'better' than top (after \n   * // you've verified it is better), it is as simple as:\n   * pqTop.change().\n   * pqTop = pq.updateTop();\n   * </pre>\n   * \n   * <b>NOTE:</b> if this method returns a non-null value, it will be called by\n   * {@link #initialize(int)} {@link #size()} times, relying on a new object to\n   * be returned and will not check if it's null again. Therefore you should\n   * ensure any call to this method creates a new instance and behaves\n   * consistently, e.g., it cannot return null if it previously returned\n   * non-null.\n   * \n   * @return the sentinel object to use to pre-populate the queue, or null if\n   *         sentinel objects are not supported.\n   */\n  protected T getSentinelObject() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}