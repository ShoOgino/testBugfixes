{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      try {\n        read(input, name);\n      } catch (IOException ioe) {\n        if (format == FORMAT_PRE) {\n          // LUCENE-1623: FORMAT_PRE (before there was a\n          // format) may be 2.3.2 (pre-utf8) or 2.4.x (utf8)\n          // encoding; retry with input set to pre-utf8\n          input.seek(0);\n          input.setModifiedUTF8StringsMode();\n          byNumber.clear();\n          byName.clear();\n          try {\n            read(input, name);\n          } catch (Throwable t) {\n            // Ignore any new exception & throw original IOE\n            throw ioe;\n          }\n        } else {\n          // The IOException cannot be caused by\n          // LUCENE-1623, so re-throw it\n          throw ioe;\n        }\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      try {\n        read(input, name);\n      } catch (IOException ioe) {\n        if (format == FORMAT_PRE) {\n          // LUCENE-1623: FORMAT_PRE (before there was a\n          // format) may be 2.3.2 (pre-utf8) or 2.4.x (utf8)\n          // encoding; retry with input set to pre-utf8\n          input.seek(0);\n          input.setModifiedUTF8StringsMode();\n          byNumber.clear();\n          byName.clear();\n          try {\n            read(input, name);\n          } catch (Throwable t) {\n            // Ignore any new exception & throw original IOE\n            throw ioe;\n          }\n        } else {\n          // The IOException cannot be caused by\n          // LUCENE-1623, so re-throw it\n          throw ioe;\n        }\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      try {\n        read(input, name);\n      } catch (IOException ioe) {\n        if (format == FORMAT_PRE) {\n          // LUCENE-1623: FORMAT_PRE (before there was a\n          // format) may be 2.3.2 (pre-utf8) or 2.4.x (utf8)\n          // encoding; retry with input set to pre-utf8\n          input.seek(0);\n          input.setModifiedUTF8StringsMode();\n          byNumber.clear();\n          byName.clear();\n          try {\n            read(input, name);\n          } catch (Throwable t) {\n            // Ignore any new exception & throw original IOE\n            throw ioe;\n          }\n        } else {\n          // The IOException cannot be caused by\n          // LUCENE-1623, so re-throw it\n          throw ioe;\n        }\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    /*\n     * TODO: in the read case we create a FNBM for each FIs which is a wast of resources.\n     * Yet, we must not seed this with a global map since due to addIndexes(Dir) we could\n     * have non-matching field numbers. we should use a null FNBM here and set the FIs \n     * to READ-ONLY once this ctor is done. Each modificator should check if we are readonly\n     * with an assert\n     */\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c2cf5832e0f01230bc2c4886e16887a0d1f3341","date":1301042882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    /*\n     * TODO: in the read case we create a FNBM for each FIs which is a wast of resources.\n     * Yet, we must not seed this with a global map since due to addIndexes(Dir) we could\n     * have non-matching field numbers. we should use a null FNBM here and set the FIs \n     * to READ-ONLY once this ctor is done. Each modificator should check if we are readonly\n     * with an assert\n     */\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput\n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this(new FieldNumberBiMap());\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null, null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#FieldInfos(Directory,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a FieldInfos object using the directory and the name of the file\n   * IndexInput. \n   * <p>\n   * Note: The created instance will be read-only\n   * \n   * @param d The directory to open the IndexInput from\n   * @param name The name of the file to open the IndexInput from in the Directory\n   * @throws IOException\n   */\n  public FieldInfos(Directory d, String name) throws IOException {\n    this((FieldNumberBiMap)null); // use null here to make this FIs Read-Only\n    final IndexInput input = d.openInput(name, IOContext.READONCE);\n    try {\n      read(input, name);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["e92442af786151ee55bc283eb472f629e3c7b52b"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","08932c793647a36953d1816b1060121f48820d3f"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["1224a4027481acce15495b03bce9b48b93b42722"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e92442af786151ee55bc283eb472f629e3c7b52b":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"08932c793647a36953d1816b1060121f48820d3f":["6267e1ce56c2eec111425690cd04e251b6f14952"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e92442af786151ee55bc283eb472f629e3c7b52b"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["08932c793647a36953d1816b1060121f48820d3f","e92442af786151ee55bc283eb472f629e3c7b52b"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["08932c793647a36953d1816b1060121f48820d3f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e92442af786151ee55bc283eb472f629e3c7b52b","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"6267e1ce56c2eec111425690cd04e251b6f14952":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["e92442af786151ee55bc283eb472f629e3c7b52b"],"e92442af786151ee55bc283eb472f629e3c7b52b":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}