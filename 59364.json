{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object value = null;\n        try {\n          value = resolver.resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object value = null;\n        try {\n          value = resolver.resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object value = null;\n        try {\n          value = resolver.resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        Object value = null;\n        try {\n          value = context.getVariableResolver().resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object value = null;\n        try {\n          value = resolver.resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"850e6bf528dcc8def8f27ada3cfa6ba4d2336375","date":1235458726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of URL-encoding expressions. The expressions are evaluated\n   * using a <code>VariableResolver</code> </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'encodeUrl' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n\n        try {\n          return URLEncoder.encode(s.toString(), \"UTF-8\");\n        } catch (Exception e) {\n          wrapAndThrow(SEVERE, e, \"Unable to encode expression: \" + expression + \" with value: \" + s);\n          return null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of URL-encoding\n   * expressions. The expressions are evaluated using a\n   * <code>VariableResolver</code>\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding\n   *         expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        Object value = null;\n        try {\n          value = context.getVariableResolver().resolve(expression);\n          if (value == null)\n            return null;\n\n          return URLEncoder.encode(value.toString(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to encode expression: \" + expression + \" with value: \"\n                          + value, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getUrlEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of URL-encoding expressions. The expressions are evaluated\n   * using a <code>VariableResolver</code> </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'encodeUrl' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n\n        try {\n          return URLEncoder.encode(s.toString(), \"UTF-8\");\n        } catch (Exception e) {\n          wrapAndThrow(SEVERE, e, \"Unable to encode expression: \" + expression + \" with value: \" + s);\n          return null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of URL-encoding expressions. The expressions are evaluated\n   * using a <code>VariableResolver</code> </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of URL-encoding expressions.\n   */\n  public static Evaluator getUrlEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'encodeUrl' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n\n        try {\n          return URLEncoder.encode(s.toString(), \"UTF-8\");\n        } catch (Exception e) {\n          wrapAndThrow(SEVERE, e, \"Unable to encode expression: \" + expression + \" with value: \" + s);\n          return null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"9d532a814197216f5e180897b172e87e0158690b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["9d532a814197216f5e180897b172e87e0158690b"],"ad94625fb8d088209f46650c8097196fec67f00c":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["ad94625fb8d088209f46650c8097196fec67f00c"],"9d532a814197216f5e180897b172e87e0158690b":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["9d532a814197216f5e180897b172e87e0158690b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}