{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupPrefix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookupAffix(prefixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookupAffix(prefixes, word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#lookupPrefix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookupAffix(prefixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  public List<HunspellAffix> lookupPrefix(char word[], int offset, int length) {\n    return prefixes.get(word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b58bd8dd457a9b46b007c641d5b6e747afb8904a","date":1393616676,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookup(prefixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookupAffix(prefixes, word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db","date":1397463062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupPrefix(char[],int,int).mjava","sourceNew":"  // only for testing\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookup(prefixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix prefixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix prefixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupPrefix(char word[], int offset, int length) {\n    return lookup(prefixes, word, offset, length);\n  }\n\n","bugFix":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}