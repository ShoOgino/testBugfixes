{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","commits":[{"id":"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29","date":1332432942,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random.nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random.nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}