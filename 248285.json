{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildReturnFields().mjava","commits":[{"id":"373ea6b2f051d2a56e8e78a5da11de7aa52ed399","date":1536159014,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildReturnFields().mjava","pathOld":"/dev/null","sourceNew":"  private void testChildReturnFields() throws Exception {\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\" fl=\\\"intDvoDefault,child_fl:[value v='child_fl_test']\\\"]\"),\n        \"/response/docs/[0]/intDefault==42\",\n        \"/response/docs/[0]/_childDocuments_/[0]/intDvoDefault==42\",\n        \"/response/docs/[0]/_childDocuments_/[0]/child_fl=='child_fl_test'\");\n\n    try(SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"intDefault,[child parentFilter=\\\"subject:parentDocument\\\" fl=\\\"intDvoDefault, [docid]\\\"]\")) {\n      BasicResultContext res = (BasicResultContext) h.queryAndResponse(\"/select\", req).getResponse();\n      Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n      while (docsStreamer.hasNext()) {\n        SolrDocument doc = docsStreamer.next();\n        assertFalse(\"root docs should not contain fields specified in child return fields\", doc.containsKey(\"intDvoDefault\"));\n        assertTrue(\"root docs should contain fields specified in query return fields\", doc.containsKey(\"intDefault\"));\n        Collection<SolrDocument> childDocs = doc.getChildDocuments();\n        for(SolrDocument childDoc: childDocs) {\n          assertEquals(\"child doc should only have 2 keys\", 2, childDoc.keySet().size());\n          assertTrue(\"child docs should contain fields specified in child return fields\", childDoc.containsKey(\"intDvoDefault\"));\n          assertEquals(\"child docs should contain fields specified in child return fields\",\n              42, childDoc.getFieldValue(\"intDvoDefault\"));\n          assertTrue(\"child docs should contain fields specified in child return fields\", childDoc.containsKey(\"[docid]\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}