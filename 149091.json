{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\");\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\");\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\");\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\");\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\");\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\");\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\");\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\");\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random));\n    out.writeInt(0);\n    try {\n      newDir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n      fail(\"file does already exist\");\n    } catch (IOException e) {\n      //\n    }\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}