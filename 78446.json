{"path":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    for(IndexCommit commit : commits) {\n      if (refCounts.containsKey(commit.getGeneration())) {\n        indexCommits.put(commit.getGeneration(), commit);\n      }\n    }\n    lastCommit = commits.get(commits.size() - 1);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    initCalled = true;\n    primary.onInit(wrapCommits(commits));\n    for(IndexCommit commit : commits) {\n      if (refCounts.containsKey(commit.getGeneration())) {\n        indexCommits.put(commit.getGeneration(), commit);\n      }\n    }\n    if (!commits.isEmpty()) {\n      lastCommit = commits.get(commits.size() - 1);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    for(IndexCommit commit : commits) {\n      if (refCounts.containsKey(commit.getGeneration())) {\n        indexCommits.put(commit.getGeneration(), commit);\n      }\n    }\n    lastCommit = commits.get(commits.size() - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dce99db8590cdd065839ae4e6b228b66eeee8f38"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a207624ce3e468bca1819861084438d936e3b1c":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8a207624ce3e468bca1819861084438d936e3b1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}