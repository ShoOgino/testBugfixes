{"path":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testNextToken1().mjava","commits":[{"id":"a62060bf935e54f2cf73861fbc773508ab49aeb9","date":1333411307,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testNextToken1().mjava","pathOld":"/dev/null","sourceNew":"  // Single line (without comment)\n  public void testNextToken1() throws IOException {\n    String code = \"abc,def, hijk,  lmnop,   qrst,uv ,wxy   ,z , ,\";\n    TestCSVParser parser = new TestCSVParser(new StringReader(code));\n    assertEquals(CSVParser.TT_TOKEN + \";abc;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";def;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";hijk;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";lmnop;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";qrst;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";uv;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";wxy;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";z;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());\n    assertEquals(CSVParser.TT_EOF + \";;\", parser.testNextToken());  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a62060bf935e54f2cf73861fbc773508ab49aeb9"]},"commit2Childs":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}