{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseParallelTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for parallel tasks */\n  public void testParseParallelTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"[ \"+taskStr+\" ] : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertTrue(\"sequence for \"+parsedTasks+\" should be parallel!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}