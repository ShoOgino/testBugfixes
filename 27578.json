{"path":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","commits":[{"id":"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4","date":1364235374,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.BYTE));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","sourceNew":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.BYTE));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","sourceNew":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.BYTE));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersOutOfOrder1().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","sourceNew":"  public void testFiltersOutOfOrder1() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    List<Query> filters = Arrays.<Query>asList(new TermQuery(new Term(\"test\", \"field\")),\n                                               new TermQuery(new Term(\"test2\", \"field2\")));\n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = Arrays.<Query>asList(new TermQuery(new Term(\"test2\", \"field2\")),\n                                                new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    assertKeyEquals(qrk1, qrk2);\n  }\n\n","sourceOld":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"]},"commit2Childs":{"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}