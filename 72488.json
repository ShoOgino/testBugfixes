{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","commits":[{"id":"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","date":1362244723,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // a bare * should be treated as *:*\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"*\", \"df\", \"doesnotexist_s\", \"sow\", sow)\n          , \"/response/docs/[0]==\"   // make sure we get something...\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:*\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:*\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:( * * * )\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // a bare * should be treated as *:*\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"*\", \"df\", \"doesnotexist_s\", \"sow\", sow)\n          , \"/response/docs/[0]==\"   // make sure we get something...\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:*\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:*\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"doesnotexist_s:( * * * )\", \"sow\", sow)\n          , \"/response/numFound==0\"   // nothing should be found\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"defType\",\"edismax\",\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"c03778630c4604270d88c148afb8c7de35b51d3c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"e55782fb51a6e9789542818eb2161a3247f39ace":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c03778630c4604270d88c148afb8c7de35b51d3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}