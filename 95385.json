{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#randomNoOp(LightAutomaton).mjava","commits":[{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#randomNoOp(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  private LightAutomaton randomNoOp(LightAutomaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return BasicOperations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperationsLight.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return BasicOperations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = SpecialOperations.reverse(a);\n      a = randomNoOp(a);\n      return SpecialOperations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyStringLight());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return BasicOperations.unionLight(a, BasicAutomata.makeEmptyLight());\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#randomNoOp(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#randomNoOp(LightAutomaton).mjava","sourceNew":"  private Automaton randomNoOp(Automaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return Operations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperations.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return Operations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = Operations.reverse(a);\n      a = randomNoOp(a);\n      return Operations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return Operations.concatenate(a, Automata.makeEmptyString());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return Operations.union(a, Automata.makeEmpty());\n    }\n    assert false;\n    return null;\n  }\n\n","sourceOld":"  private LightAutomaton randomNoOp(LightAutomaton a) {\n    switch (random().nextInt(5)) {\n    case 0:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: determinize\");\n      }\n      return BasicOperations.determinize(a);\n    case 1:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: minimize\");\n      }\n      return MinimizationOperationsLight.minimize(a);\n    case 2:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: removeDeadStates\");\n      }\n      return BasicOperations.removeDeadStates(a);\n    case 3:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: reverse reverse\");\n      }\n      a = SpecialOperations.reverse(a);\n      a = randomNoOp(a);\n      return SpecialOperations.reverse(a);\n    case 4:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: concat empty string\");\n      }\n      return BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyStringLight());\n    case 5:\n      if (VERBOSE) {\n        System.out.println(\"  randomNoOp: union empty automaton\");\n      }\n      return BasicOperations.unionLight(a, BasicAutomata.makeEmptyLight());\n    }\n    assert false;\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}