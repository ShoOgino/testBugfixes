{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#size(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#size(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RamUsageEstimator#size(Object).mjava","sourceNew":"  private long size(Object obj) {\n    if (obj == null) {\n      return 0;\n    }\n    // interned not part of this object\n    if (checkInterned && obj instanceof String\n        && obj == ((String) obj).intern()) { // interned string will be eligible\n                                             // for GC on\n                                             // estimateRamUsage(Object) return\n      return 0;\n    }\n\n    // skip if we have seen before\n    if (seen.containsKey(obj)) {\n      return 0;\n    }\n\n    // add to seen\n    seen.put(obj, null);\n\n    Class<?> clazz = obj.getClass();\n    if (clazz.isArray()) {\n      return sizeOfArray(obj);\n    }\n\n    long size = 0;\n\n    // walk type hierarchy\n    while (clazz != null) {\n      Field[] fields = clazz.getDeclaredFields();\n      for (int i = 0; i < fields.length; i++) {\n        if (Modifier.isStatic(fields[i].getModifiers())) {\n          continue;\n        }\n\n        if (fields[i].getType().isPrimitive()) {\n          size += memoryModel.getPrimitiveSize(fields[i].getType());\n        } else {\n          size += refSize;\n          fields[i].setAccessible(true);\n          try {\n            Object value = fields[i].get(obj);\n            if (value != null) {\n              size += size(value);\n            }\n          } catch (IllegalAccessException ex) {\n            // ignore for now?\n          }\n        }\n\n      }\n      clazz = clazz.getSuperclass();\n    }\n    size += classSize;\n    return size;\n  }\n\n","sourceOld":"  private long size(Object obj) {\n    if (obj == null) {\n      return 0;\n    }\n    // interned not part of this object\n    if (checkInterned && obj instanceof String\n        && obj == ((String) obj).intern()) { // interned string will be eligible\n                                             // for GC on\n                                             // estimateRamUsage(Object) return\n      return 0;\n    }\n\n    // skip if we have seen before\n    if (seen.containsKey(obj)) {\n      return 0;\n    }\n\n    // add to seen\n    seen.put(obj, null);\n\n    Class<?> clazz = obj.getClass();\n    if (clazz.isArray()) {\n      return sizeOfArray(obj);\n    }\n\n    long size = 0;\n\n    // walk type hierarchy\n    while (clazz != null) {\n      Field[] fields = clazz.getDeclaredFields();\n      for (int i = 0; i < fields.length; i++) {\n        if (Modifier.isStatic(fields[i].getModifiers())) {\n          continue;\n        }\n\n        if (fields[i].getType().isPrimitive()) {\n          size += memoryModel.getPrimitiveSize(fields[i].getType());\n        } else {\n          size += refSize;\n          fields[i].setAccessible(true);\n          try {\n            Object value = fields[i].get(obj);\n            if (value != null) {\n              size += size(value);\n            }\n          } catch (IllegalAccessException ex) {\n            // ignore for now?\n          }\n        }\n\n      }\n      clazz = clazz.getSuperclass();\n    }\n    size += classSize;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#size(Object).mjava","sourceNew":null,"sourceOld":"  private long size(Object obj) {\n    if (obj == null) {\n      return 0;\n    }\n    // interned not part of this object\n    if (checkInterned && obj instanceof String\n        && obj == ((String) obj).intern()) { // interned string will be eligible\n                                             // for GC on\n                                             // estimateRamUsage(Object) return\n      return 0;\n    }\n\n    // skip if we have seen before\n    if (seen.containsKey(obj)) {\n      return 0;\n    }\n\n    // add to seen\n    seen.put(obj, null);\n\n    Class<?> clazz = obj.getClass();\n    if (clazz.isArray()) {\n      return sizeOfArray(obj);\n    }\n\n    long size = 0;\n\n    // walk type hierarchy\n    while (clazz != null) {\n      Field[] fields = clazz.getDeclaredFields();\n      for (int i = 0; i < fields.length; i++) {\n        if (Modifier.isStatic(fields[i].getModifiers())) {\n          continue;\n        }\n\n        if (fields[i].getType().isPrimitive()) {\n          size += memoryModel.getPrimitiveSize(fields[i].getType());\n        } else {\n          size += refSize;\n          fields[i].setAccessible(true);\n          try {\n            Object value = fields[i].get(obj);\n            if (value != null) {\n              size += size(value);\n            }\n          } catch (IllegalAccessException ex) {\n            // ignore for now?\n          }\n        }\n\n      }\n      clazz = clazz.getSuperclass();\n    }\n    size += classSize;\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6c9e9b1251473f465b0443b56046b2658402da"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd6c9e9b1251473f465b0443b56046b2658402da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd6c9e9b1251473f465b0443b56046b2658402da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}