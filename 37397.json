{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"\tpublic void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tHits hits = initSearch(queryString);\n\t\tSystem.out.println(hits.length() + \" total matching documents\");\n\t\tQuery explainQuery;\n\t\tif (explain) {\n\t\t\tquery = explainQuery(queryString);\n\t\t}\n\n\n\t\tfinal int HITS_PER_PAGE = 10;\n\t\tmessage (\"--------------------------------------\");\n\t\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t\t\tint end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t\t\tfor (int ii = start; ii < end; ii++) {\n\t\t\t\tDocument doc = hits.doc(ii);\n\t\t\t\tmessage (\"---------------- \" + ii + \" score:\" + hits.score(ii) + \"---------------------\");\n\t\t\t\tprintHit(doc);\n\t\t\t\tif (showTokens) {\n\t\t\t\t\tinvertDocument(doc);\n\t\t\t\t}\n\t\t\t\tif (explain) {\n\t\t\t\t\tExplanation exp = searcher.explain(query, hits.id(ii));\n\t\t\t\t\tmessage(\"Explanation:\" + exp.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage (\"#################################################\");\n\n\t\t\tif (hits.length() > end) {\n\t\t\t\tSystem.out.print(\"more (y/n) ? \");\n\t\t\t\tqueryString = in.readLine();\n\t\t\t\tif (queryString.length() == 0 || queryString.charAt(0) == 'n')\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsearcher.close();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n        System.out.print(\"more (y/n) ? \");\n        queryString = in.readLine();\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"\tpublic void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tHits hits = initSearch(queryString);\n\t\tSystem.out.println(hits.length() + \" total matching documents\");\n\t\tQuery explainQuery;\n\t\tif (explain) {\n\t\t\tquery = explainQuery(queryString);\n\t\t}\n\n\n\t\tfinal int HITS_PER_PAGE = 10;\n\t\tmessage (\"--------------------------------------\");\n\t\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t\t\tint end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t\t\tfor (int ii = start; ii < end; ii++) {\n\t\t\t\tDocument doc = hits.doc(ii);\n\t\t\t\tmessage (\"---------------- \" + ii + \" score:\" + hits.score(ii) + \"---------------------\");\n\t\t\t\tprintHit(doc);\n\t\t\t\tif (showTokens) {\n\t\t\t\t\tinvertDocument(doc);\n\t\t\t\t}\n\t\t\t\tif (explain) {\n\t\t\t\t\tExplanation exp = searcher.explain(query, hits.id(ii));\n\t\t\t\t\tmessage(\"Explanation:\" + exp.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage (\"#################################################\");\n\n\t\t\tif (hits.length() > end) {\n\t\t\t\tSystem.out.print(\"more (y/n) ? \");\n\t\t\t\tqueryString = in.readLine();\n\t\t\t\tif (queryString.length() == 0 || queryString.charAt(0) == 'n')\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsearcher.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n        System.out.print(\"more (y/n) ? \");\n        queryString = in.readLine();\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n        System.out.print(\"more (y/n) ? \");\n        queryString = in.readLine();\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}