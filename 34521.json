{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  public void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                        final IndexOptions maxTestOptions,\n                        final IndexOptions maxIndexOptions,\n                        final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = TestUtil.nextInt(random, 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(new Random(random.nextLong()), this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(random, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxTestOptions,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  public void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                        final IndexOptions maxTestOptions,\n                        final IndexOptions maxIndexOptions,\n                        final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = TestUtil.nextInt(random, 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(new Random(random.nextLong()), this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(random, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxTestOptions,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  public void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                        final IndexOptions maxTestOptions,\n                        final IndexOptions maxIndexOptions,\n                        final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = LuceneTestCase.TEST_NIGHTLY ? TestUtil.nextInt(random, 2, 5) : 2;\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(new Random(random.nextLong()), this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(random, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  public void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                        final IndexOptions maxTestOptions,\n                        final IndexOptions maxIndexOptions,\n                        final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = TestUtil.nextInt(random, 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(new Random(random.nextLong()), this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(random, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}