{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(Map[String,Object]).mjava","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":"  private void verifyAutoScalingConf(Map<String, Object> autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy policy = new Policy(autoScalingConf);\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy()\n          .createSession(new SolrClientDataProvider(new ZkDistributedQueueFactory(container.getZkController().getZkClient()), build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy()\n          .createSession(new SolrClientDataProvider(new ZkDistributedQueueFactory(container.getZkController().getZkClient()), build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(container.getZkController().getZkClient());\n      Policy.Session session = autoScalingConf.getPolicy()\n          .createSession(new SolrClientCloudManager(queueFactory, build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","sourceOld":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = autoScalingConf.getPolicy().createSession(new SolrClientDataProvider(build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","sourceNew":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    Policy.Session session = autoScalingConf.getPolicy()\n        .createSession(cloudManager);\n    log.debug(\"Verified autoscaling configuration\");\n  }\n\n","sourceOld":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(container.getZkController().getZkClient());\n      Policy.Session session = autoScalingConf.getPolicy()\n          .createSession(new SolrClientCloudManager(queueFactory, build));\n      log.debug(\"Verified autoscaling configuration\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#verifyAutoScalingConf(AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private void verifyAutoScalingConf(AutoScalingConfig autoScalingConf) throws IOException {\n    Policy.Session session = autoScalingConf.getPolicy()\n        .createSession(cloudManager);\n    log.debug(\"Verified autoscaling configuration\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}