{"path":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    DocsAndPositionsEnum sortedPositions = termsEnum.docsAndPositions(null, null);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final DocsAndPositionsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.docsAndPositions(null, reuse);\n    if (sortedPositions instanceof SortingDocsAndPositionsEnum) {\n      assertTrue(((SortingDocsAndPositionsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    DocsAndPositionsEnum sortedPositions = termsEnum.docsAndPositions(null, null);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final DocsAndPositionsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.docsAndPositions(null, reuse);\n    if (sortedPositions instanceof SortingDocsAndPositionsEnum) {\n      assertTrue(((SortingDocsAndPositionsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.FLAG_ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.FLAG_ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    DocsAndPositionsEnum sortedPositions = termsEnum.docsAndPositions(null, null);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final DocsAndPositionsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.docsAndPositions(null, reuse);\n    if (sortedPositions instanceof SortingDocsAndPositionsEnum) {\n      assertTrue(((SortingDocsAndPositionsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.FLAG_ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.FLAG_ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(null, reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":null,"sourceOld":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":null,"sourceOld":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":null,"sourceOld":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":null,"sourceOld":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsAndPositionsEnum().mjava","sourceNew":null,"sourceOld":"  public void testDocsAndPositionsEnum() throws Exception {\n    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));\n    PostingsEnum sortedPositions = termsEnum.postings(null, PostingsEnum.ALL);\n    int doc;\n    \n    // test nextDoc()\n    while ((doc = sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n    \n    // test advance()\n    final PostingsEnum reuse = sortedPositions;\n    sortedPositions = termsEnum.postings(reuse, PostingsEnum.ALL);\n    if (sortedPositions instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) sortedPositions).reused(reuse)); // make sure reuse worked\n    }\n    doc = 0;\n    while ((doc = sortedPositions.advance(doc + TestUtil.nextInt(random(), 1, 5))) != DocIdSetIterator.NO_MORE_DOCS) {\n      int freq = sortedPositions.freq();\n      assertEquals(\"incorrect freq for doc=\" + doc, sortedValues[doc].intValue() / 10 + 1, freq);\n      for (int i = 0; i < freq; i++) {\n        assertEquals(\"incorrect position for doc=\" + doc, i, sortedPositions.nextPosition());\n        assertEquals(\"incorrect startOffset for doc=\" + doc, i, sortedPositions.startOffset());\n        assertEquals(\"incorrect endOffset for doc=\" + doc, i, sortedPositions.endOffset());\n        assertEquals(\"incorrect payload for doc=\" + doc, freq - i, Integer.parseInt(sortedPositions.getPayload().utf8ToString()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0ad30c6a479e764150a3316e57263319775f1df2":["1eee4175312c41f89aa23427f9e4edfc00deeaac","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1eee4175312c41f89aa23427f9e4edfc00deeaac","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1eee4175312c41f89aa23427f9e4edfc00deeaac","0ad30c6a479e764150a3316e57263319775f1df2"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["1eee4175312c41f89aa23427f9e4edfc00deeaac","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}