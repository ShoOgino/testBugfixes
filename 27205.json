{"path":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","pathOld":"/dev/null","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","sourceNew":null,"sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","pathOld":"src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","pathOld":"/dev/null","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","sourceNew":null,"sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}