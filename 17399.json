{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n      dictionary.noteInflection(parsed); // for completeness; I think unk.def has no inflections...\n    }\n    dictionary.finalizeInflections(); // should also be no-op\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a904819476fbc333a72b5914d82b948e7dab0205","date":1326741588,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","sourceNew":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","sourceOld":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n      dictionary.noteInflection(parsed); // for completeness; I think unk.def has no inflections...\n    }\n    dictionary.finalizeInflections(); // should also be no-op\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","sourceNew":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","sourceOld":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a904819476fbc333a72b5914d82b948e7dab0205":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a904819476fbc333a72b5914d82b948e7dab0205"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"a904819476fbc333a72b5914d82b948e7dab0205":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a904819476fbc333a72b5914d82b948e7dab0205"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}