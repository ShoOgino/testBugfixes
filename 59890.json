{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scalingFactor(float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scalingFactor(float).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a scaling factor for the given float so that\n   *  f x 2^scalingFactor would be in ]2^15, 2^16]. Special\n   *  cases:\n   *    scalingFactor(0) = scalingFactor(MIN_VALUE) - 1\n   *    scalingFactor(+Infty) = scalingFactor(MAX_VALUE) + 1\n   */\n  static int scalingFactor(float f) {\n    if (f < 0) {\n      throw new IllegalArgumentException(\"\");\n    } else if (f == 0) {\n      return scalingFactor(Float.MIN_VALUE) - 1;\n    } else if (Float.isInfinite(f)) {\n      return scalingFactor(Float.MAX_VALUE) + 1;\n    } else {\n      double d = f;\n      // Since doubles have more amplitude than floats for the\n      // exponent, the cast produces a normal value.\n      assert d == 0 || Math.getExponent(d) >= Double.MIN_EXPONENT; // normal double\n      return 15 - Math.getExponent(Math.nextDown(d));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scalingFactor(float).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a scaling factor for the given float so that\n   *  f x 2^scalingFactor would be in ]2^15, 2^16]. Special\n   *  cases:\n   *    scalingFactor(0) = scalingFactor(MIN_VALUE) - 1\n   *    scalingFactor(+Infty) = scalingFactor(MAX_VALUE) + 1\n   */\n  static int scalingFactor(float f) {\n    if (f < 0) {\n      throw new IllegalArgumentException(\"\");\n    } else if (f == 0) {\n      return scalingFactor(Float.MIN_VALUE) - 1;\n    } else if (Float.isInfinite(f)) {\n      return scalingFactor(Float.MAX_VALUE) + 1;\n    } else {\n      double d = f;\n      // Since doubles have more amplitude than floats for the\n      // exponent, the cast produces a normal value.\n      assert d == 0 || Math.getExponent(d) >= Double.MIN_EXPONENT; // normal double\n      return 15 - Math.getExponent(Math.nextDown(d));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3","date":1548397276,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scalingFactor(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scalingFactor(float).mjava","sourceNew":"  /** Return a scaling factor for the given float so that\n   *  f x 2^scalingFactor would be in ]2^15, 2^16]. Special\n   *  cases:\n   *    scalingFactor(0) = scalingFactor(MIN_VALUE) - 1\n   *    scalingFactor(+Infty) = scalingFactor(MAX_VALUE) + 1\n   */\n  static int scalingFactor(float f) {\n    if (f < 0) {\n      throw new IllegalArgumentException(\"Scores must be positive or null\");\n    } else if (f == 0) {\n      return scalingFactor(Float.MIN_VALUE) - 1;\n    } else if (Float.isInfinite(f)) {\n      return scalingFactor(Float.MAX_VALUE) + 1;\n    } else {\n      double d = f;\n      // Since doubles have more amplitude than floats for the\n      // exponent, the cast produces a normal value.\n      assert d == 0 || Math.getExponent(d) >= Double.MIN_EXPONENT; // normal double\n      return 15 - Math.getExponent(Math.nextDown(d));\n    }\n  }\n\n","sourceOld":"  /** Return a scaling factor for the given float so that\n   *  f x 2^scalingFactor would be in ]2^15, 2^16]. Special\n   *  cases:\n   *    scalingFactor(0) = scalingFactor(MIN_VALUE) - 1\n   *    scalingFactor(+Infty) = scalingFactor(MAX_VALUE) + 1\n   */\n  static int scalingFactor(float f) {\n    if (f < 0) {\n      throw new IllegalArgumentException(\"\");\n    } else if (f == 0) {\n      return scalingFactor(Float.MIN_VALUE) - 1;\n    } else if (Float.isInfinite(f)) {\n      return scalingFactor(Float.MAX_VALUE) + 1;\n    } else {\n      double d = f;\n      // Since doubles have more amplitude than floats for the\n      // exponent, the cast produces a normal value.\n      assert d == 0 || Math.getExponent(d) >= Double.MIN_EXPONENT; // normal double\n      return 15 - Math.getExponent(Math.nextDown(d));\n    }\n  }\n\n","bugFix":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}