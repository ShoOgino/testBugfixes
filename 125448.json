{"path":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","commits":[{"id":"b7d615ef411046679022f6728bb2b876273d13ae","date":1400253450,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n        int docID = docsEnums[seg].nextDoc();\n        if (docID != DocsEnum.NO_MORE_DOCS) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n        int docID = docsEnums[seg].nextDoc();\n        if (docID != DocsEnum.NO_MORE_DOCS) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","sourceNew":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        postingsEnums[seg] = termsEnums[seg].postings(liveDocs[seg], postingsEnums[seg], 0);\n        int docID = postingsEnums[seg].nextDoc();\n        if (docID != PostingsEnum.NO_MORE_DOCS) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n        int docID = docsEnums[seg].nextDoc();\n        if (docID != DocsEnum.NO_MORE_DOCS) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup#lookup(BytesRef).mjava","sourceNew":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        postingsEnums[seg] = termsEnums[seg].postings(postingsEnums[seg], 0);\n        int docID = postingsEnums[seg].nextDoc();\n        if (docID != PostingsEnum.NO_MORE_DOCS\n            && (liveDocs[seg] == null || liveDocs[seg].get(docID))) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns docID if found, else -1. */\n  public int lookup(BytesRef id) throws IOException {\n    for(int seg=0;seg<numSegs;seg++) {\n      if (termsEnums[seg].seekExact(id)) {\n        postingsEnums[seg] = termsEnums[seg].postings(liveDocs[seg], postingsEnums[seg], 0);\n        int docID = postingsEnums[seg].nextDoc();\n        if (docID != PostingsEnum.NO_MORE_DOCS) {\n          return docBases[seg] + docID;\n        }\n        assert hasDeletions;\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7d615ef411046679022f6728bb2b876273d13ae"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7d615ef411046679022f6728bb2b876273d13ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","b7d615ef411046679022f6728bb2b876273d13ae"],"b7d615ef411046679022f6728bb2b876273d13ae":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}