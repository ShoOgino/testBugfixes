{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeField#decodeTriangle(byte[],DecodedTriangle).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeField#decodeTriangle(byte[],DecodedTriangle).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeField#decodeTriangle(byte[],DecodedTriangle).mjava","sourceNew":"  /** Decode a triangle encoded by {@link ShapeField#encodeTriangle(byte[], int, int, boolean, int, int, boolean, int, int, boolean)}.\n   */\n  public static void decodeTriangle(byte[] t, DecodedTriangle triangle) {\n    final int aX, aY, bX, bY, cX, cY;\n    final boolean ab, bc, ca;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n       bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(aX, aY, bX, bY, cX, cY) >= 0;\n    ab = (bits & 1 << 3) == 1 << 3;\n    bc = (bits & 1 << 4) == 1 << 4;\n    ca = (bits & 1 << 5) == 1 << 5;\n    triangle.setValues(aX, aY, ab, bX, bY, bc, cX, cY, ca);\n  }\n\n","sourceOld":"  /** Decode a triangle encoded by {@link ShapeField#encodeTriangle(byte[], int, int, boolean, int, int, boolean, int, int, boolean)}.\n   */\n  public static void decodeTriangle(byte[] t, DecodedTriangle triangle) {\n    final int aX, aY, bX, bY, cX, cY;\n    final boolean ab, bc, ca;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n       bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(aX, aY, bX, bY, cX, cY) >= 0;\n    ab = (bits & 1 << 3) == 1 << 3;\n    bc = (bits & 1 << 4) == 1 << 4;\n    ca = (bits & 1 << 5) == 1 << 5;\n    triangle.setValues(aX, aY, ab, bX, bY, bc, cX, cY, ca);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeField#decodeTriangle(byte[],DecodedTriangle).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/ShapeField#decodeTriangle(byte[],DecodedTriangle).mjava","sourceNew":"  /** Decode a triangle encoded by {@link ShapeField#encodeTriangle(byte[], int, int, boolean, int, int, boolean, int, int, boolean)}.\n   */\n  public static void decodeTriangle(byte[] t, DecodedTriangle triangle) {\n    final int aX, aY, bX, bY, cX, cY;\n    final boolean ab, bc, ca;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n       bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(aX, aY, bX, bY, cX, cY) >= 0;\n    ab = (bits & 1 << 3) == 1 << 3;\n    bc = (bits & 1 << 4) == 1 << 4;\n    ca = (bits & 1 << 5) == 1 << 5;\n    triangle.setValues(aX, aY, ab, bX, bY, bc, cX, cY, ca);\n    resolveTriangleType(triangle);\n  }\n\n","sourceOld":"  /** Decode a triangle encoded by {@link ShapeField#encodeTriangle(byte[], int, int, boolean, int, int, boolean, int, int, boolean)}.\n   */\n  public static void decodeTriangle(byte[] t, DecodedTriangle triangle) {\n    final int aX, aY, bX, bY, cX, cY;\n    final boolean ab, bc, ca;\n    int bits = NumericUtils.sortableBytesToInt(t, 6 * BYTES);\n    //extract the first three bits\n    int tCode = (((1 << 3) - 1) & (bits >> 0));\n    switch (tCode) {\n      case MINY_MINX_MAXY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MINY_MINX_Y_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_Y_X_MINY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MAXY_MINX_MINY_MAXX_Y_X:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n       bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case Y_MINX_MINY_X_MAXY_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case Y_MINX_MINY_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      case MAXY_MINX_MINY_X_Y_MAXX:\n        aY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        break;\n      case MINY_MINX_Y_MAXX_MAXY_X:\n        aY = NumericUtils.sortableBytesToInt(t, 0 * BYTES);\n        aX  = NumericUtils.sortableBytesToInt(t, 1 * BYTES);\n        bY = NumericUtils.sortableBytesToInt(t, 4 * BYTES);\n        bX = NumericUtils.sortableBytesToInt(t, 3 * BYTES);\n        cY = NumericUtils.sortableBytesToInt(t, 2 * BYTES);\n        cX = NumericUtils.sortableBytesToInt(t, 5 * BYTES);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Could not decode the provided triangle\");\n    }\n    //Points of the decoded triangle must be co-planar or CCW oriented\n    assert GeoUtils.orient(aX, aY, bX, bY, cX, cY) >= 0;\n    ab = (bits & 1 << 3) == 1 << 3;\n    bc = (bits & 1 << 4) == 1 << 4;\n    ca = (bits & 1 << 5) == 1 << 5;\n    triangle.setValues(aX, aY, ab, bX, bY, bc, cX, cY, ca);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}