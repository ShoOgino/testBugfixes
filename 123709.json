{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","commits":[{"id":"90b5983cf0959ba2f206e3f7864b45d4e73384dd","date":1313636220,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"salary\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"type\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"description\", textNoNorms, st.nextToken()));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"salary\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"type\", textNoNorms, st.nextToken()));\n        doc.add(new Field(\"description\", textNoNorms, st.nextToken()));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = IndexReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = DirectoryReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = IndexReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = DirectoryReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = IndexReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = DirectoryReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    final FieldType textNoNorms = new FieldType(TextField.TYPE_STORED);\n    textNoNorms.setOmitNorms(true);\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"salary\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"type\", st.nextToken(), textNoNorms));\n        doc.add(new Field(\"description\", st.nextToken(), textNoNorms));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    // this example never closes it reader!\n    IndexReader reader = DirectoryReader.open(rd);\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}