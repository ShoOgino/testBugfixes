{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#_testExactFileNames().mjava","commits":[{"id":"30c86a85bad36cce1f63303b1e515590eec6e1b9","date":1164109784,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#_testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void _testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae2e3479e918a138a16fa9ff2c269113eaa15a8","date":1164214891,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#_testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void _testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}