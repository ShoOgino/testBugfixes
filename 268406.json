{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,BytesRef).mjava","commits":[{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Uncompressor#uncompress(DataInput,int,int,BytesRef).mjava","sourceNew":"  /**\n   * Method to use if you are only interested into <code>length</code>\n   * decompressed bytes starting at offset <code>offset</code>. Some compression\n   * codecs might have optimizations for this special case.\n   */\n  public void decompress(DataInput in, int offset, int length, BytesRef bytes) throws IOException {\n    decompress(in, bytes);\n    if (bytes.length < offset + length) {\n      throw new IndexOutOfBoundsException((offset + length) + \" > \" + bytes.length);\n    }\n    bytes.offset += offset;\n    bytes.length = length;\n  }\n\n","sourceOld":"  /**\n   * Method to use if you are only interested into <code>length</code>\n   * uncompressed bytes starting at offset <code>offset</code>. Some compression\n   * codecs might have optimizations for this special case.\n   */\n  public void uncompress(DataInput in, int offset, int length, BytesRef bytes) throws IOException {\n    uncompress(in, bytes);\n    if (bytes.length < offset + length) {\n      throw new IndexOutOfBoundsException((offset + length) + \" > \" + bytes.length);\n    }\n    bytes.offset += offset;\n    bytes.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to use if you are only interested into <code>length</code>\n   * decompressed bytes starting at offset <code>offset</code>. Some compression\n   * codecs might have optimizations for this special case.\n   */\n  public void decompress(DataInput in, int offset, int length, BytesRef bytes) throws IOException {\n    decompress(in, bytes);\n    if (bytes.length < offset + length) {\n      throw new IndexOutOfBoundsException((offset + length) + \" > \" + bytes.length);\n    }\n    bytes.offset += offset;\n    bytes.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to use if you are only interested into <code>length</code>\n   * decompressed bytes starting at offset <code>offset</code>. Some compression\n   * codecs might have optimizations for this special case.\n   */\n  public void decompress(DataInput in, int offset, int length, BytesRef bytes) throws IOException {\n    decompress(in, bytes);\n    if (bytes.length < offset + length) {\n      throw new IndexOutOfBoundsException((offset + length) + \" > \" + bytes.length);\n    }\n    bytes.offset += offset;\n    bytes.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","9ee663728a95682ffb5dee37517ac9e863cd0820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ee663728a95682ffb5dee37517ac9e863cd0820"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["9ee663728a95682ffb5dee37517ac9e863cd0820","407687e67faf6e1f02a211ca078d8e3eed631027"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}