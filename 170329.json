{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","commits":[{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if(electionNode !=null){\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if(overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null){\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if(!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)){\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\",electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if(electionNode.startsWith(getNodeName())){\n            try {\n              zkClient.delete(OverseerElectionContext.PATH+LeaderElector.ELECTION_NODE+\"/\"+electionNode,-1,true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e){\n              Thread.currentThread().interrupt();\n            } catch(Exception e) {\n              log.warn(\"Old election node exists , could not be removed \",e);\n            }\n          }\n        }\n      }else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if(electionNode !=null){\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if(overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null){\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if(!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)){\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\",electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if(electionNode.startsWith(getNodeName())){\n            try {\n              zkClient.delete(OverseerElectionContext.PATH+LeaderElector.ELECTION_NODE+\"/\"+electionNode,-1,true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e){\n              Thread.currentThread().interrupt();\n            } catch(Exception e) {\n              log.warn(\"Old election node exists , could not be removed \",e);\n            }\n          }\n        }\n      }else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if(electionNode !=null){\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if(overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null){\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if(!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)){\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\",electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if(electionNode.startsWith(getNodeName())){\n            try {\n              zkClient.delete(OverseerElectionContext.PATH+LeaderElector.ELECTION_NODE+\"/\"+electionNode,-1,true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e){\n              Thread.currentThread().interrupt();\n            } catch(Exception e) {\n              log.warn(\"Old election node exists , could not be removed \",e);\n            }\n          }\n        }\n      }else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if(electionNode !=null){\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if(overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null){\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if(!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)){\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\",electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if(electionNode.startsWith(getNodeName())){\n            try {\n              zkClient.delete(OverseerElectionContext.PATH+LeaderElector.ELECTION_NODE+\"/\"+electionNode,-1,true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e){\n              Thread.currentThread().interrupt();\n            } catch(Exception e) {\n              log.warn(\"Old election node exists , could not be removed \",e);\n            }\n          }\n        }\n      }else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5551d21c759979ad637581208f5ff5bd7497b5d7","date":1447783672,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(OverseerElectionContext.OVERSEER_ELECT + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(Overseer.OVERSEER_ELECT + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(OverseerElectionContext.OVERSEER_ELECT + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"631022b03d06792c2b320d2264e643c3e9496289","date":1556909947,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinOverseerElection(String,boolean).mjava","sourceNew":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        // Check whether we came to this node by mistake\n        if ( overseerElector.getContext() != null && overseerElector.getContext().leaderSeqPath == null \n            && !overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(Overseer.OVERSEER_ELECT + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        } else { // We're in the right place, now attempt to rejoin\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinOverseerElection(String electionNode, boolean joinAtHead) {\n    try {\n      if (electionNode != null) {\n        //this call is from inside the JVM  . not from CoreAdminHandler\n        if (overseerElector.getContext() == null || overseerElector.getContext().leaderSeqPath == null) {\n          overseerElector.retryElection(new OverseerElectionContext(zkClient,\n              overseer, getNodeName()), joinAtHead);\n          return;\n        }\n        if (!overseerElector.getContext().leaderSeqPath.endsWith(electionNode)) {\n          log.warn(\"Asked to rejoin with wrong election node : {}, current node is {}\", electionNode, overseerElector.getContext().leaderSeqPath);\n          //however delete it . This is possible when the last attempt at deleting the election node failed.\n          if (electionNode.startsWith(getNodeName())) {\n            try {\n              zkClient.delete(Overseer.OVERSEER_ELECT + LeaderElector.ELECTION_NODE + \"/\" + electionNode, -1, true);\n            } catch (NoNodeException e) {\n              //no problem\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            } catch (Exception e) {\n              log.warn(\"Old election node exists , could not be removed \", e);\n            }\n          }\n        }\n      } else {\n        overseerElector.retryElection(overseerElector.getContext(), joinAtHead);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"631022b03d06792c2b320d2264e643c3e9496289":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7d996c36bf85996da326201b915c87d41449d7f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d996c36bf85996da326201b915c87d41449d7f5","fbcfc050b9f253136eaa5950b57248b2109eac11"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d996c36bf85996da326201b915c87d41449d7f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["631022b03d06792c2b320d2264e643c3e9496289"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["7d996c36bf85996da326201b915c87d41449d7f5"]},"commit2Childs":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"631022b03d06792c2b320d2264e643c3e9496289":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d996c36bf85996da326201b915c87d41449d7f5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e57c73924f3b8c19defa62e96bfa34a4922d49c2","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["631022b03d06792c2b320d2264e643c3e9496289"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["5551d21c759979ad637581208f5ff5bd7497b5d7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}