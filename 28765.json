{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","sourceNew":"  private void buildClients() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void getServers() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ad96fd05c63ec22c1203121a27e0a1adce4025","date":1552081953,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","sourceNew":null,"sourceOld":"  private void buildClients() throws Exception {\n\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = getHttpSolrClient(url, 30000, 30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"859081acf00749f5dd462772c571d611d4a4d2db":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["43d1e498704edd2bba13548a189eed4dfccff11b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","e6ad96fd05c63ec22c1203121a27e0a1adce4025"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}