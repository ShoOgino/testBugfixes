{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":5,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n    }\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}