{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"1b6eb78cb29a08063ed0ed2816d8817ede89fa90","date":1518149772,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/RoutedAliasCreateCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainTimeRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist.\"); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases);\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    updateAlias(aliasName, aliasesManager, createCollName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    // the client believes this is the mostRecent collection name.  We assert this if provided.\n    final String ifMostRecentCollName = message.getStr(IF_MOST_RECENT_COLL_NAME); // optional\n\n    // TODO collection param (or intervalDateMath override?), useful for data capped collections\n\n    //---- PARSE ALIAS INFO FROM ZK\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(aliasName); // if it did exist, we'd have a non-null map\n    }\n    final TimeRoutedAlias timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n\n    final List<Map.Entry<Instant, String>> parsedCollections =\n        timeRoutedAlias.parseCollections(aliases, () -> newAliasMustExistException(aliasName));\n\n    //---- GET MOST RECENT COLL\n    final Map.Entry<Instant, String> mostRecentEntry = parsedCollections.get(0);\n    final Instant mostRecentCollTimestamp = mostRecentEntry.getKey();\n    final String mostRecentCollName = mostRecentEntry.getValue();\n    if (ifMostRecentCollName != null) {\n      if (!mostRecentCollName.equals(ifMostRecentCollName)) {\n        // Possibly due to race conditions in URPs on multiple leaders calling us at the same time\n        String msg = IF_MOST_RECENT_COLL_NAME + \" expected \" + ifMostRecentCollName + \" but it's \" + mostRecentCollName;\n        if (parsedCollections.stream().map(Map.Entry::getValue).noneMatch(ifMostRecentCollName::equals)) {\n          msg += \". Furthermore this collection isn't in the list of collections referenced by the alias.\";\n        }\n        log.info(msg);\n        results.add(\"message\", msg);\n        return;\n      }\n    } else if (mostRecentCollTimestamp.isAfter(Instant.now())) {\n      final String msg = \"Most recent collection is in the future, so we won't create another.\";\n      log.info(msg);\n      results.add(\"message\", msg);\n      return;\n    }\n\n    //---- COMPUTE NEXT COLLECTION NAME\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(mostRecentCollTimestamp);\n    final String createCollName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, nextCollTimestamp);\n\n    //---- DELETE OLDEST COLLECTIONS AND REMOVE FROM ALIAS (if configured)\n    NamedList deleteResults = deleteOldestCollectionsAndUpdateAlias(timeRoutedAlias, aliasesManager, nextCollTimestamp);\n    if (deleteResults != null) {\n      results.add(\"delete\", deleteResults);\n    }\n\n    //---- CREATE THE COLLECTION\n    NamedList createResults = createCollectionAndWait(clusterState, aliasName, aliasMetadata,\n        createCollName, ocmh);\n    if (createResults != null) {\n      results.add(\"create\", createResults);\n    }\n\n    //---- UPDATE THE ALIAS WITH NEW COLLECTION\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} failed (this might be ok if two clients were \" +\n                        \"writing to a routed alias at the same time and both caused a deletion)\",\n                    action.targetCollection, ra.getAliasName());\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} failed (this might be ok if two clients were \" +\n                        \"writing to a routed alias at the same time and both caused a deletion)\",\n                    action.targetCollection, ra.getAliasName());\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"4abf821a41a2fdca2a1dea148999931d22e20529":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["1b6eb78cb29a08063ed0ed2816d8817ede89fa90"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"1b6eb78cb29a08063ed0ed2816d8817ede89fa90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["b627755385655c7cd3fb296f17593658805cf4d5"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"1b6eb78cb29a08063ed0ed2816d8817ede89fa90":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b6eb78cb29a08063ed0ed2816d8817ede89fa90"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}