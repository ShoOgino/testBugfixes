{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"078fa9e94da55eaa1aa1e7393aa84ba7cc986864","date":1418310060,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f756f355450b30d33fe4479d81dad3e4d100ded4","date":1419858140,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, string.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR);\n      int length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      bufferedDocs.writeVInt(length);\n      bufferedDocs.writeBytes(scratchBytes, length);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfde954cd162c74a48f6b035e596f252c9939a73","date":1442329231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(string);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, string.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR);\n      int length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      bufferedDocs.writeVInt(length);\n      bufferedDocs.writeBytes(scratchBytes, length);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(string);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(string);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","52c7e49be259508735752fba88085255014a6ecf"],"bfde954cd162c74a48f6b035e596f252c9939a73":["f756f355450b30d33fe4479d81dad3e4d100ded4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","3394716f52b34ab259ad5247e7595d9f9db6e935"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"52c7e49be259508735752fba88085255014a6ecf":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"f756f355450b30d33fe4479d81dad3e4d100ded4":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["bfde954cd162c74a48f6b035e596f252c9939a73"]},"commit2Childs":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["f756f355450b30d33fe4479d81dad3e4d100ded4"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"bfde954cd162c74a48f6b035e596f252c9939a73":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","407687e67faf6e1f02a211ca078d8e3eed631027","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"f756f355450b30d33fe4479d81dad3e4d100ded4":["bfde954cd162c74a48f6b035e596f252c9939a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}