{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      InvertedFieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      InvertedFieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}