{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","commits":[{"id":"cdd2d639986db5a5a6f3703a8b4136a6473a5f81","date":1376372957,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = collection ==null? null: collection.getStr(DocRouter.ROUTE_FIELD);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = collection ==null? null: collection.getStr(DocRouter.ROUTE_FIELD);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = collection ==null? null: collection.getStr(DocRouter.ROUTE_FIELD);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb8aa4753ae13ba02f5681be1d66f4ff2210c693","date":1380639661,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n    String part1 = id.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    String part1 = null;\n    int idx = 0;\n    int commaIdx = 0;\n\n    if(shardFieldName == null || doc == null) {\n      idx = id.indexOf(separator);\n      if (idx < 0) {\n        return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n      }\n      part1 = id.substring(0, idx);\n      commaIdx = part1.indexOf(bitsSeparator);\n\n    } else {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o != null) {\n        part1 = o.toString();\n        return Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n      } else {\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      }\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7623716022a9a68898e329e8ffe6c36d168fba7","date":1384524101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    if (id.indexOf(SEPARATOR) < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    return new KeyParser(id).getHash();\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n    String part1 = id.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe","date":1384867512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for :\" + shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    if (id.indexOf(SEPARATOR) < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    return new KeyParser(id).getHash();\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    if (id.indexOf(SEPARATOR) < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    return new KeyParser(id).getHash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#sliceHash(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for :\" + shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    if (id.indexOf(SEPARATOR) < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    return new KeyParser(id).getHash();\n  }\n\n","sourceOld":"  @Override\n  public int sliceHash(String id, SolrInputDocument doc, SolrParams params, DocCollection collection) {\n    String shardFieldName = getRouteField(collection);\n    if (shardFieldName != null && doc != null) {\n      Object o = doc.getFieldValue(shardFieldName);\n      if (o == null)\n        throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"No value for :\"+shardFieldName + \". Unable to identify shard\");\n      id = o.toString();\n    }\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n    String part1 = id.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693","c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"],"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe":["f7623716022a9a68898e329e8ffe6c36d168fba7"],"eb8aa4753ae13ba02f5681be1d66f4ff2210c693":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e187a371a1d09379bb452c2c13a7b9221525dff8"],"eb8aa4753ae13ba02f5681be1d66f4ff2210c693":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f7623716022a9a68898e329e8ffe6c36d168fba7"],"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}