{"path":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addNumericField(fieldInfo,\n                               new Iterable<Number>() {\n\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new Iterator<Number>() {\n                                     int upto;\n                                     AppendingLongBuffer.Iterator iter = pending.iterator();\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public Number next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       long value;\n                                       if (upto < pending.size()) {\n                                         value =  iter.next();\n                                       } else {\n                                         value = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addNumericField(fieldInfo,\n                               new Iterable<Number>() {\n\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new Iterator<Number>() {\n                                     int upto;\n                                     AppendingLongBuffer.Iterator iter = pending.iterator();\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public Number next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       long value;\n                                       if (upto < pending.size()) {\n                                         value =  iter.next();\n                                       } else {\n                                         value = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addNumericField(fieldInfo,\n                               new Iterable<Number>() {\n\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new Iterator<Number>() {\n                                     int upto;\n                                     AppendingLongBuffer.Iterator iter = pending.iterator();\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public Number next() {\n                                       long value;\n                                       if (upto < pending.size()) {\n                                         value =  iter.next();\n                                       } else {\n                                         value = 0;\n                                       }\n                                       upto++;\n                                       // TODO: make reusable Number\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    // nocommit\n    //reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addNumericField(fieldInfo,\n                               new Iterable<Number>() {\n\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new Iterator<Number>() {\n                                     int upto;\n                                     AppendingLongBuffer.Iterator iter = pending.iterator();\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public Number next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       long value;\n                                       if (upto < pending.size()) {\n                                         value =  iter.next();\n                                       } else {\n                                         value = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e5d36d3b999ce76a1e80788e5d243f513c69d50","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}