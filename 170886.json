{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1dcb481c1d36eb918fd5685a875aa54cd72e400","date":1342796663,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    SolrCore core = getCoreInc();\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    SolrCore core = getCoreInc();\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    SolrCore core = getCoreInc();\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try (SolrCore core = getCoreInc()) {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    SolrCore core = getCoreInc();\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try (SolrCore core = getCoreInc()) {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033bdc46c7b4b947547adc28eb5b90d9a61039e9","date":1425422962,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n\n      req.close();\n\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      if (responseWriter instanceof BinaryQueryResponseWriter) {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(32000);\n        BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) responseWriter;\n        writer.write(byteArrayOutputStream, req, rsp);\n        return new String(byteArrayOutputStream.toByteArray(), \"UTF-8\");\n      } else {\n        StringWriter sw = new StringWriter(32000);\n        responseWriter.write(sw,req,rsp);\n        return sw.toString();\n      }\n\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      if (responseWriter instanceof BinaryQueryResponseWriter) {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(32000);\n        BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) responseWriter;\n        writer.write(byteArrayOutputStream, req, rsp);\n        return new String(byteArrayOutputStream.toByteArray(), \"UTF-8\");\n      } else {\n        StringWriter sw = new StringWriter(32000);\n        responseWriter.write(sw,req,rsp);\n        return sw.toString();\n      }\n\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      StringWriter sw = new StringWriter(32000);\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      responseWriter.write(sw,req,rsp);\n      return sw.toString();\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      if (responseWriter instanceof BinaryQueryResponseWriter) {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(32000);\n        BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) responseWriter;\n        writer.write(byteArrayOutputStream, req, rsp);\n        return new String(byteArrayOutputStream.toByteArray(), StandardCharsets.UTF_8);\n      } else {\n        StringWriter sw = new StringWriter(32000);\n        responseWriter.write(sw,req,rsp);\n        return sw.toString();\n      }\n\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest, and closes the request at the end.\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws Exception {\n    try {\n      SolrCore core = req.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      core.execute(core.getRequestHandler(handler),req,rsp);\n      if (rsp.getException() != null) {\n        throw rsp.getException();\n      }\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      if (responseWriter instanceof BinaryQueryResponseWriter) {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(32000);\n        BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) responseWriter;\n        writer.write(byteArrayOutputStream, req, rsp);\n        return new String(byteArrayOutputStream.toByteArray(), \"UTF-8\");\n      } else {\n        StringWriter sw = new StringWriter(32000);\n        responseWriter.write(sw,req,rsp);\n        return sw.toString();\n      }\n\n    } finally {\n      req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"033bdc46c7b4b947547adc28eb5b90d9a61039e9":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["033bdc46c7b4b947547adc28eb5b90d9a61039e9","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["033bdc46c7b4b947547adc28eb5b90d9a61039e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","033bdc46c7b4b947547adc28eb5b90d9a61039e9"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"033bdc46c7b4b947547adc28eb5b90d9a61039e9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","50f05d6b69cfaabd51b5d26cba4e3122f51fff83","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["033bdc46c7b4b947547adc28eb5b90d9a61039e9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["aba371508186796cc6151d8223a5b4e16d02e26e","e332392bbbdd01cb69ad6a89051f483cda38e15e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}