{"path":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    shift += precisionStep;\n    if (shift >= valSize) {\n      // reset so the attribute still works after exhausted stream\n      shift -= precisionStep;\n      return false;\n    }\n\n    clearAttributes();\n    // the TermToBytesRefAttribute is directly accessing shift & value.\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return false;\n\n    clearAttributes();\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        termAtt.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = termAtt.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        termAtt.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"045811a5786836715a746b4c14522fc6c96c6607","date":1295463542,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    \n    // this will only clear all other attributes in this TokenStream\n    clearAttributes();\n\n    final int shift = numericAtt.incShift();\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return (shift < valSize);\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    shift += precisionStep;\n    if (shift >= valSize) {\n      // reset so the attribute still works after exhausted stream\n      shift -= precisionStep;\n      return false;\n    }\n\n    clearAttributes();\n    // the TermToBytesRefAttribute is directly accessing shift & value.\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    \n    // this will only clear all other attributes in this TokenStream\n    clearAttributes();\n\n    final int shift = numericAtt.incShift();\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return (shift < valSize);\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    shift += precisionStep;\n    if (shift >= valSize) {\n      // reset so the attribute still works after exhausted stream\n      shift -= precisionStep;\n      return false;\n    }\n\n    clearAttributes();\n    // the TermToBytesRefAttribute is directly accessing shift & value.\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    \n    // this will only clear all other attributes in this TokenStream\n    clearAttributes();\n\n    final int shift = numericAtt.incShift();\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return (shift < valSize);\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    shift += precisionStep;\n    if (shift >= valSize) {\n      // reset so the attribute still works after exhausted stream\n      shift -= precisionStep;\n      return false;\n    }\n\n    clearAttributes();\n    // the TermToBytesRefAttribute is directly accessing shift & value.\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/NumericTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    \n    // this will only clear all other attributes in this TokenStream\n    clearAttributes();\n\n    final int shift = numericAtt.incShift();\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return (shift < valSize);\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    \n    // this will only clear all other attributes in this TokenStream\n    clearAttributes();\n\n    final int shift = numericAtt.incShift();\n    typeAtt.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    posIncrAtt.setPositionIncrement((shift == 0) ? 1 : 0);\n    return (shift < valSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"045811a5786836715a746b4c14522fc6c96c6607":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["045811a5786836715a746b4c14522fc6c96c6607"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","045811a5786836715a746b4c14522fc6c96c6607"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","045811a5786836715a746b4c14522fc6c96c6607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"045811a5786836715a746b4c14522fc6c96c6607":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["045811a5786836715a746b4c14522fc6c96c6607","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}