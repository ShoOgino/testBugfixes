{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocList(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code> and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from the cache or make an insertion into the cache\n   * as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param filter\n   *          may be null\n   * @param lsort\n   *          criteria by which to sort (if null, query relevance is used)\n   * @param offset\n   *          offset into the list of documents to return\n   * @param len\n   *          maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n        .setFilterList(filter)\n        .setSort(lsort)\n        .setOffset(offset)\n        .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr, qc);\n    return qr.getDocList();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   *\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocList meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public DocList getDocList(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}