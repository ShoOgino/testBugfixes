{"path":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","commits":[{"id":"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6","date":1184719927,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    BitSet bits = result.getBits();\n    assertTrue(\"bits is null and it shouldn't be\", bits != null);\n    assertTrue(\"tenth bit is not on\", bits.get(10));\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + bits.cardinality(), spans.size() == bits.cardinality());\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertTrue(\"Bit is not on and it should be\", bits.get(info.getDoc()));\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    BitSet bits = result.getBits();\n    assertTrue(\"bits is null and it shouldn't be\", bits != null);\n    assertTrue(\"tenth bit is not on\", bits.get(10));\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + bits.cardinality(), spans.size() == bits.cardinality());\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertTrue(\"Bit is not on and it should be\", bits.get(info.getDoc()));\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    BitSet bits = result.getBits();\n    assertTrue(\"bits is null and it shouldn't be\", bits != null);\n    assertTrue(\"tenth bit is not on\", bits.get(10));\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + bits.cardinality(), spans.size() == bits.cardinality());\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertTrue(\"Bit is not on and it should be\", bits.get(info.getDoc()));\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    BitSet bits = result.getBits();\n    assertTrue(\"bits is null and it shouldn't be\", bits != null);\n    assertTrue(\"tenth bit is not on\", bits.get(10));\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + bits.cardinality(), spans.size() == bits.cardinality());\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertTrue(\"Bit is not on and it should be\", bits.get(info.getDoc()));\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}