{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence#toStringEscaped(char[]).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence#toStringEscaped(char[]).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence#toStringEscaped(char[]).mjava","sourceNew":"  /**\n   * Return a escaped String\n   * \n   * @param enabledChars\n   *          - array of chars to be escaped\n   * @return a escaped String\n   */\n  public String toStringEscaped(char[] enabledChars) {\n    // TODO: non efficient implementation, refactor this code\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < this.length(); i++) {\n      if (this.chars[i] == '\\\\') {\n        result.append('\\\\');\n      } else {\n        for (char character : enabledChars) {\n          if (this.chars[i] == character && this.wasEscaped[i]) {\n            result.append('\\\\');\n            break;\n          }\n        }\n      }\n\n      result.append(this.chars[i]);\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Return a escaped String\n   * \n   * @param enabledChars\n   *          - array of chars to be escaped\n   * @return a escaped String\n   */\n  public String toStringEscaped(char[] enabledChars) {\n    // TODO: non efficient implementation, refactor this code\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < this.length(); i++) {\n      if (this.chars[i] == '\\\\') {\n        result.append('\\\\');\n      } else {\n        for (char character : enabledChars) {\n          if (this.chars[i] == character && this.wasEscaped[i]) {\n            result.append('\\\\');\n            break;\n          }\n        }\n      }\n\n      result.append(this.chars[i]);\n    }\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence#toStringEscaped(char[]).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence#toStringEscaped(char[]).mjava","sourceNew":"  /**\n   * Return a escaped String\n   * \n   * @param enabledChars\n   *          - array of chars to be escaped\n   * @return a escaped String\n   */\n  public String toStringEscaped(char[] enabledChars) {\n    // TODO: non efficient implementation, refactor this code\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < this.length(); i++) {\n      if (this.chars[i] == '\\\\') {\n        result.append('\\\\');\n      } else {\n        for (char character : enabledChars) {\n          if (this.chars[i] == character && this.wasEscaped[i]) {\n            result.append('\\\\');\n            break;\n          }\n        }\n      }\n\n      result.append(this.chars[i]);\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * Return a escaped String\n   * \n   * @param enabledChars\n   *          - array of chars to be escaped\n   * @return a escaped String\n   */\n  public String toStringEscaped(char[] enabledChars) {\n    // TODO: non efficient implementation, refactor this code\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < this.length(); i++) {\n      if (this.chars[i] == '\\\\') {\n        result.append('\\\\');\n      } else {\n        for (char character : enabledChars) {\n          if (this.chars[i] == character && this.wasEscaped[i]) {\n            result.append('\\\\');\n            break;\n          }\n        }\n      }\n\n      result.append(this.chars[i]);\n    }\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}