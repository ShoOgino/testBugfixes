{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}