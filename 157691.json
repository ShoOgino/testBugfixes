{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(true)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}