{"path":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testTryUpdateDocValues().mjava","commits":[{"id":"c0d5f8ee8ea79c9827f54a6484c70bb02f9857dd","date":1525696559,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testTryUpdateDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testTryUpdateDocValues() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 1 + random().nextInt(128);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\" + i, Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[] {(byte)i})));\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n    int doc = random().nextInt(numDocs);\n    doUpdate(new Term(\"id\", \"\" + doc), writer, new NumericDocValuesField(\"id\", doc + 1),\n        new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[]{(byte) (doc + 1)})));\n    IndexReader reader = writer.getReader();\n    NumericDocValues idValues = null;\n    BinaryDocValues binaryIdValues = null;\n    for (LeafReaderContext c : reader.leaves()) {\n      TopDocs topDocs = new IndexSearcher(c.reader()).search(new TermQuery(new Term(\"id\", \"\" + doc)), 10);\n      if (topDocs.totalHits == 1) {\n        assertNull(idValues);\n        assertNull(binaryIdValues);\n        idValues = c.reader().getNumericDocValues(\"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, idValues.advance(topDocs.scoreDocs[0].doc));\n        binaryIdValues = c.reader().getBinaryDocValues(\"binaryId\");\n        assertEquals(topDocs.scoreDocs[0].doc, binaryIdValues.advance(topDocs.scoreDocs[0].doc));\n      } else {\n        assertEquals(0, topDocs.totalHits);\n      }\n    }\n\n    assertNotNull(idValues);\n    assertNotNull(binaryIdValues);\n\n    assertEquals(doc+1, idValues.longValue());\n    assertEquals(new BytesRef(new byte[] {(byte)(doc+1)}), binaryIdValues.binaryValue());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testTryUpdateDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testTryUpdateDocValues().mjava","sourceNew":"  public void testTryUpdateDocValues() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 1 + random().nextInt(128);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\" + i, Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[] {(byte)i})));\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n    int doc = random().nextInt(numDocs);\n    doUpdate(new Term(\"id\", \"\" + doc), writer, new NumericDocValuesField(\"id\", doc + 1),\n        new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[]{(byte) (doc + 1)})));\n    IndexReader reader = writer.getReader();\n    NumericDocValues idValues = null;\n    BinaryDocValues binaryIdValues = null;\n    for (LeafReaderContext c : reader.leaves()) {\n      TopDocs topDocs = new IndexSearcher(c.reader()).search(new TermQuery(new Term(\"id\", \"\" + doc)), 10);\n      if (topDocs.totalHits.value == 1) {\n        assertNull(idValues);\n        assertNull(binaryIdValues);\n        idValues = c.reader().getNumericDocValues(\"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, idValues.advance(topDocs.scoreDocs[0].doc));\n        binaryIdValues = c.reader().getBinaryDocValues(\"binaryId\");\n        assertEquals(topDocs.scoreDocs[0].doc, binaryIdValues.advance(topDocs.scoreDocs[0].doc));\n      } else {\n        assertEquals(0, topDocs.totalHits.value);\n      }\n    }\n\n    assertNotNull(idValues);\n    assertNotNull(binaryIdValues);\n\n    assertEquals(doc+1, idValues.longValue());\n    assertEquals(new BytesRef(new byte[] {(byte)(doc+1)}), binaryIdValues.binaryValue());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testTryUpdateDocValues() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 1 + random().nextInt(128);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\" + i, Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[] {(byte)i})));\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n    int doc = random().nextInt(numDocs);\n    doUpdate(new Term(\"id\", \"\" + doc), writer, new NumericDocValuesField(\"id\", doc + 1),\n        new BinaryDocValuesField(\"binaryId\", new BytesRef(new byte[]{(byte) (doc + 1)})));\n    IndexReader reader = writer.getReader();\n    NumericDocValues idValues = null;\n    BinaryDocValues binaryIdValues = null;\n    for (LeafReaderContext c : reader.leaves()) {\n      TopDocs topDocs = new IndexSearcher(c.reader()).search(new TermQuery(new Term(\"id\", \"\" + doc)), 10);\n      if (topDocs.totalHits == 1) {\n        assertNull(idValues);\n        assertNull(binaryIdValues);\n        idValues = c.reader().getNumericDocValues(\"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, idValues.advance(topDocs.scoreDocs[0].doc));\n        binaryIdValues = c.reader().getBinaryDocValues(\"binaryId\");\n        assertEquals(topDocs.scoreDocs[0].doc, binaryIdValues.advance(topDocs.scoreDocs[0].doc));\n      } else {\n        assertEquals(0, topDocs.totalHits);\n      }\n    }\n\n    assertNotNull(idValues);\n    assertNotNull(binaryIdValues);\n\n    assertEquals(doc+1, idValues.longValue());\n    assertEquals(new BytesRef(new byte[] {(byte)(doc+1)}), binaryIdValues.binaryValue());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0d5f8ee8ea79c9827f54a6484c70bb02f9857dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c0d5f8ee8ea79c9827f54a6484c70bb02f9857dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"c0d5f8ee8ea79c9827f54a6484c70bb02f9857dd":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d5f8ee8ea79c9827f54a6484c70bb02f9857dd"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}