{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":5,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["4c623a7f72be34d6c45bee682028c50327d9e4b7","af3193c66df8e8324d4bce9f66df967af9e8c602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bc8f206328a706450934717bec7ccc22ad166fc0":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}