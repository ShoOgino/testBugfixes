{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#BlockPostingsWriter(SegmentWriteState,int).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#BlockPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public BlockPostingsWriter(SegmentWriteState state, int blockSize) throws IOException {\n    super();\n    this.blockSize = blockSize;\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[blockSize];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[blockSize];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[blockSize];\n          offsetLengthBuffer = new int[blockSize];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[blockSize];\n    freqBuffer = new int[blockSize];\n\n    skipWriter = new BlockSkipWriter(blockSize,\n                                     maxSkipLevels, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[blockSize*4 + 4];\n    encodedBuffer = ByteBuffer.wrap(encoded).asIntBuffer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#BlockPostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#BlockPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public BlockPostingsWriter(SegmentWriteState state) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[blockSize];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[blockSize];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[blockSize];\n          offsetLengthBuffer = new int[blockSize];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[blockSize];\n    freqBuffer = new int[blockSize];\n\n    skipWriter = new BlockSkipWriter(maxSkipLevels, \n                                     blockSize,\n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[blockSize*4];\n    encodedBuffer = ByteBuffer.wrap(encoded).asIntBuffer();\n  }\n\n","sourceOld":"  public BlockPostingsWriter(SegmentWriteState state, int blockSize) throws IOException {\n    super();\n    this.blockSize = blockSize;\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[blockSize];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[blockSize];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[blockSize];\n          offsetLengthBuffer = new int[blockSize];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[blockSize];\n    freqBuffer = new int[blockSize];\n\n    skipWriter = new BlockSkipWriter(blockSize,\n                                     maxSkipLevels, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[blockSize*4 + 4];\n    encodedBuffer = ByteBuffer.wrap(encoded).asIntBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["8081d5018e8846bf4080f2809432c759996e749f"],"8081d5018e8846bf4080f2809432c759996e749f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8081d5018e8846bf4080f2809432c759996e749f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}