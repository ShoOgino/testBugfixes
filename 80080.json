{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    final String newNode = cluster.simAddNode();\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    \n    // but action did not complete yet (due to stall) so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n      \n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\") // this test fails easily\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // wait for the trigger to run at least once\n    cluster.getTimeSource().sleep(2 * waitForSeconds * 1000);\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    final String newNode = cluster.simAddNode();\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    \n    // but action did not complete yet (due to stall) so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n\n    assertAutoscalingUpdateComplete();\n\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"3f504512a03d978990cbff30db0522b354e846db":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}