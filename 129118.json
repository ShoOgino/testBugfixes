{"path":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c21420626551d54226c2de2888bfab0e0b0e72e6","date":1226958241,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   * \n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   * \n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      NamedListCodec codec = new NamedListCodec(resolver);\n      codec.marshal(rsp.getValues(), out);\n      \n      InputStream in = new ByteArrayInputStream( out.toByteArray() );\n      return codec.unmarshal( in );\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["754182f2def7aee06292f7daf04ebaceb970e931"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"754182f2def7aee06292f7daf04ebaceb970e931","date":1229276256,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      NamedListCodec codec = new NamedListCodec(resolver);\n      codec.marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return codec.unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   * \n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   * \n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      NamedListCodec codec = new NamedListCodec(resolver);\n      codec.marshal(rsp.getValues(), out);\n      \n      InputStream in = new ByteArrayInputStream( out.toByteArray() );\n      return codec.unmarshal( in );\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":["c21420626551d54226c2de2888bfab0e0b0e72e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new NamedListCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new NamedListCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      NamedListCodec codec = new NamedListCodec(resolver);\n      codec.marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return codec.unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new NamedListCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new NamedListCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c21420626551d54226c2de2888bfab0e0b0e72e6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"2307281f021c98102266052f57b7938614dbb30d":["754182f2def7aee06292f7daf04ebaceb970e931"],"754182f2def7aee06292f7daf04ebaceb970e931":["c21420626551d54226c2de2888bfab0e0b0e72e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c21420626551d54226c2de2888bfab0e0b0e72e6":["754182f2def7aee06292f7daf04ebaceb970e931"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c21420626551d54226c2de2888bfab0e0b0e72e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"754182f2def7aee06292f7daf04ebaceb970e931":["2307281f021c98102266052f57b7938614dbb30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}