{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7451e96c53669403d942783c3afd1ae7bcd696","date":1470621310,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#updateMappingsFromZk(String).mjava","sourceNew":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates the mappings between the jetty's instances and the zookeeper cluster state.\n   */\n  protected void updateMappingsFromZk(String collection) throws Exception {\n    List<CloudJettyRunner> cloudJettys = new ArrayList<>();\n    Map<String, List<CloudJettyRunner>> shardToJetty = new HashMap<>();\n    Map<String, CloudJettyRunner> shardToLeaderJetty = new HashMap<>();\n\n    CloudSolrClient cloudClient = this.createCloudClient(null);\n    try {\n      cloudClient.connect();\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(collection);\n\n      for (JettySolrRunner jetty : jettys) {\n        int port = jetty.getLocalPort();\n        if (port == -1) {\n          throw new RuntimeException(\"Cannot find the port for jetty\");\n        }\n\n        nextJetty:\n        for (Slice shard : coll.getSlices()) {\n          Set<Map.Entry<String, Replica>> entries = shard.getReplicasMap().entrySet();\n          for (Map.Entry<String, Replica> entry : entries) {\n            Replica replica = entry.getValue();\n            if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n              if (!shardToJetty.containsKey(shard.getName())) {\n                shardToJetty.put(shard.getName(), new ArrayList<CloudJettyRunner>());\n              }\n              boolean isLeader = shard.getLeader() == replica;\n              CloudJettyRunner cjr = new CloudJettyRunner(jetty, replica, collection, shard.getName(), entry.getKey());\n              shardToJetty.get(shard.getName()).add(cjr);\n              if (isLeader) {\n                shardToLeaderJetty.put(shard.getName(), cjr);\n              }\n              cloudJettys.add(cjr);\n              break nextJetty;\n            }\n          }\n        }\n      }\n\n      List<CloudJettyRunner> oldRunners = this.cloudJettys.putIfAbsent(collection, cloudJettys);\n      if (oldRunners != null)  {\n        // must close resources for the old entries\n        for (CloudJettyRunner oldRunner : oldRunners) {\n          IOUtils.closeQuietly(oldRunner.client);\n        }\n      }\n\n      this.cloudJettys.put(collection, cloudJettys);\n      this.shardToJetty.put(collection, shardToJetty);\n      this.shardToLeaderJetty.put(collection, shardToLeaderJetty);\n    } finally {\n      cloudClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["8b7451e96c53669403d942783c3afd1ae7bcd696"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b7451e96c53669403d942783c3afd1ae7bcd696":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","8b7451e96c53669403d942783c3afd1ae7bcd696"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","8b7451e96c53669403d942783c3afd1ae7bcd696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"8b7451e96c53669403d942783c3afd1ae7bcd696":["e7da9d8536c11576df10e348efa79d2739170936","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["8b7451e96c53669403d942783c3afd1ae7bcd696","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}