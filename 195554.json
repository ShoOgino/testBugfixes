{"path":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}