{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","commits":[{"id":"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","date":1464795186,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#quickSelect(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","sourceNew":"  private void quickSelect(int from, int to, int k, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      slowSelect(from, to, k);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (compare(from, to - 1) > 0) {\n      swap(from, to - 1);\n    }\n    if (compare(to - 1, mid) > 0) {\n      swap(to - 1, mid);\n      if (compare(from, to - 1) > 0) {\n        swap(from, to - 1);\n      }\n    }\n\n    setPivot(to - 1);\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparePivot(left) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparePivot(right) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(left + 1, to, k, maxDepth);\n    } else {\n      quickSelect(from, left, k, maxDepth);\n    }\n  }\n\n","sourceOld":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSelect(T[],int,int,int,Comparator[T],int).mjava","sourceNew":null,"sourceOld":"  private static <T> void quickSelect(T[] arr, int from, int to, int k, Comparator<T> comparator, int maxDepth) {\n    assert from <= k;\n    assert k < to;\n    if (to - from == 1) {\n      return;\n    }\n    if (--maxDepth < 0) {\n      Arrays.sort(arr, from, to, comparator);\n      return;\n    }\n\n    final int mid = (from + to) >>> 1;\n    // heuristic: we use the median of the values at from, to-1 and mid as a pivot\n    if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n      swap(arr, from, to - 1);\n    }\n    if (comparator.compare(arr[to - 1], arr[mid]) > 0) {\n      swap(arr, to - 1, mid);\n      if (comparator.compare(arr[from], arr[to - 1]) > 0) {\n        swap(arr, from, to - 1);\n      }\n    }\n\n    T pivot = arr[to - 1];\n\n    int left = from + 1;\n    int right = to - 2;\n\n    for (;;) {\n      while (comparator.compare(pivot, arr[left]) > 0) {\n        ++left;\n      }\n\n      while (left < right && comparator.compare(pivot, arr[right]) <= 0) {\n        --right;\n      }\n\n      if (left < right) {\n        swap(arr, left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n    swap(arr, left, to - 1);\n\n    if (left == k) {\n      return;\n    } else if (left < k) {\n      quickSelect(arr, left + 1, to, k, comparator, maxDepth);\n    } else {\n      quickSelect(arr, from, left, k, comparator, maxDepth);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["1f69e96b07e265f3e18957be540909b01fae36f8"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1f69e96b07e265f3e18957be540909b01fae36f8","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"1f69e96b07e265f3e18957be540909b01fae36f8":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}