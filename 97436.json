{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(\"index=\" + writer.segString(), segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","date":1290598569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(\"index=\" + writer.segString(), segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f3787db956bd1718de1bd25dcd373d61662bb","date":1300804533,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"375a962429e373efd2467c5032986be2563a201f","date":1301412825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    writer.waitForMerges();\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(\"docCount=\" + docCount + \" lowerBound=\" + lowerBound + \" upperBound=\" + upperBound + \" i=\" + i + \" segmentCount=\" + segmentCount + \" index=\" + writer.segString() + \" config=\" + writer.getConfig(), docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString() + \" config=\" + writer.getConfig(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["375a962429e373efd2467c5032986be2563a201f"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","375a962429e373efd2467c5032986be2563a201f"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"416f3787db956bd1718de1bd25dcd373d61662bb":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","416f3787db956bd1718de1bd25dcd373d61662bb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","416f3787db956bd1718de1bd25dcd373d61662bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"375a962429e373efd2467c5032986be2563a201f":["416f3787db956bd1718de1bd25dcd373d61662bb"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","375a962429e373efd2467c5032986be2563a201f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","416f3787db956bd1718de1bd25dcd373d61662bb","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"416f3787db956bd1718de1bd25dcd373d61662bb":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","375a962429e373efd2467c5032986be2563a201f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"375a962429e373efd2467c5032986be2563a201f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}