{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","commits":[{"id":"f054843acc706da8f2f007c842699d62e4af736c","date":1450870707,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa393b3d439afdd71f037e600e4d9c1fda8c700f","date":1459946327,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e72e8538028609e81884b15cfd41af2fa71115b","date":1460646191,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a5df6417810fb45d9e609d0f9c48fd89769b7e1","date":1461573569,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    final boolean producedResults = (hits.totalHits > 0);\n    if (!producedResults) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    if (VERBOSE) {\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n    assertTrue(qType + \" produced no results\", producedResults);\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    final boolean producedResults = (hits.totalHits > 0);\n    if (!producedResults) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    if (VERBOSE) {\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n    assertTrue(qType + \" produced no results\", producedResults);\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" query=\" + q + \" numDocs=\" + numDocs);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    final boolean producedResults = (hits.totalHits.value > 0);\n    if (!producedResults) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    if (VERBOSE) {\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits.value); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n    assertTrue(qType + \" produced no results\", producedResults);\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    final IndexSearcher searcher = searcher();\n    TopDocs hits = searcher.search(q, numDocs);\n    final boolean producedResults = (hits.totalHits > 0);\n    if (!producedResults) {\n      System.out.println(\"TEST: qType=\" + qType + \" numDocs=\" + numDocs + \" \" + q.getClass().getCanonicalName() + \" query=\" + q);\n    }\n    if (VERBOSE) {\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n    assertTrue(qType + \" produced no results\", producedResults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa393b3d439afdd71f037e600e4d9c1fda8c700f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"2a5df6417810fb45d9e609d0f9c48fd89769b7e1":["5e72e8538028609e81884b15cfd41af2fa71115b"],"f054843acc706da8f2f007c842699d62e4af736c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","fa393b3d439afdd71f037e600e4d9c1fda8c700f"],"5e72e8538028609e81884b15cfd41af2fa71115b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["5e72e8538028609e81884b15cfd41af2fa71115b","2a5df6417810fb45d9e609d0f9c48fd89769b7e1"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f054843acc706da8f2f007c842699d62e4af736c"]},"commit2Childs":{"fa393b3d439afdd71f037e600e4d9c1fda8c700f":["b6284684320a9808c41a5e43de958b2da22f89bd"],"2a5df6417810fb45d9e609d0f9c48fd89769b7e1":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f054843acc706da8f2f007c842699d62e4af736c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b6284684320a9808c41a5e43de958b2da22f89bd":["5e72e8538028609e81884b15cfd41af2fa71115b"],"5e72e8538028609e81884b15cfd41af2fa71115b":["2a5df6417810fb45d9e609d0f9c48fd89769b7e1","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f054843acc706da8f2f007c842699d62e4af736c"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["fa393b3d439afdd71f037e600e4d9c1fda8c700f","b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}