{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","commits":[{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < config.numIndexDims; ++dim) {\n      final int offset = dim * config.bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          Arrays.compareUnsigned(minPackedValue, offset, offset + config.bytesPerDim, maxPackedValue, offset, offset + config.bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<config.numIndexDims;dim++) {\n      NumericUtils.subtract(config.bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, config.bytesPerDim, scratch1, 0, config.bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, config.bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numIndexDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["41f60ea1802fda42d3c91d023406066d00ddb5f8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}