{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","commits":[{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"/dev/null","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsycned files. */\n  public void crash() throws IOException {\n    synchronized(this) {\n      crashed = true;\n      openFiles = new HashMap();\n    }\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65000dee855f8d7329bd4f6310cb44af4d63bd3","date":1242673652,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsycned files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsycned files. */\n  public void crash() throws IOException {\n    synchronized(this) {\n      crashed = true;\n      openFiles = new HashMap();\n    }\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f7c3b8c7565689eec6efc9a15c68b5e2b7acfa3","date":1251337436,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsycned files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      RAMFile file = fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = (String) it.next();\n      RAMFile file = (RAMFile) fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      RAMFile file = fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      RAMFile file = fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      RAMFile file = fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      RAMFile file = fileMap.get(name);\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        final int numBuffers = file.numBuffers();\n        for(int i=0;i<numBuffers;i++) {\n          byte[] buffer = file.getBuffer(i);\n          Arrays.fill(buffer, (byte) 0);\n        }\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        file.setLength(file.getLength()/2);\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["9f7c3b8c7565689eec6efc9a15c68b5e2b7acfa3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ef82ff03e4016c705811b2658e81471a645c0e49"],"9f7c3b8c7565689eec6efc9a15c68b5e2b7acfa3":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82780afe6097066eb5befb86e9432f077667e3d"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["9f7c3b8c7565689eec6efc9a15c68b5e2b7acfa3"],"e82780afe6097066eb5befb86e9432f077667e3d":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"9f7c3b8c7565689eec6efc9a15c68b5e2b7acfa3":["ef82ff03e4016c705811b2658e81471a645c0e49"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}