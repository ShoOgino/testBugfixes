{"path":"solr/core/src/test/org/apache/solr/core/Queries[OpenCloseCoreStressTest]#Queries(OpenCloseCoreStressTest,String,List[HttpSolrServer],int,Random).mjava","commits":[{"id":"766227a9d9a3552cabc928671006564df47e6d6f","date":1363176788,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Queries[OpenCloseCoreStressTest]#Queries(OpenCloseCoreStressTest,String,List[HttpSolrServer],int,Random).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Queries[OpenCloseCoreStressTest]#Queries(OpenCloseCoreStressTest,String,List[HttpSolrServer],int).mjava","sourceNew":"  public Queries(OpenCloseCoreStressTest OCCST, String url, List<HttpSolrServer> servers, int numThreads, Random random) {\n    baseUrl = url;\n    for (int idx = 0; idx < numThreads; ++idx) {\n      Thread one = new OneQuery(OCCST, url, servers.get(idx), random.nextLong());\n      _threads.add(one);\n      one.start();\n    }\n\n  }\n\n","sourceOld":"  public Queries(OpenCloseCoreStressTest OCCST, String url, List<HttpSolrServer> servers, int numThreads) {\n    baseUrl = url;\n    for (int idx = 0; idx < numThreads; ++idx) {\n      Thread one = new OneQuery(OCCST, url, servers.get(idx));\n      _threads.add(one);\n      one.start();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Queries[OpenCloseCoreStressTest]#Queries(OpenCloseCoreStressTest,String,List[HttpSolrClient],int,Random).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Queries[OpenCloseCoreStressTest]#Queries(OpenCloseCoreStressTest,String,List[HttpSolrServer],int,Random).mjava","sourceNew":"  public Queries(OpenCloseCoreStressTest OCCST, String url, List<HttpSolrClient> clients, int numThreads, Random random) {\n    baseUrl = url;\n    for (int idx = 0; idx < numThreads; ++idx) {\n      Thread one = new OneQuery(OCCST, url, clients.get(idx), random.nextLong());\n      _threads.add(one);\n      one.start();\n    }\n\n  }\n\n","sourceOld":"  public Queries(OpenCloseCoreStressTest OCCST, String url, List<HttpSolrServer> servers, int numThreads, Random random) {\n    baseUrl = url;\n    for (int idx = 0; idx < numThreads; ++idx) {\n      Thread one = new OneQuery(OCCST, url, servers.get(idx), random.nextLong());\n      _threads.add(one);\n      one.start();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"766227a9d9a3552cabc928671006564df47e6d6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["766227a9d9a3552cabc928671006564df47e6d6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"766227a9d9a3552cabc928671006564df47e6d6f":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["766227a9d9a3552cabc928671006564df47e6d6f"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}