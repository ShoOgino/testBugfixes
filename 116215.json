{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","commits":[{"id":"bfc53d09502e7e9683618107ef3cd087df2d6152","date":1357571745,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      final BinaryEntry entry = binaries.get(field.number);\n      assert entry.fixedLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long address = entry.offset + docID * (long)entry.maxLength;\n          try {\n            data.seek(address);\n            if (result.length < entry.maxLength) {\n              result.offset = 0;\n              result.bytes = new byte[entry.maxLength];\n            }\n            data.readBytes(result.bytes, result.offset, entry.maxLength);\n            result.length = entry.maxLength;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return entry.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return entry.maxLength;\n        }\n        \n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      final BinaryEntry entry = binaries.get(field.number);\n      assert entry.fixedLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long address = entry.offset + docID * (long)entry.maxLength;\n          try {\n            data.seek(address);\n            if (result.length < entry.maxLength) {\n              result.offset = 0;\n              result.bytes = new byte[entry.maxLength];\n            }\n            data.readBytes(result.bytes, result.offset, entry.maxLength);\n            result.length = entry.maxLength;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      final BinaryEntry entry = binaries.get(field.number);\n      assert entry.fixedLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long address = entry.offset + docID * (long)entry.maxLength;\n          try {\n            data.seek(address);\n            if (result.length < entry.maxLength) {\n              result.offset = 0;\n              result.bytes = new byte[entry.maxLength];\n            }\n            data.readBytes(result.bytes, result.offset, entry.maxLength);\n            result.length = entry.maxLength;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public boolean isFixedLength() {\n          return entry.fixedLength;\n        }\n\n        @Override\n        public int maxLength() {\n          return entry.maxLength;\n        }\n        \n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b","date":1357611186,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      BinaryEntry bytes = binaries.get(field.number);\n      if (bytes.minLength == bytes.maxLength) {\n        return getFixedBinary(field, bytes);\n      } else {\n        return getVariableBinary(field, bytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      final BinaryEntry entry = binaries.get(field.number);\n      assert entry.fixedLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long address = entry.offset + docID * (long)entry.maxLength;\n          try {\n            data.seek(address);\n            if (result.length < entry.maxLength) {\n              result.offset = 0;\n              result.bytes = new byte[entry.maxLength];\n            }\n            data.readBytes(result.bytes, result.offset, entry.maxLength);\n            result.length = entry.maxLength;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006747777f375b554229c07aa18614c04e7b02a4","date":1357614491,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a binaryDV of the uniqueValues...?\n      BinaryEntry bytes = binaries.get(field.number);\n      if (bytes.minLength == bytes.maxLength) {\n        return getFixedBinary(field, bytes);\n      } else {\n        return getVariableBinary(field, bytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      BinaryEntry bytes = binaries.get(field.number);\n      if (bytes.minLength == bytes.maxLength) {\n        return getFixedBinary(field, bytes);\n      } else {\n        return getVariableBinary(field, bytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a binaryDV of the uniqueValues...?\n      BinaryEntry bytes = binaries.get(field.number);\n      if (bytes.minLength == bytes.maxLength) {\n        return getFixedBinary(field, bytes);\n      } else {\n        return getVariableBinary(field, bytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"68acf69be1b41192ae2278afc452bb66f6349cba":["006747777f375b554229c07aa18614c04e7b02a4"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["bfc53d09502e7e9683618107ef3cd087df2d6152"],"bfc53d09502e7e9683618107ef3cd087df2d6152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"006747777f375b554229c07aa18614c04e7b02a4":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["006747777f375b554229c07aa18614c04e7b02a4"],"68acf69be1b41192ae2278afc452bb66f6349cba":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b"],"bfc53d09502e7e9683618107ef3cd087df2d6152":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc53d09502e7e9683618107ef3cd087df2d6152","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"006747777f375b554229c07aa18614c04e7b02a4":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}