{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      // nocommit: impl null values (ideally smartly)\n      for (Number nv : values) {\n        final long v = nv == null ? 0 : nv.longValue();\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      // nocommit: impl null values (ideally smartly)\n      for (Number nv : values) {\n        final long v = nv == null ? 0 : nv.longValue();\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      // nocommit: impl null values (ideally smartly)\n      for (Number nv : values) {\n        final long v = nv == null ? 0 : nv.longValue();\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v = nv.longValue();\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          quotientWriter.add((nv.longValue() - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    boolean block = true;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long value = nv.longValue();\n        assert value >= -1;\n        minValue = Math.min(minValue, value);\n        maxValue = Math.max(maxValue, value);\n        ++count;\n      }\n\n      // packed ints doesnt support valueCount > maxValue, and \n      // we must represent missing ordinal (-1)\n      if (count < Integer.MAX_VALUE && maxValue < Long.MAX_VALUE) {\n        block = false;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else if (block == false) {\n      format = BITPACK_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE, PackedInts.DEFAULT);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE, PackedInts.DEFAULT);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      case BITPACK_COMPRESSED:\n        assert count > 0 && count < Integer.MAX_VALUE;\n        assert maxValue >= -1 && maxValue < Long.MAX_VALUE : maxValue;\n        int bpv = PackedInts.bitsRequired(maxValue+1);\n        bpv = PackedInts.fastestDirectBits(bpv, PackedInts.DEFAULT);\n        meta.writeVInt(bpv);\n        final PackedInts.Writer bitWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bpv, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          bitWriter.add(nv.longValue()+1);\n        }\n        bitWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    boolean block = true;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long value = nv.longValue();\n        assert value >= -1;\n        minValue = Math.min(minValue, value);\n        maxValue = Math.max(maxValue, value);\n        ++count;\n      }\n\n      // packed ints doesnt support valueCount > maxValue, and \n      // we must represent missing ordinal (-1)\n      if (count < Integer.MAX_VALUE && maxValue < Long.MAX_VALUE) {\n        block = false;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else if (block == false) {\n      format = BITPACK_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE, PackedInts.DEFAULT);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE, PackedInts.DEFAULT);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      case BITPACK_COMPRESSED:\n        assert count > 0 && count < Integer.MAX_VALUE;\n        assert maxValue >= -1 && maxValue < Long.MAX_VALUE : maxValue;\n        int bpv = PackedInts.bitsRequired(maxValue+1);\n        bpv = PackedInts.fastestDirectBits(bpv, PackedInts.DEFAULT);\n        meta.writeVInt(bpv);\n        final PackedInts.Writer bitWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bpv, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          bitWriter.add(nv.longValue()+1);\n        }\n        bitWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","4cc45c615dbb82bf79d5f9550286098367874fbf"],"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}