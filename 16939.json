{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","commits":[{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.TOKENIZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.TOKENIZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void xxxtestInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void xxxtestInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}