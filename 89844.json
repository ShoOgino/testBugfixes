{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#setupQuadGrid(int).mjava","commits":[{"id":"f54c29b684839e16d0a7ffd41ee8a1e93e905184","date":1395120410,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#setupQuadGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#mySetup(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  public void mySetup(int maxLevels) throws IOException {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    System.out.println(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f54c29b684839e16d0a7ffd41ee8a1e93e905184":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0521546db127e358ced1772a9d696dbdd255b203":["f54c29b684839e16d0a7ffd41ee8a1e93e905184"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"]},"commit2Childs":{"f54c29b684839e16d0a7ffd41ee8a1e93e905184":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f54c29b684839e16d0a7ffd41ee8a1e93e905184"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}