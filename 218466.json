{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,ScoreDoc,int).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(AtomicReaderContext[] leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,ScoreDoc,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(List<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(nDocs, after, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}