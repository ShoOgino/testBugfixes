{"path":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** Initializes the reader, for reuse on a new term. */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** Initializes the reader, for reuse on a new term. */\n  public void init(long skipPointer, int df) throws IOException {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n    loadSkipLevels();\n  }\n\n","sourceOld":"  /** Initializes the reader, for reuse on a new term. */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["519435fc0d6082a1b8081f9492b714f716877437"],"519435fc0d6082a1b8081f9492b714f716877437":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519435fc0d6082a1b8081f9492b714f716877437":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519435fc0d6082a1b8081f9492b714f716877437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}