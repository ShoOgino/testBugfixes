{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"/dev/null","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bf37deff37f2ba52fa79ed720a3517f2033839c","date":1405877548,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    this.onRollback = ConfigParseUtil.getStringAttribute(element, \"onRollback\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","bugFix":null,"bugIntro":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5","date":1406290788,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    this.onError = ConfigParseUtil.getStringAttribute(element, \"onError\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    this.onRollback = ConfigParseUtil.getStringAttribute(element, \"onRollback\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","bugFix":["3bf37deff37f2ba52fa79ed720a3517f2033839c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","sourceNew":null,"sourceOld":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    schema = di.getSchema();\n    lowerNameVsSchemaField = null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    this.onError = ConfigParseUtil.getStringAttribute(element, \"onError\", null);\n    List<Entity> modEntities = new ArrayList<>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, this, null);\n      Map<String, EntityField> fields = gatherAllFields(di, entity);\n      verifyWithSchema(fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3bf37deff37f2ba52fa79ed720a3517f2033839c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["3bf37deff37f2ba52fa79ed720a3517f2033839c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"08970e5b8411182a29412c177eff67ec1110095b":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"]},"commit2Childs":{"3bf37deff37f2ba52fa79ed720a3517f2033839c":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3bf37deff37f2ba52fa79ed720a3517f2033839c"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["407687e67faf6e1f02a211ca078d8e3eed631027","08970e5b8411182a29412c177eff67ec1110095b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}