{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // TODO: examine the values: and simulate all the possibilities.\n    // e.g. if all values fit in a byte, write a fixed_8 etc.\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      addVarIntsField(data, values);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e67c2e7a5990eb850e9cebdfed78f88fd888b02a","date":1358968317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // TODO: examine the values: and simulate all the possibilities.\n    // e.g. if all values fit in a byte, write a fixed_8 etc.\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      addVarIntsField(data, values);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10e89cbe24422ef92a37fc037a955728de2e12cf"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["e67c2e7a5990eb850e9cebdfed78f88fd888b02a"],"e67c2e7a5990eb850e9cebdfed78f88fd888b02a":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["e67c2e7a5990eb850e9cebdfed78f88fd888b02a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db5a3aeba34624ea274f34df5691d40ca25f2b67","d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"e67c2e7a5990eb850e9cebdfed78f88fd888b02a":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}