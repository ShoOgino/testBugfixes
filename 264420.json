{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#checkExistingAndReorder(ArrayList[Completion],BytesRef).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#checkExistingAndReorder(ArrayList[Completion],BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#checkExistingAndReorder(ArrayList[LookupResult],String).mjava","sourceNew":"  /**\n   * Checks if the list of\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult}s already has a\n   * <code>key</code>. If so, reorders that\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult} to the first\n   * position.\n   * \n   * @return Returns <code>true<code> if and only if <code>list</code> contained\n   *         <code>key</code>.\n   */\n  private boolean checkExistingAndReorder(ArrayList<Completion> list, BytesRef key) {\n    // We assume list does not have duplicates (because of how the FST is created).\n    for (int i = list.size(); --i >= 0;) {\n      if (key.equals(list.get(i).utf8)) {\n        // Key found. Unless already at i==0, remove it and push up front so\n        // that the ordering\n        // remains identical with the exception of the exact match.\n        list.add(0, list.remove(i));\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks if the list of {@link LookupResult}s already has a <code>key</code>. If so,\n   * reorders that {@link LookupResult} to the first position.\n   * \n   * @return Returns <code>true<code> if and only if <code>list</code> contained <code>key</code>.\n   */\n  private boolean checkExistingAndReorder(ArrayList<LookupResult> list, String key) {\n    // We assume list does not have duplicates (because of how the FST is created).\n    for (int i = list.size(); --i >= 0;) {\n      if (key.equals(list.get(i).key)) {\n        // Key found. Unless already at i==0, remove it and push up front so that the ordering\n        // remains identical with the exception of the exact match.\n        list.add(0,  list.remove(i));\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#checkExistingAndReorder(ArrayList[Completion],BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#checkExistingAndReorder(ArrayList[Completion],BytesRef).mjava","sourceNew":"  /**\n   * Checks if the list of\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult}s already has a\n   * <code>key</code>. If so, reorders that\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult} to the first\n   * position.\n   * \n   * @return Returns <code>true<code> if and only if <code>list</code> contained\n   *         <code>key</code>.\n   */\n  private boolean checkExistingAndReorder(ArrayList<Completion> list, BytesRef key) {\n    // We assume list does not have duplicates (because of how the FST is created).\n    for (int i = list.size(); --i >= 0;) {\n      if (key.equals(list.get(i).utf8)) {\n        // Key found. Unless already at i==0, remove it and push up front so\n        // that the ordering\n        // remains identical with the exception of the exact match.\n        list.add(0, list.remove(i));\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks if the list of\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult}s already has a\n   * <code>key</code>. If so, reorders that\n   * {@link org.apache.lucene.search.suggest.Lookup.LookupResult} to the first\n   * position.\n   * \n   * @return Returns <code>true<code> if and only if <code>list</code> contained\n   *         <code>key</code>.\n   */\n  private boolean checkExistingAndReorder(ArrayList<Completion> list, BytesRef key) {\n    // We assume list does not have duplicates (because of how the FST is created).\n    for (int i = list.size(); --i >= 0;) {\n      if (key.equals(list.get(i).utf8)) {\n        // Key found. Unless already at i==0, remove it and push up front so\n        // that the ordering\n        // remains identical with the exception of the exact match.\n        list.add(0, list.remove(i));\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}