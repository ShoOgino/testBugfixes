{"path":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","commits":[{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"/dev/null","sourceNew":"  /**Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if(hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String,?>) commandData);\n    if(keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"/dev/null","sourceNew":"  /**Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if(hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String,?>) commandData);\n    if(keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, ?>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":"  /**Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if(hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String,?>) commandData);\n    if(keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String,Object> cp = new LinkedHashMap<>((Map<String,?>)commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, ?>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f61c16ff203d333ce6939eb3663ef60b5701cf","date":1426779353,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, Object>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String,Object> cp = new LinkedHashMap<>((Map<String,?>)commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, Object>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, ?>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#getValuesExcluding(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, Object>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","sourceOld":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, Object>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#getValuesExcluding(String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get all the values from the metadata for the command\n   * without the specified keys\n   */\n  public Map<String,Object> getValuesExcluding(String... keys) {\n    getMapVal(null);\n    if (hasError()) return emptyMap();//just to verify the type is Map\n    @SuppressWarnings(\"unchecked\") \n    LinkedHashMap<String, Object> cp = new LinkedHashMap<>((Map<String, Object>) commandData);\n    if (keys == null) return cp;\n    for (String key : keys) {\n      cp.remove(key);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["04f61c16ff203d333ce6939eb3663ef60b5701cf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["04f61c16ff203d333ce6939eb3663ef60b5701cf","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","04f61c16ff203d333ce6939eb3663ef60b5701cf"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["be214850f18c80408bcfafd463ec155ab0515aee"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f61c16ff203d333ce6939eb3663ef60b5701cf":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be214850f18c80408bcfafd463ec155ab0515aee":["cb9af919a17be70cfc512901fc70f1beaf840ca1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"eeeea2295d6355a29e259130a5c48ace73022d7c":["04f61c16ff203d333ce6939eb3663ef60b5701cf"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","be214850f18c80408bcfafd463ec155ab0515aee"],"04f61c16ff203d333ce6939eb3663ef60b5701cf":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}