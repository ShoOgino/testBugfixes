{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    UpdateStream updateStream = new UpdateStream(expression, factory);\n    Explanation explanation = updateStream.toExplanation(factory);\n    Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n    Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n    \n    StreamExplanation updateExplanation = (StreamExplanation)explanation;\n    Assert.assertEquals(1, updateExplanation.getChildren().size());\n    Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n    Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    UpdateStream updateStream = new UpdateStream(expression, factory);\n    Explanation explanation = updateStream.toExplanation(factory);\n    Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n    Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n    \n    StreamExplanation updateExplanation = (StreamExplanation)explanation;\n    Assert.assertEquals(1, updateExplanation.getChildren().size());\n    Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n    Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","sourceNew":"  @Test\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    try (UpdateStream updateStream = new UpdateStream(expression, factory)) {\n      Explanation explanation = updateStream.toExplanation(factory);\n      Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n      Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n\n      StreamExplanation updateExplanation = (StreamExplanation) explanation;\n      Assert.assertEquals(1, updateExplanation.getChildren().size());\n      Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n      Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    UpdateStream updateStream = new UpdateStream(expression, factory);\n    Explanation explanation = updateStream.toExplanation(factory);\n    Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n    Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n    \n    StreamExplanation updateExplanation = (StreamExplanation)explanation;\n    Assert.assertEquals(1, updateExplanation.getChildren().size());\n    Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n    Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    try (UpdateStream updateStream = new UpdateStream(expression, factory)) {\n      Explanation explanation = updateStream.toExplanation(factory);\n      Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n      Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n\n      StreamExplanation updateExplanation = (StreamExplanation) explanation;\n      Assert.assertEquals(1, updateExplanation.getChildren().size());\n      Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n      Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    try (UpdateStream updateStream = new UpdateStream(expression, factory)) {\n      Explanation explanation = updateStream.toExplanation(factory);\n      Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n      Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n\n      StreamExplanation updateExplanation = (StreamExplanation) explanation;\n      Assert.assertEquals(1, updateExplanation.getChildren().size());\n      Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n      Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest#testUpdateStream().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    try (UpdateStream updateStream = new UpdateStream(expression, factory)) {\n      Explanation explanation = updateStream.toExplanation(factory);\n      Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n      Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n\n      StreamExplanation updateExplanation = (StreamExplanation) explanation;\n      Assert.assertEquals(1, updateExplanation.getChildren().size());\n      Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n      Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testUpdateStream() throws Exception {\n    StreamExpression expression = StreamExpressionParser.parse(\"update(\"\n                                                               + \"collection2, \"\n                                                               + \"batchSize=5, \"\n                                                               + \"search(\"\n                                                                 + \"collection1, \"\n                                                                 + \"q=*:*, \"\n                                                                 + \"fl=\\\"id,a_s,a_i,a_f\\\", \"\n                                                                 + \"sort=\\\"a_f asc, a_i asc\\\"))\");\n    \n    try (UpdateStream updateStream = new UpdateStream(expression, factory)) {\n      Explanation explanation = updateStream.toExplanation(factory);\n      Assert.assertEquals(\"solr (collection2)\", explanation.getFunctionName());\n      Assert.assertEquals(\"Solr/Lucene\", explanation.getImplementingClass());\n\n      StreamExplanation updateExplanation = (StreamExplanation) explanation;\n      Assert.assertEquals(1, updateExplanation.getChildren().size());\n      Assert.assertEquals(\"update\", updateExplanation.getChildren().get(0).getFunctionName());\n      Assert.assertEquals(UpdateStream.class.getName(), updateExplanation.getChildren().get(0).getImplementingClass());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}