{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","commits":[{"id":"6e63c913b8b0e2cc3c4f8994c4d976a664af7297","date":1228572582,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"725326303b39157323796ef620a9ad99eb185f11","date":1241874089,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","sourceNew":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","sourceOld":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67522804713e97a3b2085fc409aeb8abe67c304d","date":1251129392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","sourceNew":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","sourceOld":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testMinMaxFreq().mjava","sourceNew":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","sourceOld":"  public void testMinMaxFreq() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(TermsComponent.UNLIMITED_MAX_COUNT));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 1, terms.size() == 1);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    // Tests TERMS_LOWER = \"a\" with freqmin = 2, freqmax = -1, terms.size() = 1\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_MINCOUNT,String.valueOf(2));\n    params.add(TermsParams.TERMS_MAXCOUNT,String.valueOf(3));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    Integer d = (Integer) terms.get(\"d\");\n    assertTrue(d + \" does not equal: \" + 3, d == 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"725326303b39157323796ef620a9ad99eb185f11":["6e63c913b8b0e2cc3c4f8994c4d976a664af7297"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["67522804713e97a3b2085fc409aeb8abe67c304d"],"67522804713e97a3b2085fc409aeb8abe67c304d":["725326303b39157323796ef620a9ad99eb185f11"],"6e63c913b8b0e2cc3c4f8994c4d976a664af7297":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"725326303b39157323796ef620a9ad99eb185f11":["67522804713e97a3b2085fc409aeb8abe67c304d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6e63c913b8b0e2cc3c4f8994c4d976a664af7297"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6e63c913b8b0e2cc3c4f8994c4d976a664af7297":["725326303b39157323796ef620a9ad99eb185f11"],"67522804713e97a3b2085fc409aeb8abe67c304d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}