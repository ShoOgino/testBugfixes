{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","commits":[{"id":"0c13ac3312389224caec142b1fa4e837caa80ee0","date":1279383717,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","pathOld":"/dev/null","sourceNew":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffefL),Long.valueOf(0xffffffffffffffefL),\n      Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(4),\n    }).iterator());\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000010L),Long.valueOf(0x0000000000000010L),\n      Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(4),\n    }).iterator());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"778eb8d25c0eed19bb220d78402ae26e3f67c2d9","date":1279386974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4)\n    }).iterator());\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0xffffffffffffffefL),Long.valueOf(0xffffffffffffffefL),\n      Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(4),\n    }).iterator());\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4)\n    }).iterator());\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x0000000000000010L),Long.valueOf(0x0000000000000010L),\n      Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(4),\n    }).iterator());\n  }\n\n","bugFix":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","pathOld":"/dev/null","sourceNew":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","0c13ac3312389224caec142b1fa4e837caa80ee0"],"5f4e87790277826a2aea119328600dfb07761f32":[],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c13ac3312389224caec142b1fa4e837caa80ee0":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}