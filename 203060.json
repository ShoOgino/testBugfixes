{"path":"src/test/org/apache/lucene/HighFreqTerms#main(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/HighFreqTerms#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new FSDirectory(\"demo index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      TermInfoQueue tiq = new TermInfoQueue(numTerms);\n      TermEnum terms = reader.terms();\n\n      int minFreq = 0;\n      while (terms.next()) {\n\tif (terms.docFreq() > minFreq) {\n\t  tiq.put(new TermInfo(terms.term(), terms.docFreq()));\n\t  if (tiq.size() > numTerms) {\t\t  // if tiq overfull\n\t    tiq.pop();\t\t\t\t  // remove lowest in tiq\n\t    minFreq = ((TermInfo)tiq.top()).docFreq; // reset minFreq\n\t  }\n\t}\n      }\n\n      while (tiq.size() != 0) {\n\tTermInfo termInfo = (TermInfo)tiq.pop();\n\tSystem.out.println(termInfo.term + \" \" + termInfo.docFreq);\n      }\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31864e700cea788fa9b4fb9d26cb559be87da347","date":1003511719,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/HighFreqTerms#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = IndexReader.open(\"index\");\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    int minFreq = 0;\n    while (terms.next()) {\n      if (terms.docFreq() > minFreq) {\n        tiq.put(new TermInfo(terms.term(), terms.docFreq()));\n        if (tiq.size() > numTerms) {\t\t  // if tiq overfull\n          tiq.pop();\t\t\t\t  // remove lowest in tiq\n          minFreq = ((TermInfo)tiq.top()).docFreq; // reset minFreq\n        }\n      }\n    }\n\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo)tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new FSDirectory(\"demo index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      TermInfoQueue tiq = new TermInfoQueue(numTerms);\n      TermEnum terms = reader.terms();\n\n      int minFreq = 0;\n      while (terms.next()) {\n\tif (terms.docFreq() > minFreq) {\n\t  tiq.put(new TermInfo(terms.term(), terms.docFreq()));\n\t  if (tiq.size() > numTerms) {\t\t  // if tiq overfull\n\t    tiq.pop();\t\t\t\t  // remove lowest in tiq\n\t    minFreq = ((TermInfo)tiq.top()).docFreq; // reset minFreq\n\t  }\n\t}\n      }\n\n      while (tiq.size() != 0) {\n\tTermInfo termInfo = (TermInfo)tiq.pop();\n\tSystem.out.println(termInfo.term + \" \" + termInfo.docFreq);\n      }\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"147f9b4e0f6946e1f1b1cc38520f57183c8c0a3c","date":1036648496,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/HighFreqTerms#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = IndexReader.open(\"index\");\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    int minFreq = 0;\n    while (terms.next()) {\n      if (terms.docFreq() > minFreq) {\n        tiq.put(new TermInfo(terms.term(), terms.docFreq()));\n        if (tiq.size() > numTerms) {\t\t  // if tiq overfull\n          tiq.pop();\t\t\t\t  // remove lowest in tiq\n          minFreq = ((TermInfo)tiq.top()).docFreq; // reset minFreq\n        }\n      }\n    }\n\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo)tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31864e700cea788fa9b4fb9d26cb559be87da347":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["147f9b4e0f6946e1f1b1cc38520f57183c8c0a3c"],"147f9b4e0f6946e1f1b1cc38520f57183c8c0a3c":["31864e700cea788fa9b4fb9d26cb559be87da347"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["31864e700cea788fa9b4fb9d26cb559be87da347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"31864e700cea788fa9b4fb9d26cb559be87da347":["147f9b4e0f6946e1f1b1cc38520f57183c8c0a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"147f9b4e0f6946e1f1b1cc38520f57183c8c0a3c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}