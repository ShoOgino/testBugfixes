{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonBooleanQuery().mjava","commits":[{"id":"890d9da8d20886190a080e375f93341a779474e4","date":1549505353,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testJsonBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonBooleanQuery() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n    QueryResponse[] responses = new QueryResponse[3];\n\n    {\n      //tag::solrj-ipod-query-bool[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boolProperties = new HashMap<>();\n      final List<Object> mustClauses = new ArrayList<>();\n      final List<Object> mustNotClauses = new ArrayList<>();\n      final Map<String, Object> frangeTopLevel = new HashMap<>();\n      final Map<String, Object> frangeProperties = new HashMap<>();\n\n      queryTopLevel.put(\"bool\", boolProperties);\n      boolProperties.put(\"must\", mustClauses);\n      mustClauses.add(\"name:iPod\");\n\n      boolProperties.put(\"must_not\", mustNotClauses);\n      frangeTopLevel.put(\"frange\", frangeProperties);\n      frangeProperties.put(\"l\", 0);\n      frangeProperties.put(\"u\", 5);\n      frangeProperties.put(\"query\", \"popularity\");\n      mustNotClauses.add(frangeTopLevel);\n\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-bool[]\n\n      responses[0] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-bool-condensed[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boolProperties = new HashMap<>();\n      final List<Object> mustClauses = new ArrayList<>();\n      final List<Object> mustNotClauses = new ArrayList<>();\n      queryTopLevel.put(\"bool\", boolProperties);\n      boolProperties.put(\"must\", \"name:iPod\");\n      boolProperties.put(\"must_not\", \"{!frange l=0 u=5}popularity\");\n\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel);\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-bool-condensed[]\n\n      responses[1] = response;\n    }\n\n    {\n      //tag::solrj-ipod-query-bool-filter[]\n      final Map<String, Object> queryTopLevel = new HashMap<>();\n      final Map<String, Object> boolProperties = new HashMap<>();\n      queryTopLevel.put(\"bool\", boolProperties);\n      boolProperties.put(\"must_not\",\"{!frange l=0 u=5}popularity\");\n\n      final JsonQueryRequest query = new JsonQueryRequest()\n          .setQuery(queryTopLevel)\n          .withFilter(\"name:iPod\");\n      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);\n      //end::solrj-ipod-query-bool-filter[]\n\n      responses[2] = response;\n    }\n\n    for (QueryResponse response : responses) {\n      assertResponseFoundNumDocs(response, 1);\n      assertEquals(\"MA147LL/A\", response.getResults().get(0).get(\"id\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"890d9da8d20886190a080e375f93341a779474e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["890d9da8d20886190a080e375f93341a779474e4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["890d9da8d20886190a080e375f93341a779474e4"],"890d9da8d20886190a080e375f93341a779474e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}