{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) throws IOException {\n      FuzzySet bloomFilter = bloomFilterFactory.getSetForField(state,field);\n      if (bloomFilter != null) {\n        assert bloomFilters.containsKey(field) == false;\n        bloomFilters.put(field, bloomFilter);\n        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field),bloomFilter);\n      } else {\n        // No, use the unfiltered fieldsConsumer - we are not interested in\n        // recording any term Bitsets.\n        return delegateFieldsConsumer.addField(field);\n      }\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) throws IOException {\n      FuzzySet bloomFilter = bloomFilterFactory.getSetForField(state,field);\n      if (bloomFilter != null) {\n        assert bloomFilters.containsKey(field) == false;\n        bloomFilters.put(field, bloomFilter);\n        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field),bloomFilter);\n      } else {\n        // No, use the unfiltered fieldsConsumer - we are not interested in\n        // recording any term Bitsets.\n        return delegateFieldsConsumer.addField(field);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) throws IOException {\n      FuzzySet bloomFilter = bloomFilterFactory.getSetForField(state,field);\n      if (bloomFilter != null) {\n        assert bloomFilters.containsKey(field) == false;\n        bloomFilters.put(field, bloomFilter);\n        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field), bloomFilter);\n      } else {\n        // No, use the unfiltered fieldsConsumer - we are not interested in\n        // recording any term Bitsets.\n        return delegateFieldsConsumer.addField(field);\n      }\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) throws IOException {\n      FuzzySet bloomFilter = bloomFilterFactory.getSetForField(state,field);\n      if (bloomFilter != null) {\n        assert bloomFilters.containsKey(field) == false;\n        bloomFilters.put(field, bloomFilter);\n        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field),bloomFilter);\n      } else {\n        // No, use the unfiltered fieldsConsumer - we are not interested in\n        // recording any term Bitsets.\n        return delegateFieldsConsumer.addField(field);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#addField(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) throws IOException {\n      FuzzySet bloomFilter = bloomFilterFactory.getSetForField(state,field);\n      if (bloomFilter != null) {\n        assert bloomFilters.containsKey(field) == false;\n        bloomFilters.put(field, bloomFilter);\n        return new WrappedTermsConsumer(delegateFieldsConsumer.addField(field), bloomFilter);\n      } else {\n        // No, use the unfiltered fieldsConsumer - we are not interested in\n        // recording any term Bitsets.\n        return delegateFieldsConsumer.addField(field);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}