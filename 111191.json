{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}