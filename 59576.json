{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","commits":[{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(\"name\");\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","sourceNew":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(NAME);\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","sourceOld":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(\"name\");\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","sourceNew":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(NAME);\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","sourceOld":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(\"name\");\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCoreTool#safeCheckCoreExists(String,String).mjava","sourceNew":null,"sourceOld":"    protected boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n      boolean exists = false;\n      try {\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        exists = coreStatus != null && coreStatus.containsKey(NAME);\n      } catch (Exception exc) {\n        // just ignore it since we're only interested in a positive result here\n      }\n      return exists;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["209c0259a9b7087b2111411ec790d6557ef86307"],"209c0259a9b7087b2111411ec790d6557ef86307":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["209c0259a9b7087b2111411ec790d6557ef86307","1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["4ca20be81c9284c840498143264e583ccbb8525a","d2638f781be724518ff6c2263d14a48cf6e68017"],"209c0259a9b7087b2111411ec790d6557ef86307":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["209c0259a9b7087b2111411ec790d6557ef86307"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}