{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}