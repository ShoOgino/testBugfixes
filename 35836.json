{"path":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\r\n    // bytes into the string.\r\n    //\r\n    // Use single quoted strings for safety since no evaluation is done within them.\r\n    // Also, there are very few escapes recognized in a singe quoted string, so\r\n    // only escape the backspace and single quote.\r\n    writer.write('\\'');\r\n    // it might be more efficient to use a stringbuilder or write substrings\r\n    // if writing chars to the stream is slow.\r\n    if (needsEscaping) {\r\n      for (int i=0; i<val.length(); i++) {\r\n        char ch = val.charAt(i);\r\n        switch(ch) {\r\n          case '\\'':\r\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\r\n          default: writer.write(ch); break;\r\n        }\r\n      }\r\n    } else {\r\n      writer.write(val);\r\n    }\r\n    writer.write('\\'');\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\n    // bytes into the string.\n    //\n    // Use single quoted strings for safety since no evaluation is done within them.\n    // Also, there are very few escapes recognized in a singe quoted string, so\n    // only escape the backspace and single quote.\n    writer.write('\\'');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\\'':\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\n          default: writer.write(ch); break;\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\\'');\n  }\n\n","sourceOld":"  @Override\r\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\r\n    // bytes into the string.\r\n    //\r\n    // Use single quoted strings for safety since no evaluation is done within them.\r\n    // Also, there are very few escapes recognized in a singe quoted string, so\r\n    // only escape the backspace and single quote.\r\n    writer.write('\\'');\r\n    // it might be more efficient to use a stringbuilder or write substrings\r\n    // if writing chars to the stream is slow.\r\n    if (needsEscaping) {\r\n      for (int i=0; i<val.length(); i++) {\r\n        char ch = val.charAt(i);\r\n        switch(ch) {\r\n          case '\\'':\r\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\r\n          default: writer.write(ch); break;\r\n        }\r\n      }\r\n    } else {\r\n      writer.write(val);\r\n    }\r\n    writer.write('\\'');\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6de62b943ac8d07431256ed7a056af1b7c816186","date":1157797561,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\n    // bytes into the string.\n    //\n    // Use single quoted strings for safety since no evaluation is done within them.\n    // Also, there are very few escapes recognized in a single quoted string, so\n    // only escape the backslash and single quote.\n    writer.write('\\'');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\\'':\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\n          default: writer.write(ch); break;\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\\'');\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\n    // bytes into the string.\n    //\n    // Use single quoted strings for safety since no evaluation is done within them.\n    // Also, there are very few escapes recognized in a singe quoted string, so\n    // only escape the backspace and single quote.\n    writer.write('\\'');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\\'':\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\n          default: writer.write(ch); break;\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13baf5514709a27de4ff67151d35b715138d158d","date":1186803122,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/RubyWriter[RubyResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/RubyWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\n    // bytes into the string.\n    //\n    // Use single quoted strings for safety since no evaluation is done within them.\n    // Also, there are very few escapes recognized in a single quoted string, so\n    // only escape the backslash and single quote.\n    writer.write('\\'');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\\'':\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\n          default: writer.write(ch); break;\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\\'');\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // Ruby doesn't do unicode escapes... so let the servlet container write raw UTF-8\n    // bytes into the string.\n    //\n    // Use single quoted strings for safety since no evaluation is done within them.\n    // Also, there are very few escapes recognized in a single quoted string, so\n    // only escape the backslash and single quote.\n    writer.write('\\'');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\\'':\n          case '\\\\': writer.write('\\\\'); writer.write(ch); break;\n          default: writer.write(ch); break;\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"6de62b943ac8d07431256ed7a056af1b7c816186":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13baf5514709a27de4ff67151d35b715138d158d":["6de62b943ac8d07431256ed7a056af1b7c816186"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["6de62b943ac8d07431256ed7a056af1b7c816186"],"6de62b943ac8d07431256ed7a056af1b7c816186":["13baf5514709a27de4ff67151d35b715138d158d"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13baf5514709a27de4ff67151d35b715138d158d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13baf5514709a27de4ff67151d35b715138d158d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}