{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","commits":[{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int).mjava","sourceNew":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int dataDimensionCount, int indexDimensionCount, int numBytes) {\n    if (dataDimensionCount <= 0) {\n      throw new IllegalArgumentException(\"point data dimension count must be >= 0; got \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (dataDimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point data dimension count must be < PointValues.MAX_DIMENSIONS (= \" + PointValues.MAX_DIMENSIONS + \"); got \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > dataDimensionCount) {\n      throw new IllegalArgumentException(\"point index dimension count must be <= point data dimension count (= \" + dataDimensionCount + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDataDimensionCount != 0 && pointDataDimensionCount != dataDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point data dimension count from \" + pointDataDimensionCount + \" to \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointIndexDimensionCount != 0 && pointIndexDimensionCount != indexDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point index dimension count from \" + pointIndexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDataDimensionCount = dataDimensionCount;\n    pointIndexDimensionCount = indexDimensionCount;\n    pointNumBytes = numBytes;\n\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int count, int numBytes) {\n    if (count <= 0) {\n      throw new IllegalArgumentException(\"point dimension count must be >= 0; got \" + count + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (count > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point dimension count must be < PointValues.MAX_DIMENSIONS (= \" + PointValues.MAX_DIMENSIONS + \"); got \" + count + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDimensionCount != 0 && pointDimensionCount != count) {\n      throw new IllegalArgumentException(\"cannot change point dimension count from \" + pointDimensionCount + \" to \" + count + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDimensionCount = count;\n    pointNumBytes = numBytes;\n\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","sourceNew":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int dimensionCount, int indexDimensionCount, int numBytes) {\n    if (dimensionCount <= 0) {\n      throw new IllegalArgumentException(\"point dimension count must be >= 0; got \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > PointValues.MAX_INDEX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point index dimension count must be < PointValues.MAX_INDEX_DIMENSIONS (= \" + PointValues.MAX_INDEX_DIMENSIONS + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > dimensionCount) {\n      throw new IllegalArgumentException(\"point index dimension count must be <= point dimension count (= \" + dimensionCount + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDimensionCount != 0 && pointDimensionCount != dimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point dimension count from \" + pointDimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointIndexDimensionCount != 0 && pointIndexDimensionCount != indexDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point index dimension count from \" + pointIndexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDimensionCount = dimensionCount;\n    pointIndexDimensionCount = indexDimensionCount;\n    pointNumBytes = numBytes;\n\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int dataDimensionCount, int indexDimensionCount, int numBytes) {\n    if (dataDimensionCount <= 0) {\n      throw new IllegalArgumentException(\"point data dimension count must be >= 0; got \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (dataDimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point data dimension count must be < PointValues.MAX_DIMENSIONS (= \" + PointValues.MAX_DIMENSIONS + \"); got \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > dataDimensionCount) {\n      throw new IllegalArgumentException(\"point index dimension count must be <= point data dimension count (= \" + dataDimensionCount + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDataDimensionCount != 0 && pointDataDimensionCount != dataDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point data dimension count from \" + pointDataDimensionCount + \" to \" + dataDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointIndexDimensionCount != 0 && pointIndexDimensionCount != indexDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point index dimension count from \" + pointIndexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDataDimensionCount = dataDimensionCount;\n    pointIndexDimensionCount = indexDimensionCount;\n    pointNumBytes = numBytes;\n\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683b2041fcb490acd2bfec6034c593b3cfb2098c","date":1596135595,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setPointDimensions(int,int,int).mjava","sourceNew":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int dimensionCount, int indexDimensionCount, int numBytes) {\n    if (dimensionCount <= 0) {\n      throw new IllegalArgumentException(\"point dimension count must be >= 0; got \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > PointValues.MAX_INDEX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point index dimension count must be < PointValues.MAX_INDEX_DIMENSIONS (= \" + PointValues.MAX_INDEX_DIMENSIONS + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > dimensionCount) {\n      throw new IllegalArgumentException(\"point index dimension count must be <= point dimension count (= \" + dimensionCount + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDimensionCount != 0 && pointDimensionCount != dimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point dimension count from \" + pointDimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointIndexDimensionCount != 0 && pointIndexDimensionCount != indexDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point index dimension count from \" + pointIndexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDimensionCount = dimensionCount;\n    pointIndexDimensionCount = indexDimensionCount;\n    pointNumBytes = numBytes;\n\n    this.checkConsistency();\n  }\n\n","sourceOld":"  /** Record that this field is indexed with points, with the\n   *  specified number of dimensions and bytes per dimension. */\n  public void setPointDimensions(int dimensionCount, int indexDimensionCount, int numBytes) {\n    if (dimensionCount <= 0) {\n      throw new IllegalArgumentException(\"point dimension count must be >= 0; got \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > PointValues.MAX_INDEX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"point index dimension count must be < PointValues.MAX_INDEX_DIMENSIONS (= \" + PointValues.MAX_INDEX_DIMENSIONS + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (indexDimensionCount > dimensionCount) {\n      throw new IllegalArgumentException(\"point index dimension count must be <= point dimension count (= \" + dimensionCount + \"); got \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes <= 0) {\n      throw new IllegalArgumentException(\"point numBytes must be >= 0; got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (numBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"point numBytes must be <= PointValues.MAX_NUM_BYTES (= \" + PointValues.MAX_NUM_BYTES + \"); got \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointDimensionCount != 0 && pointDimensionCount != dimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point dimension count from \" + pointDimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointIndexDimensionCount != 0 && pointIndexDimensionCount != indexDimensionCount) {\n      throw new IllegalArgumentException(\"cannot change point index dimension count from \" + pointIndexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + name + \"\\\"\");\n    }\n    if (pointNumBytes != 0 && pointNumBytes != numBytes) {\n      throw new IllegalArgumentException(\"cannot change point numBytes from \" + pointNumBytes + \" to \" + numBytes + \" for field=\\\"\" + name + \"\\\"\");\n    }\n\n    pointDimensionCount = dimensionCount;\n    pointIndexDimensionCount = indexDimensionCount;\n    pointNumBytes = numBytes;\n\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683b2041fcb490acd2bfec6034c593b3cfb2098c"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["683b2041fcb490acd2bfec6034c593b3cfb2098c"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6652c943595e92c187ee904c382863013eae28f"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}