{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /**\n   * Simple test for KeywordAttribute\n   */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, DICTIONARY, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keywork marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), DICTIONARY, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /**\n   * Simple test for KeywordAttribute\n   */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, DICTIONARY, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keywork marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), DICTIONARY, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary, TestUtil.nextInt(random(), 1, 3));\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet( Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet( Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestHunspellStemFilter#testKeywordAttribute().mjava","sourceNew":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet( Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /** Simple test for KeywordAttribute */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keyword marker\n    tokenizer = whitespaceMockTokenizer(\"lucene is awesome\");\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer, set), dictionary);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}