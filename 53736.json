{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    getOrdinalCache = new LRUHashMap<String, Integer>(4000);\n    getCategoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array it when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    getOrdinalCache = new LRUHashMap<String, Integer>(4000);\n    getCategoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array it when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    getOrdinalCache = new LRUHashMap<String, Integer>(4000);\n    getCategoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array it when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b","date":1317820981,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    getOrdinalCache = new LRUHashMap<String, Integer>(4000);\n    getCategoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array it when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}