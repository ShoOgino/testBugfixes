{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","commits":[{"id":"b8797939bd1cf734cbc53e28edebf729e9b75353","date":1444078481,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigDir(configDir, configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      List list = new List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(1, actualConfigSets.size()); // only the _default configset\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size() + 1, actualConfigSets.size());\n      assertTrue(actualConfigSets.containsAll(configSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(1, actualConfigSets.size()); // only the _default configset\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size() + 1, actualConfigSets.size());\n      assertTrue(actualConfigSets.containsAll(configSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(1, actualConfigSets.size()); // only the _default configset\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size() + 1, actualConfigSets.size());\n      assertTrue(actualConfigSets.containsAll(configSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(0, actualConfigSets.size());\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size(), actualConfigSets.size());\n      assertTrue(configSets.containsAll(actualConfigSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testList().mjava","sourceNew":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(1, actualConfigSets.size()); // only the _default configset\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        zkConfigManager.uploadConfigDir(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size() + 1, actualConfigSets.size());\n      assertTrue(actualConfigSets.containsAll(configSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testList() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      // test empty\n      ConfigSetAdminRequest.List list = new ConfigSetAdminRequest.List();\n      ConfigSetAdminResponse.List response = list.process(solrClient);\n      Collection<String> actualConfigSets = response.getConfigSets();\n      assertEquals(1, actualConfigSets.size()); // only the _default configset\n\n      // test multiple\n      Set<String> configSets = new HashSet<String>();\n      for (int i = 0; i < 5; ++i) {\n        String configSet = \"configSet\" + i;\n        solrCluster.uploadConfigSet(configset(\"configset-2\"), configSet);\n        configSets.add(configSet);\n      }\n      response = list.process(solrClient);\n      actualConfigSets = response.getConfigSets();\n      assertEquals(configSets.size() + 1, actualConfigSets.size());\n      assertTrue(actualConfigSets.containsAll(configSets));\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["28288370235ed02234a64753cdbf0c6ec096304a"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"197bbedf08450ade98a11f4a0001448059666bec":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["b8797939bd1cf734cbc53e28edebf729e9b75353"],"28288370235ed02234a64753cdbf0c6ec096304a":["917e62f3497c83634a13edd833e8e21dd6cc6496","197bbedf08450ade98a11f4a0001448059666bec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"b8797939bd1cf734cbc53e28edebf729e9b75353":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["3732e34f27916e98704736cc6924a34fffca249a","197bbedf08450ade98a11f4a0001448059666bec"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"3732e34f27916e98704736cc6924a34fffca249a":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"28288370235ed02234a64753cdbf0c6ec096304a":["c7612891097d4751617c396cdd7a092833799147"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"917e62f3497c83634a13edd833e8e21dd6cc6496":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a"],"b8797939bd1cf734cbc53e28edebf729e9b75353":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8797939bd1cf734cbc53e28edebf729e9b75353"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3732e34f27916e98704736cc6924a34fffca249a":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}