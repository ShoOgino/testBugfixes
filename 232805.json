{"path":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinderBase#handleVersionsWithRanges(List[Long],boolean).mjava","commits":[{"id":"ce70cdb9511a671e0e15d4dc93b8334c86b6e681","date":1542017422,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinderBase#handleVersionsWithRanges(List[Long],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinder#handleVersionsWithRanges(List[Long],boolean).mjava","sourceNew":"    MissedUpdatesRequest handleVersionsWithRanges(List<Long> otherVersions, boolean completeList) {\n      // we may endup asking for updates for too many versions, causing 2MB post payload limit. Construct a range of\n      // versions to request instead of asking individual versions\n      List<String> rangesToRequest = new ArrayList<>();\n\n      // construct ranges to request\n      // both ourUpdates and otherVersions are sorted with highest range first\n      // may be we can create another reverse the lists and avoid confusion\n      int ourUpdatesIndex = ourUpdates.size() - 1;\n      int otherUpdatesIndex = otherVersions.size() - 1;\n      long totalRequestedVersions = 0;\n\n      while (otherUpdatesIndex >= 0) {\n        // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n        if (ourUpdatesIndex < 0) {\n          String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n          rangesToRequest.add(range);\n          totalRequestedVersions += otherUpdatesIndex + 1;\n          break;\n        }\n\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n        if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n          ourUpdatesIndex--;\n          otherUpdatesIndex--;\n        } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n          ourUpdatesIndex--;\n        } else {\n          long rangeStart = otherVersions.get(otherUpdatesIndex);\n          while ((otherUpdatesIndex < otherVersions.size())\n              && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n            otherUpdatesIndex--;\n            totalRequestedVersions++;\n          }\n          // construct range here\n          rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n        }\n      }\n\n      String rangesToRequestStr = rangesToRequest.stream().collect(Collectors.joining(\",\"));\n      return MissedUpdatesRequest.of(rangesToRequestStr, totalRequestedVersions);\n    }\n\n","sourceOld":"    private MissedUpdatesRequest handleVersionsWithRanges(List<Long> otherVersions, boolean completeList) {\n      // we may endup asking for updates for too many versions, causing 2MB post payload limit. Construct a range of\n      // versions to request instead of asking individual versions\n      List<String> rangesToRequest = new ArrayList<>();\n\n      // construct ranges to request\n      // both ourUpdates and otherVersions are sorted with highest range first\n      // may be we can create another reverse the lists and avoid confusion\n      int ourUpdatesIndex = ourUpdates.size() - 1;\n      int otherUpdatesIndex = otherVersions.size() - 1;\n      long totalRequestedVersions = 0;\n\n      while (otherUpdatesIndex >= 0) {\n        // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n        if (ourUpdatesIndex < 0) {\n          String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n          rangesToRequest.add(range);\n          totalRequestedVersions += otherUpdatesIndex + 1;\n          break;\n        }\n\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n        if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n          ourUpdatesIndex--;\n          otherUpdatesIndex--;\n        } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n          ourUpdatesIndex--;\n        } else {\n          long rangeStart = otherVersions.get(otherUpdatesIndex);\n          while ((otherUpdatesIndex < otherVersions.size())\n              && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n            otherUpdatesIndex--;\n            totalRequestedVersions++;\n          }\n          // construct range here\n          rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n        }\n      }\n\n      String rangesToRequestStr = rangesToRequest.stream().collect(Collectors.joining(\",\"));\n      return MissedUpdatesRequest.of(rangesToRequestStr, totalRequestedVersions);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"124eb7fc888f8fb132c73822c4979d900326db10","date":1581446601,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinderBase#handleVersionsWithRanges(List[Long],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync.MissedUpdatesFinderBase#handleVersionsWithRanges(List[Long],boolean).mjava","sourceNew":"    MissedUpdatesRequest handleVersionsWithRanges(List<Long> otherVersions, boolean completeList) {\n      // we may endup asking for updates for too many versions, causing 2MB post payload limit. Construct a range of\n      // versions to request instead of asking individual versions\n      List<String> rangesToRequest = new ArrayList<>();\n\n      // construct ranges to request\n      // both ourUpdates and otherVersions are sorted with highest range first\n      // may be we can create another reverse the lists and avoid confusion\n      int ourUpdatesIndex = ourUpdates.size() - 1;\n      int otherUpdatesIndex = otherVersions.size() - 1;\n      long totalRequestedVersions = 0;\n\n      while (otherUpdatesIndex >= 0) {\n        // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n        if (ourUpdatesIndex < 0) {\n          String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n          rangesToRequest.add(range);\n          totalRequestedVersions += otherUpdatesIndex + 1;\n          break;\n        }\n\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n        if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n          ourUpdatesIndex--;\n          otherUpdatesIndex--;\n        } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n          ourUpdatesIndex--;\n        } else {\n          long rangeStart = otherVersions.get(otherUpdatesIndex);\n          while (otherUpdatesIndex >= 0\n              && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n            otherUpdatesIndex--;\n            totalRequestedVersions++;\n          }\n          // construct range here\n          rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n        }\n      }\n\n      String rangesToRequestStr = rangesToRequest.stream().collect(Collectors.joining(\",\"));\n      return MissedUpdatesRequest.of(rangesToRequestStr, totalRequestedVersions);\n    }\n\n","sourceOld":"    MissedUpdatesRequest handleVersionsWithRanges(List<Long> otherVersions, boolean completeList) {\n      // we may endup asking for updates for too many versions, causing 2MB post payload limit. Construct a range of\n      // versions to request instead of asking individual versions\n      List<String> rangesToRequest = new ArrayList<>();\n\n      // construct ranges to request\n      // both ourUpdates and otherVersions are sorted with highest range first\n      // may be we can create another reverse the lists and avoid confusion\n      int ourUpdatesIndex = ourUpdates.size() - 1;\n      int otherUpdatesIndex = otherVersions.size() - 1;\n      long totalRequestedVersions = 0;\n\n      while (otherUpdatesIndex >= 0) {\n        // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n        if (ourUpdatesIndex < 0) {\n          String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n          rangesToRequest.add(range);\n          totalRequestedVersions += otherUpdatesIndex + 1;\n          break;\n        }\n\n        // stop when the entries get old enough that reorders may lead us to see updates we don't need\n        if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n        if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n          ourUpdatesIndex--;\n          otherUpdatesIndex--;\n        } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n          ourUpdatesIndex--;\n        } else {\n          long rangeStart = otherVersions.get(otherUpdatesIndex);\n          while ((otherUpdatesIndex < otherVersions.size())\n              && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n            otherUpdatesIndex--;\n            totalRequestedVersions++;\n          }\n          // construct range here\n          rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n        }\n      }\n\n      String rangesToRequestStr = rangesToRequest.stream().collect(Collectors.joining(\",\"));\n      return MissedUpdatesRequest.of(rangesToRequestStr, totalRequestedVersions);\n    }\n\n","bugFix":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"124eb7fc888f8fb132c73822c4979d900326db10":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["124eb7fc888f8fb132c73822c4979d900326db10"]},"commit2Childs":{"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["124eb7fc888f8fb132c73822c4979d900326db10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"124eb7fc888f8fb132c73822c4979d900326db10":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}