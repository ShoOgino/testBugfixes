{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesBoxQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              if (lat < minLatitude || lat > maxLatitude) {\n                // not within latitude range\n                continue;\n              }\n\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (crossesDateline) {\n                if (lon > maxLongitude && lon < minLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              } else {\n                if (lon < minLongitude || lon > maxLongitude) {\n                  // not within longitude range\n                  continue;\n                }\n              }\n\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 5; // 5 comparisons\n          }\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}