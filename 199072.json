{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = 200 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.optimize();\n\n    // Test optimized single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicIndexReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicIndexReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      checkTermsOrder(subs[i], allTerms, false);\n    }\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testTermUTF16SortOrder().mjava","sourceNew":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure terms, including ones with surrogate pairs,\n  // sort in codepoint sort order by default\n  public void testTermUTF16SortOrder() throws Throwable {\n    Random rnd = random;\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);\n    Document d = new Document();\n    // Single segment\n    Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n    d.add(f);\n    char[] chars = new char[2];\n    final Set<String> allTerms = new HashSet<String>();\n\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n\n      final String s;\n      if (rnd.nextBoolean()) {\n        // Single char\n        if (rnd.nextBoolean()) {\n          // Above surrogates\n          chars[0] = (char) getInt(rnd, 1+UnicodeUtil.UNI_SUR_LOW_END, 0xffff);\n        } else {\n          // Below surrogates\n          chars[0] = (char) getInt(rnd, 0, UnicodeUtil.UNI_SUR_HIGH_START-1);\n        }\n        s = new String(chars, 0, 1);\n      } else {\n        // Surrogate pair\n        chars[0] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_HIGH_START, UnicodeUtil.UNI_SUR_HIGH_END);\n        assertTrue(((int) chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int) chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);\n        chars[1] = (char) getInt(rnd, UnicodeUtil.UNI_SUR_LOW_START, UnicodeUtil.UNI_SUR_LOW_END);\n        s = new String(chars, 0, 2);\n      }\n      allTerms.add(s);\n      f.setValue(s);\n\n      writer.addDocument(d);\n\n      if ((1+i) % 42 == 0) {\n        writer.commit();\n      }\n    }\n\n    IndexReader r = writer.getReader();\n\n    // Test each sub-segment\n    new ReaderUtil.Gather(r) {\n      @Override\n      protected void add(int base, AtomicReader r) throws IOException {\n        checkTermsOrder(r, allTerms, false);\n      }\n    }.run();\n    checkTermsOrder(r, allTerms, true);\n\n    // Test multi segment\n    r.close();\n\n    writer.forceMerge(1);\n\n    // Test single segment\n    r = writer.getReader();\n    checkTermsOrder(r, allTerms, true);\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f83af14a2a8131b14d7aee6274c740334e0363d3"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}