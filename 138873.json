{"path":"src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","commits":[{"id":"fff70665707c52d4bd194cf5e84600e690c3e48d","date":1183443317,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public Fragmenter getFragmenter(String fieldName, SolrParams params )\n  { \n    numRequests++;\n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n    \n    int fragsize  = params.getFieldInt(   fieldName, HighlightParams.FRAGSIZE,  LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE );\n    int increment = params.getFieldInt(   fieldName, HighlightParams.INCREMENT, LuceneRegexFragmenter.DEFAULT_INCREMENT_GAP );\n    float slop    = params.getFieldFloat( fieldName, HighlightParams.SLOP,      LuceneRegexFragmenter.DEFAULT_SLOP );\n    int maxchars  = params.getFieldInt(   fieldName, HighlightParams.MAX_CHARS, LuceneRegexFragmenter.DEFAULT_MAX_ANALYZED_CHARS );\n    \n    if( fragsize <= 0 ) {\n      return new NullFragmenter();\n    }\n    \n    return new LuceneRegexFragmenter( fragsize, increment, slop, maxchars );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94251da2db5138d2a83776d362239f1fffc18786","date":1184909663,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","sourceNew":"  public Fragmenter getFragmenter(String fieldName, SolrParams params )\n  { \n    numRequests++;        \n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n    int fragsize  = params.getFieldInt(   fieldName, HighlightParams.FRAGSIZE,  LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE );\n    int increment = params.getFieldInt(   fieldName, HighlightParams.INCREMENT, LuceneRegexFragmenter.DEFAULT_INCREMENT_GAP );\n    float slop    = params.getFieldFloat( fieldName, HighlightParams.SLOP,      LuceneRegexFragmenter.DEFAULT_SLOP );\n    int maxchars  = params.getFieldInt(   fieldName, HighlightParams.MAX_RE_CHARS, LuceneRegexFragmenter.DEFAULT_MAX_ANALYZED_CHARS );\n    String rawpat = params.getFieldParam( fieldName, HighlightParams.PATTERN,   LuceneRegexFragmenter.DEFAULT_PATTERN_RAW );\n\n    Pattern p = rawpat == defaultPatternRaw ? defaultPattern : Pattern.compile(rawpat);\n\n    if( fragsize <= 0 ) {\n      return new NullFragmenter();\n    }\n    \n    return new LuceneRegexFragmenter( fragsize, increment, slop, maxchars, p );\n  }\n\n","sourceOld":"  public Fragmenter getFragmenter(String fieldName, SolrParams params )\n  { \n    numRequests++;\n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n    \n    int fragsize  = params.getFieldInt(   fieldName, HighlightParams.FRAGSIZE,  LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE );\n    int increment = params.getFieldInt(   fieldName, HighlightParams.INCREMENT, LuceneRegexFragmenter.DEFAULT_INCREMENT_GAP );\n    float slop    = params.getFieldFloat( fieldName, HighlightParams.SLOP,      LuceneRegexFragmenter.DEFAULT_SLOP );\n    int maxchars  = params.getFieldInt(   fieldName, HighlightParams.MAX_CHARS, LuceneRegexFragmenter.DEFAULT_MAX_ANALYZED_CHARS );\n    \n    if( fragsize <= 0 ) {\n      return new NullFragmenter();\n    }\n    \n    return new LuceneRegexFragmenter( fragsize, increment, slop, maxchars );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/highlight/RegexFragmenter#getFragmenter(String,SolrParams).mjava","sourceNew":"  public Fragmenter getFragmenter(String fieldName, SolrParams params )\n  { \n    numRequests++;        \n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n    int fragsize  = params.getFieldInt(   fieldName, HighlightParams.FRAGSIZE,  LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE );\n    int increment = params.getFieldInt(   fieldName, HighlightParams.INCREMENT, LuceneRegexFragmenter.DEFAULT_INCREMENT_GAP );\n    float slop    = params.getFieldFloat( fieldName, HighlightParams.SLOP,      LuceneRegexFragmenter.DEFAULT_SLOP );\n    int maxchars  = params.getFieldInt(   fieldName, HighlightParams.MAX_RE_CHARS, LuceneRegexFragmenter.DEFAULT_MAX_ANALYZED_CHARS );\n    String rawpat = params.getFieldParam( fieldName, HighlightParams.PATTERN,   LuceneRegexFragmenter.DEFAULT_PATTERN_RAW );\n\n    Pattern p = rawpat == defaultPatternRaw ? defaultPattern : Pattern.compile(rawpat);\n\n    if( fragsize <= 0 ) {\n      return new NullFragmenter();\n    }\n    \n    return new LuceneRegexFragmenter( fragsize, increment, slop, maxchars, p );\n  }\n\n","sourceOld":"  public Fragmenter getFragmenter(String fieldName, SolrParams params )\n  { \n    numRequests++;        \n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n    int fragsize  = params.getFieldInt(   fieldName, HighlightParams.FRAGSIZE,  LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE );\n    int increment = params.getFieldInt(   fieldName, HighlightParams.INCREMENT, LuceneRegexFragmenter.DEFAULT_INCREMENT_GAP );\n    float slop    = params.getFieldFloat( fieldName, HighlightParams.SLOP,      LuceneRegexFragmenter.DEFAULT_SLOP );\n    int maxchars  = params.getFieldInt(   fieldName, HighlightParams.MAX_RE_CHARS, LuceneRegexFragmenter.DEFAULT_MAX_ANALYZED_CHARS );\n    String rawpat = params.getFieldParam( fieldName, HighlightParams.PATTERN,   LuceneRegexFragmenter.DEFAULT_PATTERN_RAW );\n\n    Pattern p = rawpat == defaultPatternRaw ? defaultPattern : Pattern.compile(rawpat);\n\n    if( fragsize <= 0 ) {\n      return new NullFragmenter();\n    }\n    \n    return new LuceneRegexFragmenter( fragsize, increment, slop, maxchars, p );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fff70665707c52d4bd194cf5e84600e690c3e48d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"94251da2db5138d2a83776d362239f1fffc18786":["fff70665707c52d4bd194cf5e84600e690c3e48d"],"ad94625fb8d088209f46650c8097196fec67f00c":["94251da2db5138d2a83776d362239f1fffc18786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fff70665707c52d4bd194cf5e84600e690c3e48d":["94251da2db5138d2a83776d362239f1fffc18786"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fff70665707c52d4bd194cf5e84600e690c3e48d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94251da2db5138d2a83776d362239f1fffc18786":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}