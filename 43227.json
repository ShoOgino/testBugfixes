{"path":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newField(this.field, content, TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(10).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      LeafReader reader = getOnlyLeafReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new ByteBuffersDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      LeafReader reader = getOnlyLeafReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        final Analyzer analyzer = new Analyzer() {\n          @Override\n          public TokenStreamComponents createComponents(String fieldName) {\n            return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, true));\n          }\n        };\n        Directory directory = new SeekCountingDirectory(new RAMDirectory());\n        // note: test explicitly disables payloads\n        IndexWriter writer = new IndexWriter(\n            directory,\n            newIndexWriterConfig(analyzer)\n              .setMaxBufferedDocs(10)\n              .setMergePolicy(newLogMergePolicy(false))\n        );\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(newTextField(this.field, content, Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.forceMerge(1);\n        writer.close();\n\n      LeafReader reader = getOnlyLeafReader(DirectoryReader.open(directory));\n\n      this.searcher = newSearcher(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d77dafd89756a5161d244985903e3487ca109182":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d77dafd89756a5161d244985903e3487ca109182"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}