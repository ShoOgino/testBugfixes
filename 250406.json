{"path":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","commits":[{"id":"1b85485ed18e996d4e2490e5bc158e59c12acb75","date":1476232226,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCustomStream#testDynamicLoadingCustomStream().mjava","sourceNew":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoadingCustomStream() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    String payload = \"{\\n\" +\n        \"'create-expressible' : { 'name' : 'hello', 'class': 'org.apache.solr.core.HelloStream' }\\n\" +\n        \"}\";\n\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"expressible\", \"hello\", \"class\"),\n        \"org.apache.solr.core.HelloStream\",10);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/stream?expr=hello()\",\n        null,\n        Arrays.asList(\"result-set\", \"docs[0]\", \"msg\"),\n        \"Hello World!\",10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["1b85485ed18e996d4e2490e5bc158e59c12acb75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["1b85485ed18e996d4e2490e5bc158e59c12acb75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"1b85485ed18e996d4e2490e5bc158e59c12acb75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b85485ed18e996d4e2490e5bc158e59c12acb75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0853c291617e0f9d0474b720bf609eb350e9225c"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["1b85485ed18e996d4e2490e5bc158e59c12acb75"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b85485ed18e996d4e2490e5bc158e59c12acb75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"1b85485ed18e996d4e2490e5bc158e59c12acb75":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}