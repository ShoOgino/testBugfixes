{"path":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamFiltered().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamFiltered().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamFiltered().mjava","sourceNew":"  public void testDirectoryStreamFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","sourceOld":"  public void testDirectoryStreamFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0570a6b8fbda74e4718ba36c70fd1953103a3dcb","date":1429616032,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamFiltered().mjava","sourceNew":null,"sourceOld":"  public void testDirectoryStreamFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"file1\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped)) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        if (!path.getFileName().toString().startsWith(\"extra\")) {\n          count++;\n        }\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"]},"commit2Childs":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}