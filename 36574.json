{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","commits":[{"id":"00aca69329b84bc12b5a402a8745f8e4db7b7d40","date":1506911750,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(dataProviderWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(dataProviderWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(dataProviderWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(dataProviderWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getOperation();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n\n    String dataproviderdata = \"{\" +\n        \"     liveNodes:[\" +\n        \"       '127.0.0.1:51078_solr',\" +\n        \"       '127.0.0.1:51147_solr'],\" +\n        \"     replicaInfo:{\" +\n        \"       '127.0.0.1:51147_solr':{},\" +\n        \"       '127.0.0.1:51078_solr':{testNodeAdded:{shard1:[\" +\n        \"             { core_node3 : { type : NRT}},\" +\n        \"             { core_node4 : { type : NRT}}]}}},\" +\n        \"     nodeValues:{\" +\n        \"       '127.0.0.1:51147_solr':{\" +\n        \"         node:'127.0.0.1:51147_solr',\" +\n        \"         cores:0,\" +\n        \"         freedisk : 880.5428657531738},\" +\n        \"       '127.0.0.1:51078_solr':{\" +\n        \"         node:'127.0.0.1:51078_solr',\" +\n        \"         cores:2,\" +\n        \"         freedisk:880.5428695678711}}}\";\n\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData(dataproviderdata));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"{}\", op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"\" + op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"{}\", op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","sourceOld":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"{}\", op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testComputePlanAfterNodeAdded().mjava","sourceNew":null,"sourceOld":"  public void testComputePlanAfterNodeAdded() {\n    String autoScalingjson = \"cluster-preferences:[\" +\n        \"       {minimize : cores},\" +\n        \"       {'maximize':freedisk , precision:100}],    \" +\n        \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n        \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n        \"       { nodeRole:overseer,replica:0}]}\";\n    if(useNodeset){\n      autoScalingjson = \"cluster-preferences:[\" +\n          \"       {minimize : cores},\" +\n          \"       {'maximize':freedisk , precision:100}],    \" +\n          \" cluster-policy:[{cores:'<10',node:'#ANY'},\" +\n          \"       {replica:'<2', shard:'#EACH',node:'#ANY'},\" +\n          \"       {nodeset:{ nodeRole:overseer},replica:0}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(cloudManagerWithData((Map) loadFromResource(\"testComputePlanAfterNodeAdded.json\")));\n    Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:51147_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    log.info(\"{}\", op);\n    assertNotNull(\"operation expected \", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["f5a27e78e3d29dee02bab19ded25336471e96882","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["f5a27e78e3d29dee02bab19ded25336471e96882"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"f5a27e78e3d29dee02bab19ded25336471e96882":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["9ba1b632c041956c93c41aa1143d16a567014891"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["f5a27e78e3d29dee02bab19ded25336471e96882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","00aca69329b84bc12b5a402a8745f8e4db7b7d40","560c18d71dad43d675158783c3840f8c80d6d39c"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["6dc613ed6f75d1988140301ee8de8fdb056fa337","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}