{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getFieldName(String,int,int).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = config.solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = config.solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}