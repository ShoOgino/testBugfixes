{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","commits":[{"id":"042c474f8983c7bfede807d97ad9faf73ff694cc","date":1355859039,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  /* Returns a non-null string if replicas within the same shard are not consistent.\n   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* Returns a non-null string if replicas within the same shard are not consistent.\n   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /** \n   * Returns a non-null string if replicas within the same shard do not have a \n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since \n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is \n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  /* Returns a non-null string if replicas within the same shard are not consistent.\n   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /** \n   * Returns a non-null string if replicas within the same shard do not have a \n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since \n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is \n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  /* Returns a non-null string if replicas within the same shard are not consistent.\n   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4339eef0c1b12030c8590187e652cd1cd0a1f3cb","date":1397833225,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /** \n   * Returns a non-null string if replicas within the same shard do not have a \n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since \n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is \n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  /** \n   * Returns a non-null string if replicas within the same shard do not have a \n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since \n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is \n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /** \n   * Returns a non-null string if replicas within the same shard do not have a \n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since \n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is \n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ab9bc07487eb7b963951b477a8f25f04323dd44","date":1443026577,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrException | SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","sourceOld":"  /**\n   * Returns a non-null string if replicas within the same shard do not have a\n   * consistent number of documents.\n   * If expectFailure==false, the exact differences found will be logged since\n   * this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is\n   * consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","042c474f8983c7bfede807d97ad9faf73ff694cc"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["042c474f8983c7bfede807d97ad9faf73ff694cc"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["042c474f8983c7bfede807d97ad9faf73ff694cc","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"abb23fcc2461782ab204e61213240feb77d355aa":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"344b0840364d990b29b97467bfcc766ff8325d11":["5ab9bc07487eb7b963951b477a8f25f04323dd44"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"5ab9bc07487eb7b963951b477a8f25f04323dd44":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["abb23fcc2461782ab204e61213240feb77d355aa"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["5ab9bc07487eb7b963951b477a8f25f04323dd44","344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["344b0840364d990b29b97467bfcc766ff8325d11"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","add1e7dd742ea533ff4318cea83ca0a1f669f662"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["abb23fcc2461782ab204e61213240feb77d355aa"],"5ab9bc07487eb7b963951b477a8f25f04323dd44":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["5ab9bc07487eb7b963951b477a8f25f04323dd44"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","042c474f8983c7bfede807d97ad9faf73ff694cc"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}