{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"000dcc6e56226b0a3c43074087b6f84860ff780e","date":1457655644,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(Assign.buildCoreName(collectionName, \"shard\" + (i/2+1), Replica.Type.NRT, (i%2+1)));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a new collection.\n    collectionName = \"solrj_test2\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (String coreName : coresStatus.keySet()) {\n      NamedList<Integer> status = coresStatus.get(coreName);\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(4, nodesStatus.size());\n\n    waitForState(\"Expected \" + collectionName + \" to disappear from cluster state\", collectionName, (n, c) -> c == null);\n\n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n\n    response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setStateFormat(2)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected \" + collectionName + \" to appear in cluster state\", collectionName, (n, c) -> c != null);\n\n  }\n\n","bugFix":["636a04bc82e662bf141a55f1d10f52e1c76c727b","cd01cddc46c498fba02505e77f225300f83242db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"000dcc6e56226b0a3c43074087b6f84860ff780e":["922ddd897402a6df25c766ea8300443be5e82b3d"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a52341299179de5479672f7cf518bf4b173f34b3"],"61c45e99cf6676da48f19d7511c73712ad39402b":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["000dcc6e56226b0a3c43074087b6f84860ff780e","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","61c45e99cf6676da48f19d7511c73712ad39402b"],"a52341299179de5479672f7cf518bf4b173f34b3":["61c45e99cf6676da48f19d7511c73712ad39402b","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["000dcc6e56226b0a3c43074087b6f84860ff780e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"000dcc6e56226b0a3c43074087b6f84860ff780e":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"922ddd897402a6df25c766ea8300443be5e82b3d":["000dcc6e56226b0a3c43074087b6f84860ff780e"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["61c45e99cf6676da48f19d7511c73712ad39402b","f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}