{"path":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","commits":[{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"),\"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"),\"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"),\"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a75028b56df82c87510ec21c236855cc806a39a1","date":1229226462,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"),\"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"),\"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"),\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a34495372f0709e1ee7051e94886274dc993443","date":1234022561,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n           \"ext.literal.id\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.id\", \"two\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"three\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b","date":1237658128,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n           \"ext.literal.id\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.id\", \"two\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"three\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n           \"ext.literal.id\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.id\", \"two\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"three\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eecdad1988b0b00f74f945528b689ef1eebf763d","date":1247586785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"map.content\", \"extractedContent\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"map.content_language\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"map.content_language\", \"abcxyz\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"map.content\", \"extractedContent\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n           \"ext.literal.id\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"simple.html\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.id\", \"two\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"three\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0927e52175db732e26e505528d889054103c4da7","date":1248720538,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"map.content\", \"extractedContent\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"map.a\",\"t_href\",\n      \"map.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"map.content\", \"extractedContent\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"map.content\", \"extractedContent\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"map.content_language\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"map.content_language\", \"abcxyz\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"map.content\", \"extractedContent\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c156fce3696e4675bc1974f81364deb8b87858e1","date":1253114156,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"map.content\", \"extractedContent\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"map.a\",\"t_href\",\n      \"map.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"map.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"map.content\", \"extractedContent\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b":["3a34495372f0709e1ee7051e94886274dc993443"],"a75028b56df82c87510ec21c236855cc806a39a1":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["251bde4a7736baddeb8c8f17b50f2c8076c8ac4b"],"3a34495372f0709e1ee7051e94886274dc993443":["a75028b56df82c87510ec21c236855cc806a39a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["c156fce3696e4675bc1974f81364deb8b87858e1"],"c156fce3696e4675bc1974f81364deb8b87858e1":["0927e52175db732e26e505528d889054103c4da7"],"0927e52175db732e26e505528d889054103c4da7":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"a75028b56df82c87510ec21c236855cc806a39a1":["3a34495372f0709e1ee7051e94886274dc993443"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["0927e52175db732e26e505528d889054103c4da7"],"3a34495372f0709e1ee7051e94886274dc993443":["251bde4a7736baddeb8c8f17b50f2c8076c8ac4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["a75028b56df82c87510ec21c236855cc806a39a1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c156fce3696e4675bc1974f81364deb8b87858e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"0927e52175db732e26e505528d889054103c4da7":["c156fce3696e4675bc1974f81364deb8b87858e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}