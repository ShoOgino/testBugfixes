{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","commits":[{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d","date":1304363395,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else if (wrappedTermState != null) {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      } else {\n        wrappedTermState = (BlockTermState) other.wrappedTermState.clone();\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","bugFix":["3d53c3f769ca0f9e7434937b792877770271aecf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else if (wrappedTermState != null) {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      } else {\n        wrappedTermState = (BlockTermState) other.wrappedTermState.clone();\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else if (wrappedTermState != null) {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      } else {\n        wrappedTermState = (BlockTermState) other.wrappedTermState.clone();\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader.PulsingTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.PulsingTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      PulsingTermState other = (PulsingTermState) _other;\n      postingsSize = other.postingsSize;\n      if (other.postingsSize != -1) {\n        if (postings == null || postings.length < other.postingsSize) {\n          postings = new byte[ArrayUtil.oversize(other.postingsSize, 1)];\n        }\n        System.arraycopy(other.postings, 0, postings, 0, other.postingsSize);\n      } else if (wrappedTermState != null) {\n        wrappedTermState.copyFrom(other.wrappedTermState);\n      } else {\n        wrappedTermState = (BlockTermState) other.wrappedTermState.clone();\n      }\n\n      // NOTE: we do not copy the\n      // inlinedBytes/inlinedBytesReader; these are only\n      // stored on the \"primary\" TermState.  They are\n      // \"transient\" to cloned term states.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b1add9ddc0005b07550d4350720aac22dc9886b3","2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["3d53c3f769ca0f9e7434937b792877770271aecf"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d53c3f769ca0f9e7434937b792877770271aecf"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3d53c3f769ca0f9e7434937b792877770271aecf":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"2c6ba2c1541cd77ab3e8e8e242abf602d1f4943d":["60ba444201d2570214b6fcf1d15600dc1a01f548","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}