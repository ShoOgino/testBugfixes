{"path":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7724982540101e7fe429e8eb67b97f3dcac862","date":1316184142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":["00da8b51bdeae168a5b26ec506db372b219ca7a2","4e8cc373c801e54cec75daf9f52792cb4b17f536","d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = core.getResourceLoader().newInstance(strDistanceName, StringDistance.class);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d042843368f0d289e28164525546259d89d6dbb6","date":1512577756,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = core.getResourceLoader().newInstance(strDistanceName, StringDistance.class);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevenshteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = core.getResourceLoader().newInstance(strDistanceName, StringDistance.class);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","bugFix":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public String init(@SuppressWarnings({\"rawtypes\"})NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = core.getResourceLoader().newInstance(strDistanceName, StringDistance.class);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevenshteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = core.getResourceLoader().newInstance(strDistanceName, StringDistance.class);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevenshteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["d042843368f0d289e28164525546259d89d6dbb6"],"d042843368f0d289e28164525546259d89d6dbb6":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["d042843368f0d289e28164525546259d89d6dbb6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"d042843368f0d289e28164525546259d89d6dbb6":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}