{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","commits":[{"id":"f4cdb4d252303817a657f62a39d7a8ca669abc2a","date":1394456576,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForwardCompat() {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_backcompat.bin\");\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(currentFormatBytes[i], newFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0146597a1c108e2e637e97237e4619e0e5ba2aef","date":1394471404,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","sourceNew":"  @Test\n  public void testForwardCompat() {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(currentFormatBytes[i], newFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testForwardCompat() {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_backcompat.bin\");\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(currentFormatBytes[i], newFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForwardCompat() {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(currentFormatBytes[i], newFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","sourceNew":"  @Test\n  public void testForwardCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testForwardCompat() {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(currentFormatBytes[i], newFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","sourceNew":"  @Test\n  public void testForwardCompat() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(); ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n\n      Object data = generateAllDataTypes();\n      try {\n        javabin.marshal(data, os);\n        byte[] newFormatBytes = os.toByteArray();\n\n        InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n        byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n        for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n          assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n        }\n\n      } catch (IOException e) {\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwardCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","sourceNew":"  @Test\n  public void testForwardCompat() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(); ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n\n      Object data = generateAllDataTypes();\n      try {\n        javabin.marshal(data, os);\n        byte[] newFormatBytes = os.toByteArray();\n\n        InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n        byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n        for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n          assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n        }\n\n      } catch (IOException e) {\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwardCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testForwardCompat().mjava","sourceNew":"  @Test\n  public void testForwardCompat() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(); ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n\n      Object data = generateAllDataTypes();\n      try {\n        javabin.marshal(data, os);\n        byte[] newFormatBytes = os.toByteArray();\n\n        InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n        byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n        for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n          assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n        }\n\n      } catch (IOException e) {\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwardCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    Object data = generateAllDataTypes();\n    try {\n      javabin.marshal(data, os);\n      byte[] newFormatBytes = os.toByteArray();\n\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      byte[] currentFormatBytes = IOUtils.toByteArray(is);\n\n      for (int i = 1; i < currentFormatBytes.length; i++) {//ignore the first byte. It is version information\n        assertEquals(newFormatBytes[i], currentFormatBytes[i]);\n      }\n\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0146597a1c108e2e637e97237e4619e0e5ba2aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["f4cdb4d252303817a657f62a39d7a8ca669abc2a"],"28288370235ed02234a64753cdbf0c6ec096304a":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4cdb4d252303817a657f62a39d7a8ca669abc2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","f4cdb4d252303817a657f62a39d7a8ca669abc2a"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"f4cdb4d252303817a657f62a39d7a8ca669abc2a":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}