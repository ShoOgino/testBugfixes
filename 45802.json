{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(CategoryPath categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      PostingsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.postings(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      PostingsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          // TODO: share per-segment TermsEnum here!\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.postings(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      TermsEnum termsEnum = null; // reuse\n      PostingsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.postings(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(FacetLabel).mjava","sourceNew":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      PostingsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          // TODO: share per-segment TermsEnum here!\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.postings(docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given category in the cache and/or the on-disk storage,\n   * returning the category's ordinal, or a negative number in case the\n   * category does not yet exist in the taxonomy.\n   */\n  protected synchronized int findCategory(FacetLabel categoryPath) throws IOException {\n    // If we can find the category in the cache, or we know the cache is\n    // complete, we can return the response directly from it\n    int res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    cacheMisses.incrementAndGet();\n    // After a few cache misses, it makes sense to read all the categories\n    // from disk and into the cache. The reason not to do this on the first\n    // cache miss (or even when opening the writer) is that it will\n    // significantly slow down the case when a taxonomy is opened just to\n    // add one category. The idea only spending a long time on reading\n    // after enough time was spent on cache misses is known as an \"online\n    // algorithm\".\n    perhapsFillCache();\n    res = cache.get(categoryPath);\n    if (res >= 0 || cacheIsComplete) {\n      // if after filling the cache from the info on disk, the category is in it\n      // or the cache is complete, return whatever cache.get returned.\n      return res;\n    }\n\n    // if we get here, it means the category is not in the cache, and it is not\n    // complete, and therefore we must look for the category on disk.\n    \n    // We need to get an answer from the on-disk index.\n    initReaderManager();\n\n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n      PostingsEnum docs = null; // reuse\n      for (LeafReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          // TODO: share per-segment TermsEnum here!\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(catTerm)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.postings(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    if (doc > 0) {\n      addToCache(categoryPath, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe9946d3cd818d329255e4c325597ac3480503e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}