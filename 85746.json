{"path":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":null,"sourceOld":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7860a000f6ff325b15e9fa1a51a2ff975ec3433","date":1269564839,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d7860a000f6ff325b15e9fa1a51a2ff975ec3433"],"c26f00b574427b55127e869b935845554afde1fa":["d7860a000f6ff325b15e9fa1a51a2ff975ec3433","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d7860a000f6ff325b15e9fa1a51a2ff975ec3433"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d7860a000f6ff325b15e9fa1a51a2ff975ec3433":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d7860a000f6ff325b15e9fa1a51a2ff975ec3433"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d7860a000f6ff325b15e9fa1a51a2ff975ec3433":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}