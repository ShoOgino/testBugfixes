{"path":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","commits":[{"id":"e176989d7a276039fff52855ee93de9370e40ad5","date":1181182622,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r);\n    assertTrue(\"firsttime skipTo found no match\", ds.skipTo(3));\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.doc()).get(\"id\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","sourceNew":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r);\n    assertTrue(\"firsttime skipTo found no match\", ds.skipTo(3));\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.doc()).get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","sourceNew":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final QueryWeight dw = dq.queryWeight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","sourceNew":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final QueryWeight dw = dq.queryWeight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeHit().mjava","sourceNew":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeHit() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"dek\",\"albino\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    assertTrue(\"firsttime skipTo found no match\", ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"found wrong docid\", \"d4\", r.document(ds.docID()).get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["e176989d7a276039fff52855ee93de9370e40ad5"],"e176989d7a276039fff52855ee93de9370e40ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"e176989d7a276039fff52855ee93de9370e40ad5":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e176989d7a276039fff52855ee93de9370e40ad5"],"fe941135bdfc28c81e20b4d21422f8726af34925":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}