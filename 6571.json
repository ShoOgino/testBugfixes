{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"/dev/null","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void xxxtestSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void xxxtestSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex1().mjava","sourceNew":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing last byte of\n    // latest segments file and make sure we get an\n    // IOException trying to open the index:\n    public void testSimulatedCorruptIndex1() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n        dir.deleteFile(fileNameIn);\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}