{"path":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","sourceNew":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itsself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","sourceOld":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itsself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86bebfb26e60bc1320d15779cb22b9e9dd53d163","date":1345932716,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","sourceNew":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","sourceOld":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itsself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocIdSet#bits().mjava","sourceNew":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","sourceOld":"  /** Optionally provides a {@link Bits} interface for random access\n   * to matching documents.\n   * @return {@code null}, if this {@code DocIdSet} does not support random access.\n   * In contrast to {@link #iterator()}, a return value of {@code null}\n   * <b>does not</b> imply that no documents match the filter!\n   * The default implementation does not provide random access, so you\n   * only need to implement this method if your DocIdSet can\n   * guarantee random access to every docid in O(1) time without\n   * external disk access (as {@link Bits} interface cannot throw\n   * {@link IOException}). This is generally true for bit sets\n   * like {@link org.apache.lucene.util.FixedBitSet}, which return\n   * itsself if they are used as {@code DocIdSet}.\n   */\n  public Bits bits() throws IOException {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86bebfb26e60bc1320d15779cb22b9e9dd53d163":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86bebfb26e60bc1320d15779cb22b9e9dd53d163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86bebfb26e60bc1320d15779cb22b9e9dd53d163"]},"commit2Childs":{"86bebfb26e60bc1320d15779cb22b9e9dd53d163":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["86bebfb26e60bc1320d15779cb22b9e9dd53d163","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}