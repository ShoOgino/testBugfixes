{"path":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}