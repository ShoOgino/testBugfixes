{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,boolean).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":5,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,boolean).mjava","sourceNew":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["21b526e3e9974b2651365fbae52a976e6fc77aa4"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}