{"path":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","commits":[{"id":"10d2f7af0975ac83900a2c970a62fe4c8667176b","date":1282358169,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    int a = value;\n    int b = ((MutableValueInt)other).value;\n    return (int)((((long)a) - ((long)b)) >> 32);  // any shift >= 32 should do.\n\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","date":1290540872,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    int c = (int)((((long)ai) - ((long)bi)) >> 32);  // any shift >= 32 should do.\n    if (c!=0) return c;\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    int a = value;\n    int b = ((MutableValueInt)other).value;\n    return (int)((((long)a) - ((long)b)) >> 32);  // any shift >= 32 should do.\n\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    int c = (int)((((long)ai) - ((long)bi)) >> 32);  // any shift >= 32 should do.\n    if (c!=0) return c;\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    int a = value;\n    int b = ((MutableValueInt)other).value;\n    return (int)((((long)a) - ((long)b)) >> 32);  // any shift >= 32 should do.\n\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"321ec400cd4312dd04f74f4db0f79c306e0745ae","date":1291654756,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    int c = (int)((((long)ai) - ((long)bi)) >> 32);  // any shift >= 32 should do.\n    if (c!=0) return c;\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8c4bb144102e537495ae5b321f77a9898f7b0b8","date":1291834816,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    int c = (int)((((long)ai) - ((long)bi)) >> 32);  // any shift >= 32 should do.\n    if (c!=0) return c;\n    /* is there any pattern that the compiler would recognize as a single native CMP instruction? */\n    /***\n    if (a<b) return -1;\n    else if (a>b) return 1;\n    else return 0;\n    ***/\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb91354817d84c64c9efe7c32abc6ae2e855edbf","date":1308960215,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/common/src/java/org/apache/lucene/common/mutable/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/common/src/java/org/apache/lucene/common/mutable/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/mutable/MutableValueInt#compareSameType(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValueInt#compareSameType(Object).mjava","sourceNew":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","sourceOld":"  @Override\n  public int compareSameType(Object other) {\n    MutableValueInt b = (MutableValueInt)other;\n    int ai = value;\n    int bi = b.value;\n    if (ai<bi) return -1;\n    else if (ai>bi) return 1;\n\n    if (exists == b.exists) return 0;\n    return exists ? 1 : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10d2f7af0975ac83900a2c970a62fe4c8667176b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb91354817d84c64c9efe7c32abc6ae2e855edbf":["321ec400cd4312dd04f74f4db0f79c306e0745ae"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["321ec400cd4312dd04f74f4db0f79c306e0745ae","eb91354817d84c64c9efe7c32abc6ae2e855edbf"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","321ec400cd4312dd04f74f4db0f79c306e0745ae"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":["3bb13258feba31ab676502787ab2e1779f129b7a","321ec400cd4312dd04f74f4db0f79c306e0745ae"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["321ec400cd4312dd04f74f4db0f79c306e0745ae","eb91354817d84c64c9efe7c32abc6ae2e855edbf"],"3bb13258feba31ab676502787ab2e1779f129b7a":["10d2f7af0975ac83900a2c970a62fe4c8667176b","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb91354817d84c64c9efe7c32abc6ae2e855edbf"],"321ec400cd4312dd04f74f4db0f79c306e0745ae":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"]},"commit2Childs":{"10d2f7af0975ac83900a2c970a62fe4c8667176b":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","3bb13258feba31ab676502787ab2e1779f129b7a"],"eb91354817d84c64c9efe7c32abc6ae2e855edbf":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["3bb13258feba31ab676502787ab2e1779f129b7a","321ec400cd4312dd04f74f4db0f79c306e0745ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10d2f7af0975ac83900a2c970a62fe4c8667176b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"321ec400cd4312dd04f74f4db0f79c306e0745ae":["eb91354817d84c64c9efe7c32abc6ae2e855edbf","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}