{"path":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#XmlConfigFile(SolrResourceLoader,String,InputSource,String,boolean).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#XmlConfigFile(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public XmlConfigFile(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#XmlConfigFile(SolrResourceLoader,String,InputSource,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#XmlConfigFile(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   * @param substituteProps optional property substitution\n   */\n  public XmlConfigFile(SolrResourceLoader loader, String name, InputSource is, String prefix, Properties substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrPaths.locateSolrHome());\n    }\n    this.loader = loader;\n    this.substituteProperties = substituteProps;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openResource(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps != null) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public XmlConfigFile(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ee622110ba6021d0390037e77574743c1e55348c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}