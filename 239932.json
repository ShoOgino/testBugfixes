{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testHashJoinStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}