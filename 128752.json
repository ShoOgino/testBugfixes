{"path":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556156c44f3392896fb44dc22a6bafbad421bcff","date":1295994419,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToTime(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as the\n   * number of milliseconds since January 1, 1970, 00:00:00 GMT.\n   * \n   * @param dateString the date string to be converted\n   * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static long stringToTime(String dateString) throws ParseException {\n    return stringToDate(dateString).getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556156c44f3392896fb44dc22a6bafbad421bcff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["556156c44f3392896fb44dc22a6bafbad421bcff"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"556156c44f3392896fb44dc22a6bafbad421bcff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["556156c44f3392896fb44dc22a6bafbad421bcff","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}