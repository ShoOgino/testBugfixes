{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176","c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n        \n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEquals(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEquals(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEqualsHACK(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEqualsHACK(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEqualsHACK(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testSimpleRangeFacetsOfSymetricRates().mjava","sourceNew":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          @SuppressWarnings({\"rawtypes\"})\n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          @SuppressWarnings({\"rawtypes\"})\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          @SuppressWarnings({\"unchecked\"})\n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          @SuppressWarnings({\"unchecked\"})\n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEquals(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEquals(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n    \n      // exchange rates relative to USD...\n      //\n      // for all of these permutations, the numDocs in each bucket that we get back should be the same\n      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the\n      // start & end are always in USD.\n      //\n      // NOTE:\n      //  - 0,1,2 are the *input* start,gap,end\n      //  - 3,4,5 are the *normalized* start,gap,end expected in the response\n      for (List<String> args : Arrays.asList(// default currency is USD\n                                             Arrays.asList(\"4\", \"1.00\", \"11.0\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // explicit USD\n                                             Arrays.asList(\"4,USD\", \"1,USD\", \"11,USD\",\n                                                           \"4.00,USD\", \"1.00,USD\", \"11.00,USD\"),\n                                             // Gap can be in diff currency (but start/end must currently match)\n                                             Arrays.asList(\"4.00,USD\", \"000.50,GBP\", \"11,USD\",\n                                                           \"4.00,USD\", \".50,GBP\", \"11.00,USD\"),\n                                             Arrays.asList(\"4.00,USD\", \"2,EUR\", \"11,USD\",\n                                                           \"4.00,USD\", \"2.00,EUR\", \"11.00,USD\"))) {\n        \n        assertEquals(6, args.size()); // sanity check\n        \n        // first let's check facet.range\n        SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                            \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                            \"f.\" + FIELD + \".facet.range.start\", args.get(0),\n                                            \"f.\" + FIELD + \".facet.range.gap\", args.get(1),\n                                            \"f.\" + FIELD + \".facet.range.end\", args.get(2),\n                                            \"f.\" + FIELD + \".facet.range.other\", \"all\");\n        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final String start = args.get(3);\n          final String gap = args.get(4);\n          final String end = args.get(5);\n          \n          final List<RangeFacet> range_facets = rsp.getFacetRanges();\n          assertEquals(1, range_facets.size());\n          final RangeFacet result = range_facets.get(0);\n          assertEquals(FIELD, result.getName());\n          assertEquals(start, result.getStart());\n          assertEquals(gap, result.getGap());\n          assertEquals(end, result.getEnd());\n          assertEquals(3, result.getBefore());\n          assertEquals(3, result.getAfter());\n          assertEquals(9, result.getBetween());\n          \n          List<RangeFacet.Count> counts = result.getCounts();\n          if (use_mincount) {\n            assertEquals(3, counts.size());\n            for (int i = 0; i < 3; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + (i * 3)) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n            }\n          } else {\n            assertEquals(7, counts.size());\n            for (int i = 0; i < 7; i++) {\n              RangeFacet.Count bucket = counts.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.getValue());\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n\n        // same basic logic, w/json.facet\n        solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                  \"{ foo:{ type:range, field:\"+FIELD+\", mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                  \"        start:'\"+args.get(0)+\"', gap:'\"+args.get(1)+\"', end:'\"+args.get(2)+\"', other:all}}\");\n        rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n          \n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n          \n          assertEquals(\"before\", 3L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n          assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n          assertEquals(\"between\", 9L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n          \n          final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n          \n          if (use_mincount) {\n            assertEquals(3, buckets.size());\n            for (int i = 0; i < 3; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + (3 * i)) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n            }\n          } else {\n            assertEquals(7, buckets.size());\n            for (int i = 0; i < 7; i++) {\n              NamedList bucket = buckets.get(i);\n              assertEquals((4 + i) + \".00,USD\", bucket.get(\"val\"));\n              assertEquals(\"bucket #\" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get(\"count\"));\n            }\n          }\n        } catch (AssertionError|RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["c05b634713ca09b2267477408773904d4c69dd9d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1c841e27891873cab110ebeb89f124a8ec470176"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["e98520789adb1d5ad05afb4956eca0944a929688"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c05b634713ca09b2267477408773904d4c69dd9d":["1c841e27891873cab110ebeb89f124a8ec470176","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}