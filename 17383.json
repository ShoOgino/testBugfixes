{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9629d55d2fdcde021d70af58b0f51c35d0755efb","date":1363277079,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9629d55d2fdcde021d70af58b0f51c35d0755efb","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"9629d55d2fdcde021d70af58b0f51c35d0755efb":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9629d55d2fdcde021d70af58b0f51c35d0755efb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9629d55d2fdcde021d70af58b0f51c35d0755efb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9629d55d2fdcde021d70af58b0f51c35d0755efb":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}