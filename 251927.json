{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random.nextDouble(), random);\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random.nextDouble(), random);\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random.nextDouble(), random);\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, true),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, false),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEnumEquals(String,IndexReader,TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(info, term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE),\n            false);\n      }\n    }\n    assertNull(info, rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","51c8450b3b616b6777f722ff4083c0bf946381a2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}