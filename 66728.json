{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","commits":[{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[_TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = _TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb4733f8e73de0d05921117941e34f9f19b534d3","date":1372697914,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[_TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = _TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[_TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = _TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[_TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = _TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[_TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = _TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues longs = FieldCache.DEFAULT.getNumerics(getOnlySegmentReader(reader), \"f\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues longs = FieldCache.DEFAULT.getNumerics(getOnlySegmentReader(reader), \"f\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testLongFieldCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testLongFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues longs = FieldCache.DEFAULT.getNumerics(getOnlySegmentReader(reader), \"f\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full long range\n  public void testLongFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LongField field = new LongField(\"f\", 0L, Store.YES);\n    doc.add(field);\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final long v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Long.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Long.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextLong(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setLongValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final FieldCache.Longs longs = FieldCache.DEFAULT.getLongs(getOnlySegmentReader(reader), \"f\", false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], longs.get(i));\n    }\n    reader.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb4733f8e73de0d05921117941e34f9f19b534d3":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb4733f8e73de0d05921117941e34f9f19b534d3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["bb4733f8e73de0d05921117941e34f9f19b534d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"bb4733f8e73de0d05921117941e34f9f19b534d3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["bb4733f8e73de0d05921117941e34f9f19b534d3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}