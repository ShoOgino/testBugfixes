{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 10, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n\n\n                    }\n                    break;\n\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n            \t    {\n            \t    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt11 >= 1 ) break loop11;\n                        EarlyExitException eee =\n                            new EarlyExitException(11, input);\n                        throw eee;\n                }\n                cnt11++;\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        \t// do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 10, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n\n\n                    }\n                    break;\n\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n\n\n                    }\n                    break;\n\n                default :\n                    if ( cnt11 >= 1 ) break loop11;\n                        EarlyExitException eee =\n                            new EarlyExitException(11, input);\n                        throw eee;\n                }\n                cnt11++;\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","sourceOld":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 10, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n\n\n                    }\n                    break;\n\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n            \t    {\n            \t    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;\n            \t    }\n\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    if ( cnt11 >= 1 ) break loop11;\n                        EarlyExitException eee =\n                            new EarlyExitException(11, input);\n                        throw eee;\n                }\n                cnt11++;\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        \t// do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n\n                else {\n                    int nvaeMark = input.mark();\n                    try {\n                        input.consume();\n                        NoViableAltException nvae =\n                            new NoViableAltException(\"\", 10, 1, input);\n                        throw nvae;\n                    } finally {\n                        input.rewind(nvaeMark);\n                    }\n                }\n\n            }\n\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n                throw nvae;\n            }\n\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n                    }\n                    break;\n\n            }\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            while (true) {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n                switch (alt11) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n                    }\n                    break;\n\n                default :\n                    if ( cnt11 >= 1 ) break loop11;\n                    EarlyExitException eee = new EarlyExitException(11, input);\n                    throw eee;\n                }\n                cnt11++;\n            }\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","sourceOld":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 10, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n\n\n                    }\n                    break;\n\n            }\n\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n\n\n                    }\n                    break;\n\n                default :\n                    if ( cnt11 >= 1 ) break loop11;\n                        EarlyExitException eee =\n                            new EarlyExitException(11, input);\n                        throw eee;\n                }\n                cnt11++;\n            } while (true);\n\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n      int alt10=2;\n      int LA10_0 = input.LA(1);\n      if ( (LA10_0=='0') ) {\n        int LA10_1 = input.LA(2);\n        if ( (LA10_1=='x') ) {\n          alt10=1;\n        }\n        else if ( (LA10_1=='X') ) {\n          alt10=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 10, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 10, 0, input);\n        throw nvae;\n      }\n\n      switch (alt10) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n      int cnt11=0;\n      loop11:\n      while (true) {\n        int alt11=2;\n        int LA11_0 = input.LA(1);\n        if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n          alt11=1;\n        }\n\n        switch (alt11) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt11 >= 1 ) break loop11;\n          EarlyExitException eee = new EarlyExitException(11, input);\n          throw eee;\n        }\n        cnt11++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","sourceOld":"    // $ANTLR start \"HEX\"\n    public final void mHEX() throws RecognitionException {\n        try {\n            int _type = HEX;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n            {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n            if ( (LA10_0=='0') ) {\n                int LA10_1 = input.LA(2);\n                if ( (LA10_1=='x') ) {\n                    alt10=1;\n                }\n                else if ( (LA10_1=='X') ) {\n                    alt10=2;\n                }\n\n                else {\n                    int nvaeMark = input.mark();\n                    try {\n                        input.consume();\n                        NoViableAltException nvae =\n                            new NoViableAltException(\"\", 10, 1, input);\n                        throw nvae;\n                    } finally {\n                        input.rewind(nvaeMark);\n                    }\n                }\n\n            }\n\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 10, 0, input);\n                throw nvae;\n            }\n\n            switch (alt10) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n                    {\n                    match(\"0x\"); \n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n                    {\n                    match(\"0X\"); \n\n                    }\n                    break;\n\n            }\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n            int cnt11=0;\n            loop11:\n            while (true) {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n                    alt11=1;\n                }\n\n                switch (alt11) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:\n                    {\n                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n                        input.consume();\n                    }\n                    else {\n                        MismatchedSetException mse = new MismatchedSetException(null,input);\n                        recover(mse);\n                        throw mse;\n                    }\n                    }\n                    break;\n\n                default :\n                    if ( cnt11 >= 1 ) break loop11;\n                    EarlyExitException eee = new EarlyExitException(11, input);\n                    throw eee;\n                }\n                cnt11++;\n            }\n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n            // do for sure before leaving\n        }\n    }\n    // $ANTLR end \"HEX\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n      int alt10=2;\n      int LA10_0 = input.LA(1);\n      if ( (LA10_0=='0') ) {\n        int LA10_1 = input.LA(2);\n        if ( (LA10_1=='x') ) {\n          alt10=1;\n        }\n        else if ( (LA10_1=='X') ) {\n          alt10=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 10, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 10, 0, input);\n        throw nvae;\n      }\n\n      switch (alt10) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n      int cnt11=0;\n      loop11:\n      while (true) {\n        int alt11=2;\n        int LA11_0 = input.LA(1);\n        if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n          alt11=1;\n        }\n\n        switch (alt11) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt11 >= 1 ) break loop11;\n          EarlyExitException eee = new EarlyExitException(11, input);\n          throw eee;\n        }\n        cnt11++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )\n      int alt11=2;\n      int LA11_0 = input.LA(1);\n      if ( (LA11_0=='0') ) {\n        int LA11_1 = input.LA(2);\n        if ( (LA11_1=='x') ) {\n          alt11=1;\n        }\n        else if ( (LA11_1=='X') ) {\n          alt11=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 11, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 11, 0, input);\n        throw nvae;\n      }\n\n      switch (alt11) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+\n      int cnt12=0;\n      loop12:\n      while (true) {\n        int alt12=2;\n        int LA12_0 = input.LA(1);\n        if ( ((LA12_0 >= '0' && LA12_0 <= '9')||(LA12_0 >= 'A' && LA12_0 <= 'F')||(LA12_0 >= 'a' && LA12_0 <= 'f')) ) {\n          alt12=1;\n        }\n\n        switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt12 >= 1 ) break loop12;\n          EarlyExitException eee = new EarlyExitException(12, input);\n          throw eee;\n        }\n        cnt12++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","sourceOld":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )\n      int alt10=2;\n      int LA10_0 = input.LA(1);\n      if ( (LA10_0=='0') ) {\n        int LA10_1 = input.LA(2);\n        if ( (LA10_1=='x') ) {\n          alt10=1;\n        }\n        else if ( (LA10_1=='X') ) {\n          alt10=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 10, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 10, 0, input);\n        throw nvae;\n      }\n\n      switch (alt10) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+\n      int cnt11=0;\n      loop11:\n      while (true) {\n        int alt11=2;\n        int LA11_0 = input.LA(1);\n        if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {\n          alt11=1;\n        }\n\n        switch (alt11) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt11 >= 1 ) break loop11;\n          EarlyExitException eee = new EarlyExitException(11, input);\n          throw eee;\n        }\n        cnt11++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' )\n      int alt18=2;\n      int LA18_0 = input.LA(1);\n      if ( (LA18_0=='0') ) {\n        int LA18_1 = input.LA(2);\n        if ( (LA18_1=='x') ) {\n          alt18=1;\n        }\n        else if ( (LA18_1=='X') ) {\n          alt18=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 18, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 18, 0, input);\n        throw nvae;\n      }\n\n      switch (alt18) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:19: ( HEXDIGIT )+\n      int cnt19=0;\n      loop19:\n      while (true) {\n        int alt19=2;\n        int LA19_0 = input.LA(1);\n        if ( ((LA19_0 >= '0' && LA19_0 <= '9')||(LA19_0 >= 'A' && LA19_0 <= 'F')||(LA19_0 >= 'a' && LA19_0 <= 'f')) ) {\n          alt19=1;\n        }\n\n        switch (alt19) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt19 >= 1 ) break loop19;\n          EarlyExitException eee = new EarlyExitException(19, input);\n          throw eee;\n        }\n        cnt19++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","sourceOld":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )\n      int alt11=2;\n      int LA11_0 = input.LA(1);\n      if ( (LA11_0=='0') ) {\n        int LA11_1 = input.LA(2);\n        if ( (LA11_1=='x') ) {\n          alt11=1;\n        }\n        else if ( (LA11_1=='X') ) {\n          alt11=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 11, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 11, 0, input);\n        throw nvae;\n      }\n\n      switch (alt11) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+\n      int cnt12=0;\n      loop12:\n      while (true) {\n        int alt12=2;\n        int LA12_0 = input.LA(1);\n        if ( ((LA12_0 >= '0' && LA12_0 <= '9')||(LA12_0 >= 'A' && LA12_0 <= 'F')||(LA12_0 >= 'a' && LA12_0 <= 'f')) ) {\n          alt12=1;\n        }\n\n        switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt12 >= 1 ) break loop12;\n          EarlyExitException eee = new EarlyExitException(12, input);\n          throw eee;\n        }\n        cnt12++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mHEX().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"HEX\"\n  public final void mHEX() throws RecognitionException {\n    try {\n      int _type = HEX;\n      int _channel = DEFAULT_TOKEN_CHANNEL;\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' ) ( HEXDIGIT )+\n      {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' )\n      int alt18=2;\n      int LA18_0 = input.LA(1);\n      if ( (LA18_0=='0') ) {\n        int LA18_1 = input.LA(2);\n        if ( (LA18_1=='x') ) {\n          alt18=1;\n        }\n        else if ( (LA18_1=='X') ) {\n          alt18=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 18, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 18, 0, input);\n        throw nvae;\n      }\n\n      switch (alt18) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:8: '0x'\n          {\n          match(\"0x\"); \n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:13: '0X'\n          {\n          match(\"0X\"); \n\n          }\n          break;\n\n      }\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:19: ( HEXDIGIT )+\n      int cnt19=0;\n      loop19:\n      while (true) {\n        int alt19=2;\n        int LA19_0 = input.LA(1);\n        if ( ((LA19_0 >= '0' && LA19_0 <= '9')||(LA19_0 >= 'A' && LA19_0 <= 'F')||(LA19_0 >= 'a' && LA19_0 <= 'f')) ) {\n          alt19=1;\n        }\n\n        switch (alt19) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:\n          {\n          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {\n            input.consume();\n          }\n          else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;\n          }\n          }\n          break;\n\n        default :\n          if ( cnt19 >= 1 ) break loop19;\n          EarlyExitException eee = new EarlyExitException(19, input);\n          throw eee;\n        }\n        cnt19++;\n      }\n\n      }\n\n      state.type = _type;\n      state.channel = _channel;\n    }\n    finally {\n      // do for sure before leaving\n    }\n  }\n  // $ANTLR end \"HEX\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}