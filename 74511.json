{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}