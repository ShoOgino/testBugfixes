{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","commits":[{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text, useCache)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean seekExact(BytesRef text, boolean useCache) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text, useCache)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","sourceNew":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      boolean result;\n      if (delegateOverridesSeekExact) {\n        result = in.seekExact(text);\n      } else {\n        result = super.seekExact(text);\n      }\n      if (result) {\n        state = State.POSITIONED;\n      } else {\n        state = State.UNPOSITIONED;\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","sourceNew":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      boolean result;\n      if (delegateOverridesSeekExact) {\n        result = in.seekExact(text);\n      } else {\n        result = super.seekExact(text);\n      }\n      if (result) {\n        state = State.POSITIONED;\n      } else {\n        state = State.UNPOSITIONED;\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      if (super.seekExact(text)) {\n        state = State.POSITIONED;\n        return true;\n      } else {\n        state = State.UNPOSITIONED;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#seekExact(BytesRef).mjava","sourceNew":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      boolean result;\n      if (delegateOverridesSeekExact) {\n        result = in.seekExact(text);\n      } else {\n        result = super.seekExact(text);\n      }\n      if (result) {\n        state = State.POSITIONED;\n      } else {\n        state = State.UNPOSITIONED;\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public boolean seekExact(BytesRef text) throws IOException {\n      assert text.isValid();\n      boolean result;\n      if (delegateOverridesSeekExact) {\n        result = in.seekExact(text);\n      } else {\n        result = super.seekExact(text);\n      }\n      if (result) {\n        state = State.POSITIONED;\n      } else {\n        state = State.UNPOSITIONED;\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["4d637064d608752565d4f9f41b2497dfdfdde50e","4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}