{"path":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","commits":[{"id":"b77550c47735d804ddb8767848f5af9b02b88c84","date":1162245631,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"/dev/null","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        \n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        // the index is a single segment, thus IndexReader.open() returns an instance of SegmentReader\n        SegmentReader reader = (SegmentReader) IndexReader.open(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        // we decorate the proxStream with a wrapper class that allows to count the number of calls of seek()\n        reader.proxStream = new SeeksCountingStream(reader.proxStream);\n        \n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b77550c47735d804ddb8767848f5af9b02b88c84"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77550c47735d804ddb8767848f5af9b02b88c84"],"b77550c47735d804ddb8767848f5af9b02b88c84":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}