{"path":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","commits":[{"id":"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","date":1332689453,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":["1919b234a992d6438a59ccbb02bd0656162e602e","19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5","8e5663809fccfda938d8d46f0106a5301cdd5cf0","6620df8541b174097b1133a4fc370adb2e570524"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() throws IOException {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.capacity();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final OpenBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.capacity();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final AtomicReaderContext context, Bits acceptDocs) {\n        AtomicReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new FixedBitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(bs, acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new FixedBitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = (pos>=0 && pos<max) ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public boolean isCacheable() {\n            return true;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    final FixedBitSet bs = getBits();\n\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);  // TODO: this is buggy if getBits() returns a bitset that does not have a capacity of maxDoc\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);  // TODO: this is buggy if getBits() returns a bitset that does not have a capacity of maxDoc\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getTopFilter().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Filter getTopFilter() {\n    return new Filter() {\n      final FixedBitSet bs = getBits();\n\n      @Override\n      public DocIdSet getDocIdSet(final LeafReaderContext context, Bits acceptDocs) {\n        LeafReader reader = context.reader();\n        // all Solr DocSets that are used as filters only include live docs\n        final Bits acceptDocs2 = acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);\n\n        if (context.isTopLevel) {\n          return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs), acceptDocs);\n        }\n\n        final int base = context.docBase;\n        final int maxDoc = reader.maxDoc();\n        final int max = base + maxDoc;   // one past the max doc in this segment.\n\n        return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int pos=base-1;\n              int adjustedDoc=-1;\n\n              @Override\n              public int docID() {\n                return adjustedDoc;\n              }\n\n              @Override\n              public int nextDoc() {\n                pos = bs.nextSetBit(pos+1);  // TODO: this is buggy if getBits() returns a bitset that does not have a capacity of maxDoc\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public int advance(int target) {\n                if (target==NO_MORE_DOCS) return adjustedDoc=NO_MORE_DOCS;\n                pos = bs.nextSetBit(target+base);\n                return adjustedDoc = pos<max ? pos-base : NO_MORE_DOCS;\n              }\n\n              @Override\n              public long cost() {\n                return bs.length();\n              }\n            };\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return bs.ramBytesUsed();\n          }\n\n          @Override\n          public Bits bits() {\n            // sparse filters should not use random access\n            return null;\n          }\n\n        }, acceptDocs2);\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"DocSetTopFilter\";\n      }\n\n      @Override\n      public boolean equals(Object other) {\n        return sameClassAs(other) &&\n               Objects.equals(bs, getClass().cast(other).bs);\n      }\n\n      @Override\n      public int hashCode() {\n        return classHash() ^ bs.hashCode();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["0e7bc21595222ae4f75509300fbb7726691f387f"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","0e7bc21595222ae4f75509300fbb7726691f387f"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0e7bc21595222ae4f75509300fbb7726691f387f"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"0e7bc21595222ae4f75509300fbb7726691f387f":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","c6f080a2ab37c464dd98db173f6cbf10dc74f211","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}