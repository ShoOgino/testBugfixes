{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d50d971859a3c7841c17117b0aac14e733441ebf","date":1384264257,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case BITPACK_COMPRESSED:\n        final PackedInts.Reader bits = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, entry.bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return bits.get((int) id) - 1;\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case BITPACK_COMPRESSED:\n        final PackedInts.Reader bits = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, entry.bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return bits.get((int) id) - 1;\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return reader;\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d50d971859a3c7841c17117b0aac14e733441ebf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["d50d971859a3c7841c17117b0aac14e733441ebf"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"d50d971859a3c7841c17117b0aac14e733441ebf":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d50d971859a3c7841c17117b0aac14e733441ebf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}