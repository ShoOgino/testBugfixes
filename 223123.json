{"path":"lucene/sandbox/src/java/org/apache/lucene/search/LargeNumHitsTopDocsCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"a4d745a1ee5367ec74a4af66528b1b81a4c33355","date":1562779072,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/LargeNumHitsTopDocsCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) {\n    final int docBase = context.docBase;\n    return new TopScoreDocCollector.ScorerLeafCollector() {\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        super.setScorer(scorer);\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n\n        // This collector relies on the fact that scorers produce positive values:\n        assert score >= 0; // NOTE: false for NaN\n\n        if (totalHits < requestedHitCount) {\n          hits.add(new ScoreDoc(doc + docBase, score));\n          totalHits++;\n          return;\n        } else if (totalHits == requestedHitCount) {\n          // Convert the list to a priority queue\n\n          // We should get here only when priority queue\n          // has not been built\n          assert pq == null;\n          assert pqTop == null;\n          pq = new HitQueue(requestedHitCount, false);\n\n          for (ScoreDoc scoreDoc : hits) {\n            pq.add(scoreDoc);\n          }\n\n          pqTop = pq.top();\n          hits = null;\n        }\n\n        if (score > pqTop.score) {\n          pqTop.doc = doc + docBase;\n          pqTop.score = score;\n          pqTop = pq.updateTop();\n        }\n        ++totalHits;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4d745a1ee5367ec74a4af66528b1b81a4c33355":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4d745a1ee5367ec74a4af66528b1b81a4c33355"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4d745a1ee5367ec74a4af66528b1b81a4c33355"],"a4d745a1ee5367ec74a4af66528b1b81a4c33355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}