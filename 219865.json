{"path":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"116545389190ea5d0d9a35977d09ef0fe49716ac","date":1272959441,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"116545389190ea5d0d9a35977d09ef0fe49716ac":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116545389190ea5d0d9a35977d09ef0fe49716ac"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"116545389190ea5d0d9a35977d09ef0fe49716ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}