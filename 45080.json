{"path":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","commits":[{"id":"96ae115468a08fb03270562a0121761d73c2c8c1","date":1456307437,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static PointInSetQuery newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n    value.length = Long.BYTES;\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     LongPoint.encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a577e4497932469db8eefa9fbecf4cb9265be98","date":1456321690,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static PointInSetQuery newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n    value.length = Long.BYTES;\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     LongPoint.encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","date":1456349953,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all int values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, long... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":["96ae115468a08fb03270562a0121761d73c2c8c1","ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","4a577e4497932469db8eefa9fbecf4cb9265be98"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, long... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newSetQuery(String,long...).mjava","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, long... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.\n   * \n   * @param field field name. must not be {@code null}.\n   * @param valuesIn all values to match\n   */\n  public static Query newSetQuery(String field, long... valuesIn) throws IOException {\n\n    // Don't unexpectedly change the user's incoming values array:\n    long[] values = valuesIn.clone();\n\n    Arrays.sort(values);\n\n    final BytesRef value = new BytesRef(new byte[Long.BYTES]);\n\n    return new PointInSetQuery(field, 1, Long.BYTES,\n                               new BytesRefIterator() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == values.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(values[upto], value.bytes, 0);\n                                     upto++;\n                                     return value;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == Long.BYTES;\n        return Long.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"4a577e4497932469db8eefa9fbecf4cb9265be98":["96ae115468a08fb03270562a0121761d73c2c8c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"96ae115468a08fb03270562a0121761d73c2c8c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"4a577e4497932469db8eefa9fbecf4cb9265be98":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","96ae115468a08fb03270562a0121761d73c2c8c1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ae115468a08fb03270562a0121761d73c2c8c1":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}