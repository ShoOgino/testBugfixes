{"path":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequestByPurpose(ZkStateReader,String,String,int).mjava","commits":[{"id":"1fc56848da7b3f927bb9840e8aedf09ee11cede1","date":1424871235,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequestByPurpose(ZkStateReader,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieve request recorded by this queue which were sent to given collection, shard and purpose\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @param purpose        the shard purpose\n     * @return instance of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or null if none is found\n     * @throws java.lang.RuntimeException if more than one request is found to the same shard with the same purpose\n     */\n    public ShardRequestAndParams getShardRequestByPurpose(ZkStateReader zkStateReader, String collectionName, String shardId, int purpose) throws RuntimeException {\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> shardRequests = getShardRequests(zkStateReader, collectionName, shardId);\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> result = new ArrayList<>(1);\n      for (TrackingShardHandlerFactory.ShardRequestAndParams request : shardRequests) {\n        if ((request.sreq.purpose & purpose) != 0) {\n          result.add(request);\n        }\n      }\n      if (result.size() > 1) {\n        throw new RuntimeException(\"Multiple requests to the same shard with the same purpose were found. Requests: \" + result);\n      }\n      return result.isEmpty() ? null : result.get(0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequestByPurpose(ZkStateReader,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieve request recorded by this queue which were sent to given collection, shard and purpose\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @param purpose        the shard purpose\n     * @return instance of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or null if none is found\n     * @throws java.lang.RuntimeException if more than one request is found to the same shard with the same purpose\n     */\n    public ShardRequestAndParams getShardRequestByPurpose(ZkStateReader zkStateReader, String collectionName, String shardId, int purpose) throws RuntimeException {\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> shardRequests = getShardRequests(zkStateReader, collectionName, shardId);\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> result = new ArrayList<>(1);\n      for (TrackingShardHandlerFactory.ShardRequestAndParams request : shardRequests) {\n        if ((request.sreq.purpose & purpose) != 0) {\n          result.add(request);\n        }\n      }\n      if (result.size() > 1) {\n        throw new RuntimeException(\"Multiple requests to the same shard with the same purpose were found. Requests: \" + result);\n      }\n      return result.isEmpty() ? null : result.get(0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}