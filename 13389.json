{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":null,"sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}