{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","commits":[{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a95b7b666da79218aa9365b9d9adcb42351ee3","date":1464382787,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(people, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    assertNotNull(cluster.createCollection(depts, shards, replicas,\n        configName, collectionProperties));\n    \n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc22052be612d5e8dea026ce83d2e52a99c504eb","date":1482651391,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    differentUniqueId = random().nextBoolean();\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \n              differentUniqueId ? \"schema-minimal-with-another-uniqkey.xml\":\n                                  \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    differentUniqueId = random().nextBoolean();\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \n              differentUniqueId ? \"schema-minimal-with-another-uniqkey.xml\":\n                                  \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    \n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-doctransformers.xml\" );\n    collectionProperties.put(\"schema\", \"schema-docValuesJoin.xml\"); \n\n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(people, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(depts, configName, shards, replicas)\n        .withProperty(\"config\", \"solrconfig-doctransformers.xml\")\n        .withProperty(\"schema\", \"schema-docValuesJoin.xml\")\n        .process(cluster.getSolrClient());\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(people);\n    \n    ZkStateReader zkStateReader = client.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(people, zkStateReader, true, true, 30);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(depts, zkStateReader, false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc22052be612d5e8dea026ce83d2e52a99c504eb"],"cc22052be612d5e8dea026ce83d2e52a99c504eb":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc22052be612d5e8dea026ce83d2e52a99c504eb"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc22052be612d5e8dea026ce83d2e52a99c504eb"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da8a02bef7458089240404614139b53c9f875ec7","e89a32cc825033ebae8bb9e1c6877c2d9d76749e","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cc22052be612d5e8dea026ce83d2e52a99c504eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}