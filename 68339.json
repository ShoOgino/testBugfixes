{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = SloppyMath.haversinMeters(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinLat, final double rMaxLat,\n                                                         final double rMinLon, final double rMaxLon,\n                                                         final double centerLat, final double centerLon,\n                                                         final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinLat, rMaxLat, rMinLon, rMaxLon, centerLat, centerLon, closestPt);\n    boolean haverShortCut = SloppyMath.haversinMeters(centerLat, centerLon, closestPt[0], closestPt[1]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinLon;\n    double lon2 = rMaxLon;\n    double lat1 = rMinLat;\n    double lat2 = rMaxLat;\n    if (closestPt[1] == rMinLon || closestPt[1] == rMaxLon) {\n      lon1 = closestPt[1];\n      lon2 = lon1;\n    } else if (closestPt[0] == rMinLat || closestPt[0] == rMaxLat) {\n      lat1 = closestPt[0];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lat1, lon1, 0,\n                             lat2, lon2, 0,\n                             centerLat, centerLon, 0,\n                             radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = SloppyMath.haversinMeters(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":null,"sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinLat, final double rMaxLat,\n                                                         final double rMinLon, final double rMaxLon,\n                                                         final double centerLat, final double centerLon,\n                                                         final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinLat, rMaxLat, rMinLon, rMaxLon, centerLat, centerLon, closestPt);\n    boolean haverShortCut = SloppyMath.haversinMeters(centerLat, centerLon, closestPt[0], closestPt[1]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinLon;\n    double lon2 = rMaxLon;\n    double lat1 = rMinLat;\n    double lat2 = rMaxLat;\n    if (closestPt[1] == rMinLon || closestPt[1] == rMaxLon) {\n      lon1 = closestPt[1];\n      lon2 = lon1;\n    } else if (closestPt[0] == rMinLat || closestPt[0] == rMaxLat) {\n      lat1 = closestPt[0];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lat1, lon1, 0,\n                             lat2, lon2, 0,\n                             centerLat, centerLon, 0,\n                             radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}