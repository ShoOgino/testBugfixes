{"path":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"35426836c91acd1884436cafce89c7f7011eb8a1","date":1217571118,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (firstSearcher) {\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          LOG.log(Level.SEVERE, \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        try {\n          LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n          checker.build(core, newSearcher);\n        } catch (Exception e) {\n          LOG.log(Level.SEVERE,\n                  \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (firstSearcher) {\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        try {\n          LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n          checker.build(core, newSearcher);\n        } catch (Exception e) {\n          log.error(\n                  \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (firstSearcher) {\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          LOG.log(Level.SEVERE, \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        try {\n          LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n          checker.build(core, newSearcher);\n        } catch (Exception e) {\n          LOG.log(Level.SEVERE,\n                  \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216fd89a361927421e4f8d245ec707a0a49872ef","date":1225223984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (firstSearcher) {\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        try {\n          LOG.info(\"Building spell index for spell checker: \" + checker.getDictionaryName());\n          checker.build(core, newSearcher);\n        } catch (Exception e) {\n          log.error(\n                  \"Exception in building spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216fd89a361927421e4f8d245ec707a0a49872ef":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["216fd89a361927421e4f8d245ec707a0a49872ef"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["35426836c91acd1884436cafce89c7f7011eb8a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35426836c91acd1884436cafce89c7f7011eb8a1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"216fd89a361927421e4f8d245ec707a0a49872ef":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["35426836c91acd1884436cafce89c7f7011eb8a1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["216fd89a361927421e4f8d245ec707a0a49872ef"],"35426836c91acd1884436cafce89c7f7011eb8a1":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}