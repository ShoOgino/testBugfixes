{"path":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","commits":[{"id":"f76ccdfca879f9e8881676ce0fb611f44c0f07a2","date":1322905997,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["6bd4a7478aca8c3880512b730b28bf3239340635","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}