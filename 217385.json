{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd#moveNormalReplica(ClusterState, NamedList, String, String, DocCollection, Replica, Slice, int, boolean)}.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, null);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: \" + newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    Replica ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.get(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.get(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    Replica newReplica = new Replica(coreNodeName, targetNode, collection, slice.getName(), newSolrCoreName,\n        Replica.State.DOWN, replica.getType(), props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    ReplicaInfo ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.getVariable(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.getVariable(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    ReplicaInfo newReplica = new ReplicaInfo(coreNodeName, newSolrCoreName, collection, slice.getName(), replica.getType(), targetNode, props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simMoveReplica(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Move replica. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.MoveReplicaCmd} <code>moveNormalReplica(...)</code> method.\n   * @param message operation details\n   * @param results operation results.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simMoveReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    String replicaName = message.getStr(REPLICA_PROP);\n    Replica replica = coll.getReplica(replicaName);\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n    }\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Replica has no 'slice' property! : \" + replica);\n    }\n\n    opDelay(collection, CollectionParams.CollectionAction.MOVEREPLICA.name());\n    Replica ri = getReplicaInfo(replica);\n    if (ri != null) {\n      if (ri.get(Type.CORE_IDX.tagName) != null) {\n        // simulate very large replicas - add additional delay of 5s / GB\n        long sizeInGB = ((Number)ri.get(Type.CORE_IDX.tagName)).longValue();\n        long opDelay = opDelays.getOrDefault(ri.getCollection(), Collections.emptyMap())\n            .getOrDefault(CollectionParams.CollectionAction.MOVEREPLICA.name(), defaultOpDelays.get(CollectionParams.CollectionAction.MOVEREPLICA.name()));\n        opDelay = TimeUnit.MILLISECONDS.toSeconds(opDelay);\n        if (sizeInGB > opDelay) {\n          // add 5s per each GB above the threshold\n          cloudManager.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(sizeInGB - opDelay) * 5);\n        }\n      }\n    }\n\n    // TODO: for now simulate moveNormalReplica sequence, where we first add new replica and then delete the old one\n\n    String newSolrCoreName = Assign.buildSolrCoreName(stateManager, coll, slice.getName(), replica.getType());\n    String coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n    // copy other properties\n    Map<String, Object> props = replica.getProperties().entrySet().stream()\n        .filter(e -> !NO_COPY_PROPS.contains(e.getKey()))\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n    Replica newReplica = new Replica(coreNodeName, targetNode, collection, slice.getName(), newSolrCoreName,\n        Replica.State.DOWN, replica.getType(), props);\n    log.debug(\"-- new replica: {}\", newReplica);\n    // xxx should run leader election here already?\n    simAddReplica(targetNode, newReplica, false);\n    // this will trigger leader election\n    simRemoveReplica(replica.getNodeName(), collection, replica.getName());\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e35f2dde06b35aa9904949a3a93fabd090371077":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["e35f2dde06b35aa9904949a3a93fabd090371077"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}