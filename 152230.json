{"path":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","commits":[{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","pathOld":"/dev/null","sourceNew":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            result.add(new PluginInfo(nl.item(j) ,\"[solrconfig.xml] processor\",false));\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return Collections.unmodifiableMap(chains);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f","date":1251097036,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","sourceNew":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            result.add(new PluginInfo(nl.item(j) ,\"[solrconfig.xml] processor\",false));\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","sourceOld":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            result.add(new PluginInfo(nl.item(j) ,\"[solrconfig.xml] processor\",false));\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return Collections.unmodifiableMap(chains);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b","date":1251710201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","sourceNew":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            PluginInfo pluginInfo = new PluginInfo(nl.item(j), \"[solrconfig.xml] processor\", false);\n            if(pluginInfo.isEnabled()) result.add(pluginInfo);\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","sourceOld":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            result.add(new PluginInfo(nl.item(j) ,\"[solrconfig.xml] processor\",false));\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8963910260f4ff9adfecbdcff7bc9a94f9db03ef","date":1252220279,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","sourceNew":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            PluginInfo pluginInfo = new PluginInfo(nl.item(j), \"[solrconfig.xml] processor\", false, true);\n            if(pluginInfo.isEnabled()) result.add(pluginInfo);\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","sourceOld":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            PluginInfo pluginInfo = new PluginInfo(nl.item(j), \"[solrconfig.xml] processor\", false);\n            if(pluginInfo.isEnabled()) result.add(pluginInfo);\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadUpdateProcessorInfo().mjava","sourceNew":null,"sourceOld":"  protected Map<String, List<PluginInfo>> loadUpdateProcessorInfo() {\n    HashMap<String, List<PluginInfo>> chains = new HashMap<String, List<PluginInfo>>();\n    NodeList nodes = (NodeList) evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    if (nodes != null) {\n      boolean requireName = nodes.getLength() > 1;\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName ? \"[solrconfig.xml] updateRequestProcessorChain\":null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        XPath xpath = getXPath();\n        try {\n          NodeList nl = (NodeList) xpath.evaluate(\"processor\",node, XPathConstants.NODESET);\n          if((nl.getLength() <1)) {\n            throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n          }\n          ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n          for (int j=0; j<nl.getLength(); j++) {\n            PluginInfo pluginInfo = new PluginInfo(nl.item(j), \"[solrconfig.xml] processor\", false, true);\n            if(pluginInfo.isEnabled()) result.add(pluginInfo);\n          }\n          chains.put(name,result);\n          if(isDefault || nodes.getLength() == 1) chains.put(null,result);\n        } catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n      }\n    }\n\n    return chains.isEmpty() ?\n            Collections.<String, List<PluginInfo>>emptyMap():\n            Collections.unmodifiableMap(chains);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef"],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":["b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b":["986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f"],"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":[],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef"],"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f":["b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}