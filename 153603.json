{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","commits":[{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldValueEvaluatorTest#arrayTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","sourceNew":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldValueEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldValueEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldValueEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldValueEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldValueEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldValueEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldValueEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","sourceOld":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldValueEvaluatorTest#arrayTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","sourceNew":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldValueEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldValueEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldValueEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldValueEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldValueEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldValueEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldValueEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","sourceOld":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldValueEvaluatorTest#arrayTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/FieldEvaluatorTest#arrayTypes().mjava","sourceNew":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldValueEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldValueEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldValueEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldValueEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldValueEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldValueEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldValueEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","sourceOld":"  @Test\n  public void arrayTypes() throws Exception{\n    values.clear();\n    values.put(\"a\", new Boolean[]{ true, false });\n    values.put(\"b\", new Double[]{ 0.0, 1.1 });\n    values.put(\"c\", new Integer[]{ 0, 1 });\n    values.put(\"d\", new Long[]{ 0L, 1L });\n    values.put(\"e\", new String[]{ \"first\", \"second\" });\n    \n    Tuple tuple = new Tuple(values);\n    \n    for(String fieldName : new String[]{ \"a\", \"b\", \"c\", \"d\", \"e\" }){\n      Assert.assertTrue(new FieldEvaluator(fieldName).evaluate(tuple) instanceof Collection);\n      Assert.assertEquals(2, ((Collection<?>)new FieldEvaluator(fieldName).evaluate(tuple)).size());\n    }\n    \n    Assert.assertEquals(false, ((Collection<?>)new FieldEvaluator(\"a\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1.1, ((Collection<?>)new FieldEvaluator(\"b\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1, ((Collection<?>)new FieldEvaluator(\"c\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(1L, ((Collection<?>)new FieldEvaluator(\"d\").evaluate(tuple)).toArray()[1]);\n    Assert.assertEquals(\"second\", ((Collection<?>)new FieldEvaluator(\"e\").evaluate(tuple)).toArray()[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["d492b24eb91b29b3fb6bca5b158bec326fbc12df","ba1e7de64990e3928b90142a52fb92eeff556475"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba1e7de64990e3928b90142a52fb92eeff556475":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}