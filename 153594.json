{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","sourceNew":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","sourceNew":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","sourceNew":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertCollectionExpectations(String).mjava","sourceNew":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the collection has the correct number of shards and replicas\n   */\n  protected void assertCollectionExpectations(String collectionName) throws Exception {\n    CloudSolrClient client = this.createCloudClient(null);\n    try {\n      client.connect();\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n\n      assertTrue(\"Could not find new collection \" + collectionName, clusterState.hasCollection(collectionName));\n      Map<String, Slice> shards = clusterState.getCollection(collectionName).getSlicesMap();\n      // did we find expectedSlices shards/shards?\n      assertEquals(\"Found new collection \" + collectionName + \", but mismatch on number of shards.\", shardCount, shards.size());\n      int totalShards = 0;\n      for (String shardName : shards.keySet()) {\n        totalShards += shards.get(shardName).getReplicas().size();\n      }\n      int expectedTotalShards = shardCount * replicationFactor;\n      assertEquals(\"Found new collection \" + collectionName + \" with correct number of shards, but mismatch on number \" +\n          \"of shards.\", expectedTotalShards, totalShards);\n    } finally {\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e7da9d8536c11576df10e348efa79d2739170936"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}