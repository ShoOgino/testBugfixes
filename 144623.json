{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","commits":[{"id":"4310e21f72d5750be78534560f7f28e2d66bf933","date":1452074177,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.createTempOutput prefix=\" + prefix + \" suffix=\" + suffix);\n    }\n    List<String> toDelete = new ArrayList<>();\n\n    // This is very ugly/messy/dangerous (can in some disastrous case maybe create too many temp files), but I don't know of a cleaner way:\n    boolean success = false;\n\n    Directory first;\n    Directory second;\n    if (doCacheWrite(prefix, context)) {\n      first = cache;\n      second = in;\n    } else {\n      first = in;\n      second = cache;\n    }\n\n    IndexOutput out = null;\n    try {\n      while (true) {\n        out = first.createTempOutput(prefix, suffix, context);\n        String name = out.getName();\n        toDelete.add(name);\n        if (slowFileExists(second, name)) {\n          out.close();\n        } else {\n          success = true;\n          break;\n        }\n      }\n    } finally {\n      if (success) {\n        IOUtils.deleteFiles(first, toDelete);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c0a090bfe0c54cc37384e8cb835857464f5a9f","date":1452087961,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.createTempOutput prefix=\" + prefix + \" suffix=\" + suffix);\n    }\n    Set<String> toDelete = new HashSet<>();\n\n    // This is very ugly/messy/dangerous (can in some disastrous case maybe create too many temp files), but I don't know of a cleaner way:\n    boolean success = false;\n\n    Directory first;\n    Directory second;\n    if (doCacheWrite(prefix, context)) {\n      first = cache;\n      second = in;\n    } else {\n      first = in;\n      second = cache;\n    }\n\n    IndexOutput out = null;\n    try {\n      while (true) {\n        out = first.createTempOutput(prefix, suffix, context);\n        String name = out.getName();\n        toDelete.add(name);\n        if (slowFileExists(second, name)) {\n          out.close();\n        } else {\n          toDelete.remove(name);\n          success = true;\n          break;\n        }\n      }\n    } finally {\n      if (success) {\n        IOUtils.deleteFiles(first, toDelete);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.createTempOutput prefix=\" + prefix + \" suffix=\" + suffix);\n    }\n    List<String> toDelete = new ArrayList<>();\n\n    // This is very ugly/messy/dangerous (can in some disastrous case maybe create too many temp files), but I don't know of a cleaner way:\n    boolean success = false;\n\n    Directory first;\n    Directory second;\n    if (doCacheWrite(prefix, context)) {\n      first = cache;\n      second = in;\n    } else {\n      first = in;\n      second = cache;\n    }\n\n    IndexOutput out = null;\n    try {\n      while (true) {\n        out = first.createTempOutput(prefix, suffix, context);\n        String name = out.getName();\n        toDelete.add(name);\n        if (slowFileExists(second, name)) {\n          out.close();\n        } else {\n          success = true;\n          break;\n        }\n      }\n    } finally {\n      if (success) {\n        IOUtils.deleteFiles(first, toDelete);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n      }\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createTempOutput(String,String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.createTempOutput prefix=\" + prefix + \" suffix=\" + suffix);\n    }\n    Set<String> toDelete = new HashSet<>();\n\n    // This is very ugly/messy/dangerous (can in some disastrous case maybe create too many temp files), but I don't know of a cleaner way:\n    boolean success = false;\n\n    Directory first;\n    Directory second;\n    if (doCacheWrite(prefix, context)) {\n      first = cacheDirectory;\n      second = in;\n    } else {\n      first = in;\n      second = cacheDirectory;\n    }\n\n    IndexOutput out = null;\n    try {\n      while (true) {\n        out = first.createTempOutput(prefix, suffix, context);\n        String name = out.getName();\n        toDelete.add(name);\n        if (slowFileExists(second, name)) {\n          out.close();\n        } else {\n          toDelete.remove(name);\n          success = true;\n          break;\n        }\n      }\n    } finally {\n      if (success) {\n        IOUtils.deleteFiles(first, toDelete);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.createTempOutput prefix=\" + prefix + \" suffix=\" + suffix);\n    }\n    Set<String> toDelete = new HashSet<>();\n\n    // This is very ugly/messy/dangerous (can in some disastrous case maybe create too many temp files), but I don't know of a cleaner way:\n    boolean success = false;\n\n    Directory first;\n    Directory second;\n    if (doCacheWrite(prefix, context)) {\n      first = cache;\n      second = in;\n    } else {\n      first = in;\n      second = cache;\n    }\n\n    IndexOutput out = null;\n    try {\n      while (true) {\n        out = first.createTempOutput(prefix, suffix, context);\n        String name = out.getName();\n        toDelete.add(name);\n        if (slowFileExists(second, name)) {\n          out.close();\n        } else {\n          toDelete.remove(name);\n          success = true;\n          break;\n        }\n      }\n    } finally {\n      if (success) {\n        IOUtils.deleteFiles(first, toDelete);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n      }\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4310e21f72d5750be78534560f7f28e2d66bf933":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["f4c0a090bfe0c54cc37384e8cb835857464f5a9f"],"f4c0a090bfe0c54cc37384e8cb835857464f5a9f":["4310e21f72d5750be78534560f7f28e2d66bf933"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"4310e21f72d5750be78534560f7f28e2d66bf933":["f4c0a090bfe0c54cc37384e8cb835857464f5a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4310e21f72d5750be78534560f7f28e2d66bf933"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4c0a090bfe0c54cc37384e8cb835857464f5a9f":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}