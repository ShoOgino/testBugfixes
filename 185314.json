{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  QueryNode q =null;\n  ParametricQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[9] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n      jj_consume_token(RANGEIN_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop1 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop1 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_TO:\n        jj_consume_token(RANGEIN_TO);\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop2 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop2 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEIN_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEIN_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEIN_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case RANGEEX_START:\n      jj_consume_token(RANGEEX_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop1 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop1 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_TO:\n        jj_consume_token(RANGEEX_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop2 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop2 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEEX_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEEX_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEEX_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[23] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  QueryNode q =null;\n  ParametricQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[9] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n      jj_consume_token(RANGEIN_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop1 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop1 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_TO:\n        jj_consume_token(RANGEIN_TO);\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop2 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop2 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEIN_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEIN_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEIN_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case RANGEEX_START:\n      jj_consume_token(RANGEEX_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop1 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop1 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_TO:\n        jj_consume_token(RANGEEX_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop2 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop2 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEEX_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEEX_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEEX_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[23] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  ParametricQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new ParametricQueryNode(field, startInc ? ParametricQueryNode.CompareOperator.GE : ParametricQueryNode.CompareOperator.GT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, endInc ? ParametricQueryNode.CompareOperator.LE : ParametricQueryNode.CompareOperator.LT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  QueryNode q =null;\n  ParametricQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[9] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n      jj_consume_token(RANGEIN_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop1 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop1 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_TO:\n        jj_consume_token(RANGEIN_TO);\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_GOOP:\n        goop2 = jj_consume_token(RANGEIN_GOOP);\n        break;\n      case RANGEIN_QUOTED:\n        goop2 = jj_consume_token(RANGEIN_QUOTED);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEIN_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEIN_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEIN_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LE,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case RANGEEX_START:\n      jj_consume_token(RANGEEX_START);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop1 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop1 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_TO:\n        jj_consume_token(RANGEEX_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEEX_GOOP:\n        goop2 = jj_consume_token(RANGEEX_GOOP);\n        break;\n      case RANGEEX_QUOTED:\n        goop2 = jj_consume_token(RANGEEX_QUOTED);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGEEX_END);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGEEX_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGEEX_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n          qLower = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.GT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, ParametricQueryNode.CompareOperator.LT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[23] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"bugIntro":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3","383e6510a01a27ea3d860472f33049ed2c766e15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  ParametricQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new ParametricQueryNode(field, startInc ? ParametricQueryNode.CompareOperator.GE : ParametricQueryNode.CompareOperator.GT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new ParametricQueryNode(field, endInc ? ParametricQueryNode.CompareOperator.LE : ParametricQueryNode.CompareOperator.LT,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new ParametricRangeQueryNode(qLower, qUpper);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b96ebf39aa5127497a01b3456891ab9a50957ce","date":1334631103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         q = new RegexpQueryNode(field, term.image, term.beginColumn, term.endColumn-1);\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0b96ebf39aa5127497a01b3456891ab9a50957ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b96ebf39aa5127497a01b3456891ab9a50957ce":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"0b96ebf39aa5127497a01b3456891ab9a50957ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["0b96ebf39aa5127497a01b3456891ab9a50957ce"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}