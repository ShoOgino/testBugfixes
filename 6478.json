{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","commits":[{"id":"c342c287203eb8daa79003afd740654bc7baa7f9","date":1527528566,"type":0,"author":"Joel","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, geometricMean),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, test),\" +\n        \"               e=setValue(c, blah, array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","sourceNew":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, \\\"geometricMean\\\"),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, \\\"test\\\"),\" +\n        \"               e=setValue(c, \\\"blah\\\", array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, geometricMean),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, test),\" +\n        \"               e=setValue(c, blah, array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","sourceNew":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, \\\"geometricMean\\\"),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, \\\"test\\\"),\" +\n        \"               e=setValue(c, \\\"blah\\\", array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, geometricMean),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, test),\" +\n        \"               e=setValue(c, blah, array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","sourceNew":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, \\\"geometricMean\\\"),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, \\\"test\\\"),\" +\n        \"               e=setValue(c, \\\"blah\\\", array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, geometricMean),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, test),\" +\n        \"               e=setValue(c, blah, array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSetAndGetValue().mjava","sourceNew":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, \\\"geometricMean\\\"),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, \\\"test\\\"),\" +\n        \"               e=setValue(c, \\\"blah\\\", array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetAndGetValue() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=describe(array(1,2,3,4,5,6,7)),\" +\n        \"               b=getValue(a, \\\"geometricMean\\\"),\" +\n        \"               c=setValue(a, \\\"test\\\", add(b, 1)),\" +\n        \"               d=getValue(c, \\\"test\\\"),\" +\n        \"               e=setValue(c, \\\"blah\\\", array(8.11,9.55,10.1)),\" +\n        \"               f=getValue(e, \\\"blah\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number mean = (Number)tuples.get(0).get(\"b\");\n    assertEquals(mean.doubleValue(), 3.3800151591412964, 0.0);\n    Number mean1 = (Number)tuples.get(0).get(\"d\");\n    assertEquals(mean1.doubleValue(), 4.3800151591412964, 0.0);\n    List<Number> vals = (List<Number>)tuples.get(0).get(\"f\");\n    assertEquals(vals.size(), 3);\n    assertEquals(vals.get(0).doubleValue(), 8.11, 0);\n    assertEquals(vals.get(1).doubleValue(), 9.55, 0);\n    assertEquals(vals.get(2).doubleValue(), 10.1, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c342c287203eb8daa79003afd740654bc7baa7f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["c342c287203eb8daa79003afd740654bc7baa7f9","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["c342c287203eb8daa79003afd740654bc7baa7f9"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c342c287203eb8daa79003afd740654bc7baa7f9","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c342c287203eb8daa79003afd740654bc7baa7f9"],"c342c287203eb8daa79003afd740654bc7baa7f9":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}