{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","commits":[{"id":"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee","date":1325135089,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"/dev/null","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee"],"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}