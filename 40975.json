{"path":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd39d49faf2a08cf569ab4087abd0e393b982263","date":1276891097,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    long used = runtime.totalMemory() - runtime.freeMemory();\n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    double percentUsed = ((double)(used)/(double)runtime.maxMemory())*100;\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    mem.add(\"free\", humanReadableUnits(runtime.freeMemory(), df));\n    mem.add(\"total\", humanReadableUnits(runtime.totalMemory(), df));\n    mem.add(\"max\", humanReadableUnits(runtime.maxMemory(), df));\n    mem.add(\"used\", humanReadableUnits(used, df) + \" (%\" + df.format(percentUsed) + \")\");\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n      // a map of names and values of all system properties.\n      //jmx.add( \"SYSTEM PROPERTIES\", mx.getSystemProperties());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bd39d49faf2a08cf569ab4087abd0e393b982263"],"c26f00b574427b55127e869b935845554afde1fa":["bd39d49faf2a08cf569ab4087abd0e393b982263","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bd39d49faf2a08cf569ab4087abd0e393b982263"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd39d49faf2a08cf569ab4087abd0e393b982263"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bd39d49faf2a08cf569ab4087abd0e393b982263":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd39d49faf2a08cf569ab4087abd0e393b982263"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bd39d49faf2a08cf569ab4087abd0e393b982263":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}