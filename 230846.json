{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1ca350a30f47355b5b27ad048195d462059727","date":1416523641,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on TopGroups (without explicit Term class) causes\n      // errors on ecj used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90294f61f1156e3708019cde37e7069bafc5151","date":1416530088,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on TopGroups (without explicit Term class) causes\n      // errors on ecj used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e40d330ea7c711163302325e49a2c3d752cbcd4","date":1416557423,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(SecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(SecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(SecondPassGroupingCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(SecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c1ca350a30f47355b5b27ad048195d462059727":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["97d4692d0c601ff773f0a2231967312428a904e4"],"d90294f61f1156e3708019cde37e7069bafc5151":["2c1ca350a30f47355b5b27ad048195d462059727"],"20e94e61fe5291647346b70437617e6b6c370408":["1e40d330ea7c711163302325e49a2c3d752cbcd4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["1e40d330ea7c711163302325e49a2c3d752cbcd4","20e94e61fe5291647346b70437617e6b6c370408"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1e40d330ea7c711163302325e49a2c3d752cbcd4":["d90294f61f1156e3708019cde37e7069bafc5151"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["85d41890f2bad879e6a04c6dd7d2cf276f973994","0837ab0472feecb3a54260729d845f839e1cbd72"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"2c1ca350a30f47355b5b27ad048195d462059727":["d90294f61f1156e3708019cde37e7069bafc5151"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d90294f61f1156e3708019cde37e7069bafc5151":["1e40d330ea7c711163302325e49a2c3d752cbcd4"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2c1ca350a30f47355b5b27ad048195d462059727"],"1e40d330ea7c711163302325e49a2c3d752cbcd4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"97d4692d0c601ff773f0a2231967312428a904e4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}