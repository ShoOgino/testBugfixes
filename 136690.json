{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","commits":[{"id":"340509d2f7de0da778f8f5f2708af1bec36ca9af","date":1343177885,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes or deprecated known-buggy ones\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        assertNotNull(TokenizerFactory.forName(clazzName.substring(0, clazzName.length() - 9)));\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.forName(simpleName));\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        assertNotNull(CharFilterFactory.forName(clazzName.substring(0, clazzName.length() - 10)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        assertNotNull(TokenizerFactory.forName(clazzName.substring(0, clazzName.length() - 9)));\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.forName(simpleName));\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        assertNotNull(CharFilterFactory.forName(clazzName.substring(0, clazzName.length() - 10)));\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes or deprecated known-buggy ones\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        assertNotNull(TokenizerFactory.forName(clazzName.substring(0, clazzName.length() - 9)));\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.forName(simpleName));\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        assertNotNull(CharFilterFactory.forName(clazzName.substring(0, clazzName.length() - 10)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9a0d6e09556972377af95a711afd2a395aee23","date":1343206911,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            assertSame(c, instance.create(new StringReader(\"\")).getClass());\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n            // only check instance if factory have wrapped at all!\n            if (KeywordTokenizer.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n            // only check instance if factory have wrapped at all!\n            if (StringReader.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        assertNotNull(TokenizerFactory.forName(clazzName.substring(0, clazzName.length() - 9)));\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.forName(simpleName));\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        assertNotNull(CharFilterFactory.forName(clazzName.substring(0, clazzName.length() - 10)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            assertSame(c, instance.create(new StringReader(\"\")).getClass());\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n            // only check instance if factory have wrapped at all!\n            if (KeywordTokenizer.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n            // only check instance if factory have wrapped at all!\n            if (StringReader.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            assertSame(c, instance.create(new StringReader(\"\")).getClass());\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n            // only check instance if factory have wrapped at all!\n            if (KeywordTokenizer.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n            // only check instance if factory have wrapped at all!\n            if (StringReader.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            assertSame(c, instance.create(new StringReader(\"\")).getClass());\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n            // only check instance if factory have wrapped at all!\n            if (KeywordTokenizer.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n            // only check instance if factory have wrapped at all!\n            if (StringReader.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (InitializationException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e3438f3decfd589a4b727706af6e7f505ad1318","date":1343399095,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            assertSame(c, instance.create(new StringReader(\"\")).getClass());\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n            // only check instance if factory have wrapped at all!\n            if (KeywordTokenizer.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          // TODO: provide fake ResourceLoader\n          if (!(instance instanceof ResourceLoaderAware)) {\n            Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n            // only check instance if factory have wrapped at all!\n            if (StringReader.class != createdClazz) {\n              assertSame(c, createdClazz);\n            }\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works, some require ResourceLoader\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba781c85445e8d9544105ba6c4c34b5f4219752","date":1344816119,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = new ArrayList<Class<?>>();\n    TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\", analysisClasses);\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = TokenizerFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = TokenFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = CharFilterFactory.forName(simpleName);\n        assertNotNull(instance);\n        try {\n          instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n          instance.init(Collections.<String,String>emptyMap());\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create(new StringReader(\"\")).getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer(new StringReader(\"\"))).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89","date":1398366962,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b6957255b59d917c3c4d228f3a7554f4c3596d6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6957255b59d917c3c4d228f3a7554f4c3596d6b","date":1398371605,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\") || e.getMessage().contains(\"does not exist\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":["c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (!e.getMessage().contains(\"SPI\")) {\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", TEST_VERSION_CURRENT.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1632b4d5778907f39ce8f1aeca85916e8822afc8","date":1447184812,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || tokenFiltersWithoutFactory.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n\n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n      \n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c94e8a877b2ee8a652f226cdf7e6edf34cffcb","date":1451957632,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories#test().mjava","sourceNew":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || tokenFiltersWithoutFactory.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n\n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    List<Class<?>> analysisClasses = TestRandomChains.getClassesForPackage(\"org.apache.lucene.analysis\");\n    \n    for (final Class<?> c : analysisClasses) {\n      final int modifiers = c.getModifiers();\n      if (\n        // don't waste time with abstract classes\n        Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)\n        || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()\n        || testComponents.contains(c)\n        || crazyComponents.contains(c)\n        || oddlyNamedComponents.contains(c)\n        || tokenFiltersWithoutFactory.contains(c)\n        || c.isAnnotationPresent(Deprecated.class) // deprecated ones are typically back compat hacks\n        || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))\n      ) {\n        continue;\n      }\n\n      Map<String,String> args = new HashMap<>();\n      args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n      \n      if (Tokenizer.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Tokenizer\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 9);\n        assertNotNull(TokenizerFactory.lookupClass(simpleName));\n        TokenizerFactory instance = null;\n        try {\n          instance = TokenizerFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          assertSame(c, instance.create().getClass());\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (TokenFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"Filter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith(\"TokenFilter\") ? 11 : 6));\n        assertNotNull(TokenFilterFactory.lookupClass(simpleName));\n        TokenFilterFactory instance = null; \n        try {\n          instance = TokenFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends TokenStream> createdClazz = instance.create(new KeywordTokenizer()).getClass();\n          // only check instance if factory have wrapped at all!\n          if (KeywordTokenizer.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      } else if (CharFilter.class.isAssignableFrom(c)) {\n        String clazzName = c.getSimpleName();\n        assertTrue(clazzName.endsWith(\"CharFilter\"));\n        String simpleName = clazzName.substring(0, clazzName.length() - 10);\n        assertNotNull(CharFilterFactory.lookupClass(simpleName));\n        CharFilterFactory instance = null;\n        try {\n          instance = CharFilterFactory.forName(simpleName, args);\n          assertNotNull(instance);\n          if (instance instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) instance).inform(loader);\n          }\n          Class<? extends Reader> createdClazz = instance.create(new StringReader(\"\")).getClass();\n          // only check instance if factory have wrapped at all!\n          if (StringReader.class != createdClazz) {\n            assertSame(c, createdClazz);\n          }\n        } catch (IllegalArgumentException e) {\n          if (e.getCause() instanceof NoSuchMethodException) {\n            // there is no corresponding ctor available\n            throw e;\n          }\n          // TODO: For now pass because some factories have not yet a default config that always works\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6957255b59d917c3c4d228f3a7554f4c3596d6b"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cf9a0d6e09556972377af95a711afd2a395aee23":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["0ba781c85445e8d9544105ba6c4c34b5f4219752"],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["1e3438f3decfd589a4b727706af6e7f505ad1318"],"340509d2f7de0da778f8f5f2708af1bec36ca9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf9a0d6e09556972377af95a711afd2a395aee23"],"19e497fe4da591a79332da97681b8017d9c61165":["b6957255b59d917c3c4d228f3a7554f4c3596d6b"],"c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e3438f3decfd589a4b727706af6e7f505ad1318"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"1e3438f3decfd589a4b727706af6e7f505ad1318":["f6f80818731469e00f54165ec94aae2db868ea05"],"b6957255b59d917c3c4d228f3a7554f4c3596d6b":["c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e3438f3decfd589a4b727706af6e7f505ad1318"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["340509d2f7de0da778f8f5f2708af1bec36ca9af"],"1632b4d5778907f39ce8f1aeca85916e8822afc8":["19e497fe4da591a79332da97681b8017d9c61165"],"d4c94e8a877b2ee8a652f226cdf7e6edf34cffcb":["1632b4d5778907f39ce8f1aeca85916e8822afc8"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["aba371508186796cc6151d8223a5b4e16d02e26e","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4c94e8a877b2ee8a652f226cdf7e6edf34cffcb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cf9a0d6e09556972377af95a711afd2a395aee23":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"340509d2f7de0da778f8f5f2708af1bec36ca9af":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"19e497fe4da591a79332da97681b8017d9c61165":["1632b4d5778907f39ce8f1aeca85916e8822afc8"],"c663d92fe29a31ebe7c8c3cd3f188aeabf93ac89":["b6957255b59d917c3c4d228f3a7554f4c3596d6b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"1e3438f3decfd589a4b727706af6e7f505ad1318":["0ba781c85445e8d9544105ba6c4c34b5f4219752","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b6957255b59d917c3c4d228f3a7554f4c3596d6b":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","19e497fe4da591a79332da97681b8017d9c61165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["340509d2f7de0da778f8f5f2708af1bec36ca9af","5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"f6f80818731469e00f54165ec94aae2db868ea05":["1e3438f3decfd589a4b727706af6e7f505ad1318"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["cf9a0d6e09556972377af95a711afd2a395aee23"],"1632b4d5778907f39ce8f1aeca85916e8822afc8":["d4c94e8a877b2ee8a652f226cdf7e6edf34cffcb"],"d4c94e8a877b2ee8a652f226cdf7e6edf34cffcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}