{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","commits":[{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["f2425308ebcd91b538a601df94ae1551ccaab2bb","a7035935aa89f6951286e9005cbeb16e89a082a2"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7035935aa89f6951286e9005cbeb16e89a082a2"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a7035935aa89f6951286e9005cbeb16e89a082a2":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a7035935aa89f6951286e9005cbeb16e89a082a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}