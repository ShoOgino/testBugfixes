{"path":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978de4e2d23054c6624dd5928ddeb734dca68eec","date":1370592803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#finishDocument().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finishDocument() throws IOException {\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["978de4e2d23054c6624dd5928ddeb734dca68eec","52c7e49be259508735752fba88085255014a6ecf"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["978de4e2d23054c6624dd5928ddeb734dca68eec","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52c7e49be259508735752fba88085255014a6ecf":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}