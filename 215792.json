{"path":"src/java/org/apache/solr/update/processor/ChainedUpdateProcessorFactory#init(Node).mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/ChainedUpdateProcessorFactory#init(Node).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init( Node node ) {\n    final ArrayList<UpdateRequestProcessorFactory> factories = new ArrayList<UpdateRequestProcessorFactory>();\n    if( node != null ) {\n      // Load and initialize the plugin chain\n      AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n          = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"processor chain\", false, false ) {\n        @Override\n        protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n          plugin.init( node );\n        }\n  \n        @Override\n        protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n          factories.add( plugin );\n          return null;\n        }\n      };\n      \n      XPath xpath = XPathFactory.newInstance().newXPath();\n      try {\n        loader.load( (NodeList) xpath.evaluate( \"chain\", node, XPathConstants.NODESET ) );\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Error loading processor chain: \" + node,e,false);\n      }\n    }\n    \n    // If not configured, make sure it has the default settings\n    if( factories.size() < 1 ) {\n      factories.add( new RunUpdateProcessorFactory() );\n      factories.add( new LogUpdateProcessorFactory() );\n    }\n    factory = factories.toArray( new UpdateRequestProcessorFactory[factories.size()] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/ChainedUpdateProcessorFactory#init(SolrCore,Node).mjava","pathOld":"src/java/org/apache/solr/update/processor/ChainedUpdateProcessorFactory#init(Node).mjava","sourceNew":"  @Override\n  public void init( final SolrCore core, final Node node ) {\n    final ArrayList<UpdateRequestProcessorFactory> factories = new ArrayList<UpdateRequestProcessorFactory>();\n    if( node != null ) {\n      // Load and initialize the plugin chain\n      AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n          = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"processor chain\", false, false ) {\n        @Override\n        protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n          plugin.init( core, node );\n        }\n  \n        @Override\n        protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n          factories.add( plugin );\n          return null;\n        }\n      };\n      \n      XPath xpath = XPathFactory.newInstance().newXPath();\n      try {\n        loader.load( core.getSolrConfig(), (NodeList) xpath.evaluate( \"chain\", node, XPathConstants.NODESET ) );\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Error loading processor chain: \" + node,e,false);\n      }\n    }\n    \n    // If not configured, make sure it has the default settings\n    if( factories.size() < 1 ) {\n      factories.add( new RunUpdateProcessorFactory() );\n      factories.add( new LogUpdateProcessorFactory() );\n    }\n    factory = factories.toArray( new UpdateRequestProcessorFactory[factories.size()] );\n  }\n\n","sourceOld":"  @Override\n  public void init( Node node ) {\n    final ArrayList<UpdateRequestProcessorFactory> factories = new ArrayList<UpdateRequestProcessorFactory>();\n    if( node != null ) {\n      // Load and initialize the plugin chain\n      AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n          = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"processor chain\", false, false ) {\n        @Override\n        protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n          plugin.init( node );\n        }\n  \n        @Override\n        protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n          factories.add( plugin );\n          return null;\n        }\n      };\n      \n      XPath xpath = XPathFactory.newInstance().newXPath();\n      try {\n        loader.load( (NodeList) xpath.evaluate( \"chain\", node, XPathConstants.NODESET ) );\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Error loading processor chain: \" + node,e,false);\n      }\n    }\n    \n    // If not configured, make sure it has the default settings\n    if( factories.size() < 1 ) {\n      factories.add( new RunUpdateProcessorFactory() );\n      factories.add( new LogUpdateProcessorFactory() );\n    }\n    factory = factories.toArray( new UpdateRequestProcessorFactory[factories.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6589002090bd74db749eef5befe2f447c0e3dd49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}