{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","commits":[{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, info.getDelGen());\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        return new FixedBitSet(data, length);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dcbd1c5c87f332c2d56a197b2db988c2c17088c","date":1411744749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        return new FixedBitSet(data, length);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, info.getDelGen());\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        return new FixedBitSet(data, length);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","date":1411813593,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        return new FixedBitSet(data, length);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78b813d9350cc28625598f6dbbb49b586a40618","date":1412073147,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId(), \"\");\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId(), \"\");\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId());\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId(), \"\");\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, info.info.getId(), \"\");\n        long filegen = input.readLong();\n        if (gen != filegen) {\n          throw new CorruptIndexException(\"file mismatch, expected generation=\" + gen + \", got=\" + filegen, input);\n        }\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.maxDoc();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.maxDoc();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.maxDoc();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.getDocCount();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"858adca70b05a27f5e0996d8d62c95172b695210","date":1526486059,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.maxDoc();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs.asReadOnlyBits();\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    long gen = info.getDelGen();\n    String name = IndexFileNames.fileNameFromGeneration(info.info.name, EXTENSION, gen);\n    final int length = info.info.maxDoc();\n    try (ChecksumIndexInput input = dir.openChecksumInput(name, context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(input, CODEC_NAME, VERSION_START, VERSION_CURRENT, \n                                     info.info.getId(), Long.toString(gen, Character.MAX_RADIX));\n        long data[] = new long[FixedBitSet.bits2words(length)];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = input.readLong();\n        }\n        FixedBitSet fbs = new FixedBitSet(data, length);\n        if (fbs.length() - fbs.cardinality() != info.getDelCount()) {\n          throw new CorruptIndexException(\"bits.deleted=\" + (fbs.length() - fbs.cardinality()) + \n                                          \" info.delcount=\" + info.getDelCount(), input);\n        }\n        return fbs;\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n    }\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0267c69e2456a3477a1ad785723f2135da3117e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1dcbd1c5c87f332c2d56a197b2db988c2c17088c"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a78b813d9350cc28625598f6dbbb49b586a40618"],"b11b097f011a298f1a54676482032c2b261e26f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":["1dcbd1c5c87f332c2d56a197b2db988c2c17088c","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a78b813d9350cc28625598f6dbbb49b586a40618":["a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["5f6bd27530a2846413fe2d00030493c0e2d3a072","a78b813d9350cc28625598f6dbbb49b586a40618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1dcbd1c5c87f332c2d56a197b2db988c2c17088c":["b11b097f011a298f1a54676482032c2b261e26f3"],"858adca70b05a27f5e0996d8d62c95172b695210":["b0267c69e2456a3477a1ad785723f2135da3117e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["858adca70b05a27f5e0996d8d62c95172b695210"]},"commit2Childs":{"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","858adca70b05a27f5e0996d8d62c95172b695210"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a4f5b5d0516cf5176e9577e3adaeda6803f3b76e","9bb9a29a5e71a90295f175df8919802993142c9a"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"b11b097f011a298f1a54676482032c2b261e26f3":["1dcbd1c5c87f332c2d56a197b2db988c2c17088c"],"a4f5b5d0516cf5176e9577e3adaeda6803f3b76e":["a78b813d9350cc28625598f6dbbb49b586a40618"],"a78b813d9350cc28625598f6dbbb49b586a40618":["3384e6013a93e4d11b7d75388693f8d0388602bf","9bb9a29a5e71a90295f175df8919802993142c9a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"1dcbd1c5c87f332c2d56a197b2db988c2c17088c":["5f6bd27530a2846413fe2d00030493c0e2d3a072","a4f5b5d0516cf5176e9577e3adaeda6803f3b76e"],"858adca70b05a27f5e0996d8d62c95172b695210":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}