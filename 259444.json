{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","commits":[{"id":"8fb90b6f156f755246cc924556ceb4bbdba7c2a7","date":1520449097,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","sourceNew":"  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","sourceOld":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n//    CollectionAdminRequest.CollectionProp collectionProp = CollectionAdminRequest.setCollectionProperty(\"mycoll\", \"prop\", \"value\");\n//    v2r = V1toV2ApiMapper.convert(collectionProp).build();\n//    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n//    assertEquals(\"/c\", v2r.getPath());\n//    assertEquals(\"mycoll\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"prop\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"value\", Utils.getObjectByPath(m,true,\"/set-collection-property/value\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","sourceOld":"  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}