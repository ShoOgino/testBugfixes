{"path":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","commits":[{"id":"468a7e3c19d10daec4ebe38459faa9a99706ab0a","date":1288996309,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource[StrField]#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          return termsIndex.lookup(ord, new BytesRef()).utf8ToString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["468a7e3c19d10daec4ebe38459faa9a99706ab0a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","468a7e3c19d10daec4ebe38459faa9a99706ab0a"],"468a7e3c19d10daec4ebe38459faa9a99706ab0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","468a7e3c19d10daec4ebe38459faa9a99706ab0a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","468a7e3c19d10daec4ebe38459faa9a99706ab0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"468a7e3c19d10daec4ebe38459faa9a99706ab0a":["c220849f876de24a79f756f65b3eb045db59f63f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}