{"path":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect <!field f=field>value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\nSystem.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed9977f1cdec244969bc4f5054a6041028238bf","date":1209503245,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect <!field f=field>value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\nSystem.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4db78c8781346b675fa5f1a6db8adcb96889c2ca","date":1213723536,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ab02b73dc61b51bca98e09b5b72926c4580ecb","date":1213987100,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e69935771ba8cb2303a86bf8a42be7861eaf1da","date":1216694040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.rsp.getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.facets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.topFacets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_queries = (NamedList)facet_counts.get(\"facet_queries\");\n\n      // These are single term queries used to fill in missing counts\n      // for facet.field queries\n      for (int i=0; i<facet_queries.size(); i++) {\n        try {\n          \n          String facet_q = (String)facet_queries.getName(i);\n          long count = ((Number)facet_queries.getVal(i)).longValue();\n\n          // expect {!field f=field}value style params\n          SolrParams qparams = QueryParsing.getLocalParams(facet_q,null);\n          if (qparams == null) continue;  // not a refinement\n          String field = qparams.get(QueryParsing.F);\n          String val = qparams.get(QueryParsing.V);\n\n          // Find the right field.facet for this field\n          DistribFieldFacet dff = fi.facets.get(field);\n          if (dff == null) continue;  // maybe this wasn't for facet count refinement\n\n          // Find the right constraint count for this value\n          ShardFacetCount sfc = dff.counts.get(val);\n\n          if (sfc == null) {\n            continue;\n            // Just continue, since other components might have added\n            // this facet.query for other purposes.  But if there are charset\n            // issues then the values coming back may not match the values sent.\n          }\n\n// TODO REMOVE\n// System.out.println(\"Got \" + facet_q + \" , refining count: \" + sfc + \" += \" + count);\n\n          sfc.count += count;\n\n        } catch (ParseException e) {\n          // shouldn't happen, so fail for now rather than covering it up\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["718ab708b1705aae7831111fcddfc834665eee61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4db78c8781346b675fa5f1a6db8adcb96889c2ca":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"718ab708b1705aae7831111fcddfc834665eee61":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ab02b73dc61b51bca98e09b5b72926c4580ecb":["4db78c8781346b675fa5f1a6db8adcb96889c2ca"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["a1ab02b73dc61b51bca98e09b5b72926c4580ecb"],"ad94625fb8d088209f46650c8097196fec67f00c":["718ab708b1705aae7831111fcddfc834665eee61"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4db78c8781346b675fa5f1a6db8adcb96889c2ca":["a1ab02b73dc61b51bca98e09b5b72926c4580ecb"],"718ab708b1705aae7831111fcddfc834665eee61":["ad94625fb8d088209f46650c8097196fec67f00c"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["4db78c8781346b675fa5f1a6db8adcb96889c2ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ab02b73dc61b51bca98e09b5b72926c4580ecb":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["718ab708b1705aae7831111fcddfc834665eee61"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}