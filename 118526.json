{"path":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["a05409176bd65129d67a785ee70e881e238a9aef"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}