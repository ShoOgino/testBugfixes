{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"205f0e81aafd8115e4cd61788ef9e7a6476aa175","date":1530097523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","date":1537441025,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"LowerCase\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/classic/TestClassicFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":6,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestCoreFactories#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Standard\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Whitespace\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Letter\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"ASCIIFolding\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Classic\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["205f0e81aafd8115e4cd61788ef9e7a6476aa175"],"205f0e81aafd8115e4cd61788ef9e7a6476aa175":["05fe562aa248790944d43cdd478f512572835ba0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["05fe562aa248790944d43cdd478f512572835ba0","205f0e81aafd8115e4cd61788ef9e7a6476aa175"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["05fe562aa248790944d43cdd478f512572835ba0","205f0e81aafd8115e4cd61788ef9e7a6476aa175"]},"commit2Childs":{"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"205f0e81aafd8115e4cd61788ef9e7a6476aa175":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"05fe562aa248790944d43cdd478f512572835ba0":["205f0e81aafd8115e4cd61788ef9e7a6476aa175","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}