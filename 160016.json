{"path":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testCustomRules().mjava","commits":[{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de_DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de_DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de_DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de_DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}