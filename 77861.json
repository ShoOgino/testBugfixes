{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase();\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = 1f;\n    } else {\n      aux = (float) (aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = 1f;\n    } else {\n      aux = (float) (aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getAndIncrement(String).mjava","sourceNew":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = 1f;\n    } else {\n      aux = (float) (aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the <code>Float</code> indexed by key, increment it by one unit\n   * and store the new <code>Float</code>.\n   * \n   *@param key\n   *          A <code>String</code> index.\n   *@return The <code>Float</code> retrieved from the Ternary Search Trie.\n   */\n  public Float getAndIncrement(String key) {\n    String key2 = key.trim().toLowerCase(locale);\n    TSTNode node = getNode(key2);\n    if (node == null) {\n      return null;\n    }\n    Float aux = (Float) (node.data);\n    if (aux == null) {\n      aux = new Float(1);\n    } else {\n      aux = new Float(aux.intValue() + 1);\n    }\n    put(key2, aux);\n    return aux;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2acf500f78aa12b92e371fd89c719291986b6b90","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec57145e34263e28da6b82568e35471f7d67df69"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["2acf500f78aa12b92e371fd89c719291986b6b90","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","628903f37b6c442da0d390db1c6af9a0e74d41a7","46d8ada1fff8d18cb197c38c7983225162599948"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}