{"path":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#addTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#addTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#addRaw(long)}.\n     */\n    @Test\n    public void addTest() {\n        { // insert an element with register value 1 (minimum set value)\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert an element with register value 31 (maximum set value)\n            final int registerIndex = 0;\n            final int registerValue = 31;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert an element that could overflow the register (past 31)\n            final int registerIndex = 0;\n            final int registerValue = 36;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, (short)registerIndex, (byte)31/*register max*/);\n        }\n        { // insert duplicate elements, observe no change\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert elements that increase a register's value\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            final int registerValue2 = 2;\n            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);\n            hll.addRaw(rawValue2);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue2);\n        }\n        { // insert elements that have lower register values, observe no change\n            final int registerIndex = 0;\n            final int registerValue = 2;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            final int registerValue2 = 1;\n            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);\n            hll.addRaw(rawValue2);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#addTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#addRaw(long)}.\n     */\n    @Test\n    public void addTest() {\n        { // insert an element with register value 1 (minimum set value)\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert an element with register value 31 (maximum set value)\n            final int registerIndex = 0;\n            final int registerValue = 31;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert an element that could overflow the register (past 31)\n            final int registerIndex = 0;\n            final int registerValue = 36;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, (short)registerIndex, (byte)31/*register max*/);\n        }\n        { // insert duplicate elements, observe no change\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n            hll.addRaw(rawValue);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n        { // insert elements that increase a register's value\n            final int registerIndex = 0;\n            final int registerValue = 1;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            final int registerValue2 = 2;\n            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);\n            hll.addRaw(rawValue2);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue2);\n        }\n        { // insert elements that have lower register values, observe no change\n            final int registerIndex = 0;\n            final int registerValue = 2;\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);\n\n            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);\n            hll.addRaw(rawValue);\n\n            final int registerValue2 = 1;\n            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);\n            hll.addRaw(rawValue2);\n\n            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}