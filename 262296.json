{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestDynamicFieldResource#testGetDynamicField().mjava","sourceNew":"  @Test\n  public void testGetDynamicField() throws Exception {\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='dynamicField']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicField']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='docValues'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDynamicField() throws Exception {\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicfield']) = 1\",\n            \"/response/lst[@name='dynamicfield']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicfield']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='docValues'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicfield']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"916d12fb9e9ce37001f3f330a247d552279db234","date":1500400223,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","sourceNew":"  @Test\n  public void testGetDynamicField() throws Exception {\n    final boolean expectedDocValues = Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP);\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='dynamicField']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicField']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='docValues'] = '\"+expectedDocValues+\"'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDynamicField() throws Exception {\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='dynamicField']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicField']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='docValues'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestDynamicFieldResource#testGetDynamicField().mjava","sourceNew":"  @Test\n  public void testGetDynamicField() throws Exception {\n    final boolean expectedDocValues = Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP);\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='dynamicField']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicField']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='docValues'] = '\"+expectedDocValues+\"'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDynamicField() throws Exception {\n    assertQ(\"/schema/dynamicfields/*_i?indent=on&wt=xml&showDefaults=on\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='dynamicField']/str[@name='name'] = '*_i'\",\n            \"/response/lst[@name='dynamicField']/str[@name='type'] = 'int'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='indexed'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='stored'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='docValues'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termVectors'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='termOffsets'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitNorms'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitTermFreqAndPositions'] = 'true'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='omitPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='storeOffsetsWithPositions'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='multiValued'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='required'] = 'false'\",\n            \"/response/lst[@name='dynamicField']/bool[@name='tokenized'] = 'false'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","916d12fb9e9ce37001f3f330a247d552279db234"],"916d12fb9e9ce37001f3f330a247d552279db234":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["916d12fb9e9ce37001f3f330a247d552279db234"]},"commit2Childs":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["936cdd5882761db3b844afd6f84ab81cbb011a75","916d12fb9e9ce37001f3f330a247d552279db234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"916d12fb9e9ce37001f3f330a247d552279db234":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}