{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#computeBlockStats().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#computeBlockStats().mjava","pathOld":"/dev/null","sourceNew":"      /** Runs next() through the entire terms dict,\n       *  computing aggregate statistics. */\n      public Stats computeBlockStats() throws IOException {\n\n        Stats stats = new Stats(segment, fieldInfo.name);\n        if (index != null) {\n          stats.indexNodeCount = index.getNodeCount();\n          stats.indexArcCount = index.getArcCount();\n          stats.indexNumBytes = index.sizeInBytes();\n        }\n        \n        currentFrame = staticFrame;\n        FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n\n        // Empty string prefix must have an output in the\n        // index!\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.fpOrig = currentFrame.fp;\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n\n        stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n        allTerms:\n        while (true) {\n\n          // Pop finished blocks\n          while (currentFrame.nextEnt == currentFrame.entCount) {\n            stats.endBlock(currentFrame);\n            if (!currentFrame.isLastInFloor) {\n              currentFrame.loadNextFloorBlock();\n              stats.startBlock(currentFrame, true);\n            } else {\n              if (currentFrame.ord == 0) {\n                break allTerms;\n              }\n              final long lastFP = currentFrame.fpOrig;\n              currentFrame = stack[currentFrame.ord-1];\n              assert lastFP == currentFrame.lastSubFP;\n              // if (DEBUG) {\n              //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n              // }\n            }\n          }\n\n          while(true) {\n            if (currentFrame.next()) {\n              // Push to new block:\n              currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n              currentFrame.fpOrig = currentFrame.fp;\n              // This is a \"next\" frame -- even if it's\n              // floor'd we must pretend it isn't so we don't\n              // try to scan to the right floor frame:\n              currentFrame.isFloor = false;\n              //currentFrame.hasTerms = true;\n              currentFrame.loadBlock();\n              stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n            } else {\n              stats.term(term);\n              break;\n            }\n          }\n        }\n\n        stats.finish();\n\n        // Put root frame back:\n        currentFrame = staticFrame;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.rewind();\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        term.length = 0;\n\n        return stats;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#computeBlockStats().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#computeBlockStats().mjava","sourceNew":"      /** Runs next() through the entire terms dict,\n       *  computing aggregate statistics. */\n      public Stats computeBlockStats() throws IOException {\n\n        Stats stats = new Stats(segment, fieldInfo.name);\n        if (index != null) {\n          stats.indexNodeCount = index.getNodeCount();\n          stats.indexArcCount = index.getArcCount();\n          stats.indexNumBytes = index.sizeInBytes();\n        }\n        \n        currentFrame = staticFrame;\n        FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n\n        // Empty string prefix must have an output in the\n        // index!\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.fpOrig = currentFrame.fp;\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n\n        stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n        allTerms:\n        while (true) {\n\n          // Pop finished blocks\n          while (currentFrame.nextEnt == currentFrame.entCount) {\n            stats.endBlock(currentFrame);\n            if (!currentFrame.isLastInFloor) {\n              currentFrame.loadNextFloorBlock();\n              stats.startBlock(currentFrame, true);\n            } else {\n              if (currentFrame.ord == 0) {\n                break allTerms;\n              }\n              final long lastFP = currentFrame.fpOrig;\n              currentFrame = stack[currentFrame.ord-1];\n              assert lastFP == currentFrame.lastSubFP;\n              // if (DEBUG) {\n              //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n              // }\n            }\n          }\n\n          while(true) {\n            if (currentFrame.next()) {\n              // Push to new block:\n              currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n              currentFrame.fpOrig = currentFrame.fp;\n              // This is a \"next\" frame -- even if it's\n              // floor'd we must pretend it isn't so we don't\n              // try to scan to the right floor frame:\n              currentFrame.isFloor = false;\n              //currentFrame.hasTerms = true;\n              currentFrame.loadBlock();\n              stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n            } else {\n              stats.term(term);\n              break;\n            }\n          }\n        }\n\n        stats.finish();\n\n        // Put root frame back:\n        currentFrame = staticFrame;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.rewind();\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        term.length = 0;\n\n        return stats;\n      }\n\n","sourceOld":"      /** Runs next() through the entire terms dict,\n       *  computing aggregate statistics. */\n      public Stats computeBlockStats() throws IOException {\n\n        Stats stats = new Stats(segment, fieldInfo.name);\n        if (index != null) {\n          stats.indexNodeCount = index.getNodeCount();\n          stats.indexArcCount = index.getArcCount();\n          stats.indexNumBytes = index.sizeInBytes();\n        }\n        \n        currentFrame = staticFrame;\n        FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n\n        // Empty string prefix must have an output in the\n        // index!\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.fpOrig = currentFrame.fp;\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n\n        stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n\n        allTerms:\n        while (true) {\n\n          // Pop finished blocks\n          while (currentFrame.nextEnt == currentFrame.entCount) {\n            stats.endBlock(currentFrame);\n            if (!currentFrame.isLastInFloor) {\n              currentFrame.loadNextFloorBlock();\n              stats.startBlock(currentFrame, true);\n            } else {\n              if (currentFrame.ord == 0) {\n                break allTerms;\n              }\n              final long lastFP = currentFrame.fpOrig;\n              currentFrame = stack[currentFrame.ord-1];\n              assert lastFP == currentFrame.lastSubFP;\n              // if (DEBUG) {\n              //   System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n              // }\n            }\n          }\n\n          while(true) {\n            if (currentFrame.next()) {\n              // Push to new block:\n              currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n              currentFrame.fpOrig = currentFrame.fp;\n              // This is a \"next\" frame -- even if it's\n              // floor'd we must pretend it isn't so we don't\n              // try to scan to the right floor frame:\n              currentFrame.isFloor = false;\n              //currentFrame.hasTerms = true;\n              currentFrame.loadBlock();\n              stats.startBlock(currentFrame, !currentFrame.isLastInFloor);\n            } else {\n              stats.term(term);\n              break;\n            }\n          }\n        }\n\n        stats.finish();\n\n        // Put root frame back:\n        currentFrame = staticFrame;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.rewind();\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        term.length = 0;\n\n        return stats;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}