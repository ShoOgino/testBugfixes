{"path":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":["56da903869515527852ee21ea7ef7bfe414cd40d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1ec890fad2ea96317f4429e0aa0085bb25673641","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"1ec890fad2ea96317f4429e0aa0085bb25673641":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}