{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(coll, clusterState);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8b81868c96ab084d96d4589dd330753c529bc450"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b81868c96ab084d96d4589dd330753c529bc450","date":1435652870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(coll, clusterState);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(coll, clusterState);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(coll, clusterState);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(coll, clusterState);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection.getName());\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection.getName());\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName = Assign.assignNode(collection);\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection.getName());\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(zkStateReader.getZkClient(), collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignCoreNodeName(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignNode(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignCoreNodeName(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)), coll, slice);\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignCoreNodeName(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignCoreNodeName(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)), coll, slice);\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplica(ClusterState clusterState, ZkNodeProps message) {\n    log.info(\"createReplica() {} \", message);\n    String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(coll);\n    Slice sl = collection.getSlice(slice);\n    if (sl == null) {\n      log.error(\"Invalid Collection/Slice {}/{} \", coll, slice);\n      return ZkStateWriter.NO_OP;\n    }\n    String coreNodeName;\n    if (message.getStr(ZkStateReader.CORE_NODE_NAME_PROP) != null) {\n      coreNodeName = message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);\n    } else {\n      coreNodeName = Assign.assignCoreNodeName(stateManager, collection);\n    }\n    Replica replica = new Replica(coreNodeName,\n        makeMap(\n            ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n            ZkStateReader.BASE_URL_PROP, message.getStr(ZkStateReader.BASE_URL_PROP),\n            ZkStateReader.STATE_PROP, message.getStr(ZkStateReader.STATE_PROP),\n            ZkStateReader.NODE_NAME_PROP, message.getStr(ZkStateReader.NODE_NAME_PROP), \n            ZkStateReader.REPLICA_TYPE, message.get(ZkStateReader.REPLICA_TYPE)));\n    return new ZkWriteCommand(coll, updateReplica(collection, sl, replica.getName(), replica));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6681d02f2302c363be938426e68f8dfd090cc1bf"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"61c45e99cf6676da48f19d7511c73712ad39402b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"8b81868c96ab084d96d4589dd330753c529bc450":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["61c45e99cf6676da48f19d7511c73712ad39402b"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["8b81868c96ab084d96d4589dd330753c529bc450","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["8b81868c96ab084d96d4589dd330753c529bc450"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","61c45e99cf6676da48f19d7511c73712ad39402b"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["9f100e4a037a938ee4b027674f1ca80fc208badf","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"61c45e99cf6676da48f19d7511c73712ad39402b":["9f100e4a037a938ee4b027674f1ca80fc208badf","e9017cf144952056066919f1ebc7897ff9bd71b1"],"8b81868c96ab084d96d4589dd330753c529bc450":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["8b81868c96ab084d96d4589dd330753c529bc450"],"a52341299179de5479672f7cf518bf4b173f34b3":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}