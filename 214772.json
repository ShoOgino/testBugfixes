{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    } else {\n      multipartUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2048 );\n      \n      formUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@formdataUploadLimitInKB\", 2048 );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", true ); \n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    } else {\n      multipartUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2048 );\n      \n      formUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@formdataUploadLimitInKB\", 2048 );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", true ); \n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083989a09fa84d64a9c05af07775ff9cec83c4bd","date":1366649056,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n      addHttpRequestToContext = false;\n    } else {\n      multipartUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2048 );\n      \n      formUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@formdataUploadLimitInKB\", 2048 );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", true ); \n      \n      addHttpRequestToContext = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@addHttpRequestToContext\", false ); \n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    } else {\n      multipartUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2048 );\n      \n      formUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@formdataUploadLimitInKB\", 2048 );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", true ); \n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43fbcd532bdc735ef51c6d46a5f7f0e5bc761cec","date":1389843994,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( SolrConfig globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n      addHttpRequestToContext = false;\n    } else {\n      multipartUploadLimitKB = globalConfig.getMultipartUploadLimitKB();\n      \n      formUploadLimitKB = globalConfig.getFormUploadLimitKB();\n      \n      enableRemoteStreams = globalConfig.isEnableRemoteStreams();\n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.isHandleSelect();\n      \n      addHttpRequestToContext = globalConfig.isAddHttpRequestToContext();\n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","sourceOld":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everything with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig ) {\n    final int multipartUploadLimitKB, formUploadLimitKB;\n    if( globalConfig == null ) {\n      multipartUploadLimitKB = formUploadLimitKB = Integer.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n      addHttpRequestToContext = false;\n    } else {\n      multipartUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2048 );\n      \n      formUploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@formdataUploadLimitInKB\", 2048 );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", true ); \n      \n      addHttpRequestToContext = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@addHttpRequestToContext\", false ); \n    }\n    init(multipartUploadLimitKB, formUploadLimitKB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["c26f00b574427b55127e869b935845554afde1fa"],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"43fbcd532bdc735ef51c6d46a5f7f0e5bc761cec":["083989a09fa84d64a9c05af07775ff9cec83c4bd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43fbcd532bdc735ef51c6d46a5f7f0e5bc761cec"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","083989a09fa84d64a9c05af07775ff9cec83c4bd"],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["43fbcd532bdc735ef51c6d46a5f7f0e5bc761cec"],"43fbcd532bdc735ef51c6d46a5f7f0e5bc761cec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}