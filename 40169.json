{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Row#addReplica(String,String).mjava","sourceNew":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(\"\"+new Random().nextInt(10000)+10000 , new HashMap<>()));\n    return row;\n\n\n  }\n\n","sourceOld":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(\"\"+new Random().nextInt(10000)+10000 , new HashMap<>()));\n    return row;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(coll,shard,\"\"+new Random().nextInt(1000)+1000 , new HashMap<>()));\n    return row;\n\n  }\n\n","sourceOld":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(\"\"+new Random().nextInt(10000)+10000 , new HashMap<>()));\n    return row;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070f4513c7b9fb42b83f9c863b917c96c58397f2","date":1494234201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(\"\"+new Random().nextInt(1000)+1000,coll,shard, new HashMap<>()));\n    return row;\n\n  }\n\n","sourceOld":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(coll,shard,\"\"+new Random().nextInt(1000)+1000 , new HashMap<>()));\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null) c.put(shard, s = new ArrayList<>());\n    s.add(new ReplicaInfo(\"\"+new Random().nextInt(1000)+1000,coll,shard, new HashMap<>()));\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.replicaInfo.get(coll);\n    if (c == null) row.replicaInfo.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d9d05d3577d962dae9cb4cd3f6e3e4686a35325","date":1496411933,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c","date":1496731004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) row.collectionVsShardVsReplicas.put(coll, c = new HashMap<>());\n    List<ReplicaInfo> replicas = c.get(shard);\n    if (replicas == null) c.put(shard, replicas = new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).intValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String).mjava","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) cell.val = ((Number) cell.val).longValue() + 1;\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"070f4513c7b9fb42b83f9c863b917c96c58397f2":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"1d9d05d3577d962dae9cb4cd3f6e3e4686a35325":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d9d05d3577d962dae9cb4cd3f6e3e4686a35325"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"070f4513c7b9fb42b83f9c863b917c96c58397f2":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":[],"1fca549db64ee4c87a83a94e7c224506fa20d396":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1d9d05d3577d962dae9cb4cd3f6e3e4686a35325":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"1852ff897aecd2f7c8376a02aedfd44104533f28":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["1d9d05d3577d962dae9cb4cd3f6e3e4686a35325"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","1852ff897aecd2f7c8376a02aedfd44104533f28","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}