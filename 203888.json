{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"({a TO z})^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    StandardQueryParser qp = new StandardQueryParser();\n    \n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\", \"field\")).getRewriteMethod());\n\n    // test open ranges\n    assertQueryEquals(\"[ a TO * ]\", null, \"[a TO *]\");\n    assertQueryEquals(\"[ * TO z ]\", null, \"[* TO z]\");\n    assertQueryEquals(\"[ * TO * ]\", null, \"[* TO *]\");\n    \n    assertQueryEquals(\"field>=a\", null, \"[a TO *]\");\n    assertQueryEquals(\"field>a\", null, \"{a TO *]\");\n    assertQueryEquals(\"field<=a\", null, \"[* TO a]\");\n    assertQueryEquals(\"field<a\", null, \"[* TO a}\");\n    \n    // mixing exclude and include bounds\n    assertQueryEquals(\"{ a TO z ]\", null, \"{a TO z]\");\n    assertQueryEquals(\"[ a TO z }\", null, \"[a TO z}\");\n    assertQueryEquals(\"{ a TO * ]\", null, \"{a TO *]\");\n    assertQueryEquals(\"[ * TO z }\", null, \"[* TO z}\");\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null,\n        \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["b89678825b68eccaf09e6ab71675fc0b0af1e099","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["2713584a660051cd646423be682771e3bbd99985"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0cdf628dda21ad509f09608c835dc27541d1ca3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b0cdf628dda21ad509f09608c835dc27541d1ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}