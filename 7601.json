{"path":"solr/core/src/java/org/apache/solr/core/backup/repository/BackupRepositoryFactory#BackupRepositoryFactory(PluginInfo[]).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/BackupRepositoryFactory#BackupRepositoryFactory(PluginInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  public BackupRepositoryFactory(PluginInfo[] backupRepoPlugins) {\n    if (backupRepoPlugins != null) {\n      for (int i = 0; i < backupRepoPlugins.length; i++) {\n        String name = backupRepoPlugins[i].name;\n        boolean isDefault = backupRepoPlugins[i].isDefault();\n\n        if (backupRepoPluginByName.containsKey(name)) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Duplicate backup repository with name \" + name);\n        }\n        if (isDefault) {\n          if (this.defaultBackupRepoPlugin != null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"More than one backup repository is configured as default\");\n          }\n          this.defaultBackupRepoPlugin = backupRepoPlugins[i];\n        }\n        backupRepoPluginByName.put(name, backupRepoPlugins[i]);\n        LOG.info(\"Added backup repository with configuration params {}\", backupRepoPlugins[i]);\n      }\n      if (backupRepoPlugins.length == 1) {\n        this.defaultBackupRepoPlugin = backupRepoPlugins[0];\n      }\n\n      if (this.defaultBackupRepoPlugin != null) {\n        LOG.info(\"Default configuration for backup repository is with configuration params {}\",\n            defaultBackupRepoPlugin);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/BackupRepositoryFactory#BackupRepositoryFactory(PluginInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  public BackupRepositoryFactory(PluginInfo[] backupRepoPlugins) {\n    if (backupRepoPlugins != null) {\n      for (int i = 0; i < backupRepoPlugins.length; i++) {\n        String name = backupRepoPlugins[i].name;\n        boolean isDefault = backupRepoPlugins[i].isDefault();\n\n        if (backupRepoPluginByName.containsKey(name)) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Duplicate backup repository with name \" + name);\n        }\n        if (isDefault) {\n          if (this.defaultBackupRepoPlugin != null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"More than one backup repository is configured as default\");\n          }\n          this.defaultBackupRepoPlugin = backupRepoPlugins[i];\n        }\n        backupRepoPluginByName.put(name, backupRepoPlugins[i]);\n        LOG.info(\"Added backup repository with configuration params {}\", backupRepoPlugins[i]);\n      }\n      if (backupRepoPlugins.length == 1) {\n        this.defaultBackupRepoPlugin = backupRepoPlugins[0];\n      }\n\n      if (this.defaultBackupRepoPlugin != null) {\n        LOG.info(\"Default configuration for backup repository is with configuration params {}\",\n            defaultBackupRepoPlugin);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/BackupRepositoryFactory#BackupRepositoryFactory(PluginInfo[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/BackupRepositoryFactory#BackupRepositoryFactory(PluginInfo[]).mjava","sourceNew":"  public BackupRepositoryFactory(PluginInfo[] backupRepoPlugins) {\n    if (backupRepoPlugins != null) {\n      for (int i = 0; i < backupRepoPlugins.length; i++) {\n        String name = backupRepoPlugins[i].name;\n        boolean isDefault = backupRepoPlugins[i].isDefault();\n\n        if (backupRepoPluginByName.containsKey(name)) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Duplicate backup repository with name \" + name);\n        }\n        if (isDefault) {\n          if (this.defaultBackupRepoPlugin != null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"More than one backup repository is configured as default\");\n          }\n          this.defaultBackupRepoPlugin = backupRepoPlugins[i];\n        }\n        backupRepoPluginByName.put(name, backupRepoPlugins[i]);\n        log.info(\"Added backup repository with configuration params {}\", backupRepoPlugins[i]);\n      }\n      if (backupRepoPlugins.length == 1) {\n        this.defaultBackupRepoPlugin = backupRepoPlugins[0];\n      }\n\n      if (this.defaultBackupRepoPlugin != null) {\n        log.info(\"Default configuration for backup repository is with configuration params {}\",\n            defaultBackupRepoPlugin);\n      }\n    }\n  }\n\n","sourceOld":"  public BackupRepositoryFactory(PluginInfo[] backupRepoPlugins) {\n    if (backupRepoPlugins != null) {\n      for (int i = 0; i < backupRepoPlugins.length; i++) {\n        String name = backupRepoPlugins[i].name;\n        boolean isDefault = backupRepoPlugins[i].isDefault();\n\n        if (backupRepoPluginByName.containsKey(name)) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Duplicate backup repository with name \" + name);\n        }\n        if (isDefault) {\n          if (this.defaultBackupRepoPlugin != null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"More than one backup repository is configured as default\");\n          }\n          this.defaultBackupRepoPlugin = backupRepoPlugins[i];\n        }\n        backupRepoPluginByName.put(name, backupRepoPlugins[i]);\n        LOG.info(\"Added backup repository with configuration params {}\", backupRepoPlugins[i]);\n      }\n      if (backupRepoPlugins.length == 1) {\n        this.defaultBackupRepoPlugin = backupRepoPlugins[0];\n      }\n\n      if (this.defaultBackupRepoPlugin != null) {\n        LOG.info(\"Default configuration for backup repository is with configuration params {}\",\n            defaultBackupRepoPlugin);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}