{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}