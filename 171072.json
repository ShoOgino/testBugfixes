{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(0, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(clusterStateVersion, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(0, liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getClusterState().mjava","sourceNew":null,"sourceOld":"  @Override\n  public ClusterState getClusterState() throws IOException {\n    ensureNotClosed();\n    try {\n      lock.lockInterruptibly();\n      try {\n        Map<String, DocCollection> states = getCollectionStates();\n        ClusterState state = new ClusterState(liveNodes.get(), states);\n        return state;\n      } finally {\n        lock.unlock();\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}