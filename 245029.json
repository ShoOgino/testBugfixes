{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n\n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, anlzr, false,\n        IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, anlzr, false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n\n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, anlzr, false,\n        IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, anlzr, false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fc7a3f8b8f998d16508a727a16ef12e569ffeec","date":1269627219,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\"));\n    if (tempDir == null)\n      throw new IOException(\"System property tempDir undefined, cannot run test\");\n\n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, anlzr, false,\n        IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, anlzr, false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n\n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, anlzr, false,\n        IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, anlzr, false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNorms().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained. Including\n   * separate norms. Including merging indexes with seprate norms. Including\n   * optimize.\n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\"));\n    if (tempDir == null)\n      throw new IOException(\"System property tempDir undefined, cannot run test\");\n\n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n    IndexWriter.unlock(dir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n\n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, anlzr, false,\n        IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[] { dir1, dir2 });\n    iw.optimize();\n    iw.close();\n\n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n\n    // now with optimize\n    iw = new IndexWriter(dir3, anlzr, false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fc7a3f8b8f998d16508a727a16ef12e569ffeec":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["4fc7a3f8b8f998d16508a727a16ef12e569ffeec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4fc7a3f8b8f998d16508a727a16ef12e569ffeec":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4fc7a3f8b8f998d16508a727a16ef12e569ffeec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}