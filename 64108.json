{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","commits":[{"id":"ee67a99e7e36da49a4b68758a01d1ac09ff5472c","date":1547653069,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","pathOld":"/dev/null","sourceNew":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    int activeThreadStateCount = w.docWriter.perThreadPool.getActiveThreadStateCount();\n    assertEquals(1, activeThreadStateCount);\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThreadPool.ThreadState state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          if (state.isInitialized()) {\n            state.dwpt.deleteQueue.getNextSequenceNumber();\n          } else {\n            w.docWriter.deleteQueue.getNextSequenceNumber();\n          }\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","sourceNew":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    assertEquals(1, w.docWriter.perThreadPool.size());\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThread state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          state.deleteQueue.getNextSequenceNumber();\n        }\n      } catch (IOException e) {\n        throw new AssertionError(e);\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    int activeThreadStateCount = w.docWriter.perThreadPool.getActiveThreadStateCount();\n    assertEquals(1, activeThreadStateCount);\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThreadPool.ThreadState state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          if (state.isInitialized()) {\n            state.dwpt.deleteQueue.getNextSequenceNumber();\n          } else {\n            w.docWriter.deleteQueue.getNextSequenceNumber();\n          }\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f1924bd448393fbdfef8b5ebed799f938169d3","date":1600069616,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","sourceNew":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    assertEquals(1, w.docWriter.perThreadPool.size());\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThread state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          state.deleteQueue.getNextSequenceNumber();\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    assertEquals(1, w.docWriter.perThreadPool.size());\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThread state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          state.deleteQueue.getNextSequenceNumber();\n        }\n      } catch (IOException e) {\n        throw new AssertionError(e);\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf8f79417865e5028d753e669fae06457e8369","date":1600073240,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testFlushWhileStartingNewThreads().mjava","sourceNew":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    assertEquals(1, w.docWriter.perThreadPool.size());\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThread state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          state.deleteQueue.getNextSequenceNumber();\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-8639\n  public void testFlushWhileStartingNewThreads() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig());\n    w.addDocument(new Document());\n    assertEquals(1, w.docWriter.perThreadPool.size());\n    CountDownLatch latch = new CountDownLatch(1);\n    Thread thread = new Thread(() -> {\n      latch.countDown();\n      List<Closeable> states = new ArrayList<>();\n      try {\n        for (int i = 0; i < 100; i++) {\n          DocumentsWriterPerThread state = w.docWriter.perThreadPool.getAndLock();\n          states.add(state::unlock);\n          state.deleteQueue.getNextSequenceNumber();\n        }\n      } catch (IOException e) {\n        throw new AssertionError(e);\n      } finally {\n        IOUtils.closeWhileHandlingException(states);\n      }\n    });\n    thread.start();\n    latch.await();\n    w.docWriter.flushControl.markForFullFlush();\n    thread.join();\n    w.docWriter.flushControl.abortFullFlushes();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["264935965977b4a9e2f3920420647072c9c49176"],"0dcf8f79417865e5028d753e669fae06457e8369":["264935965977b4a9e2f3920420647072c9c49176","49f1924bd448393fbdfef8b5ebed799f938169d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dcf8f79417865e5028d753e669fae06457e8369"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["49f1924bd448393fbdfef8b5ebed799f938169d3","0dcf8f79417865e5028d753e669fae06457e8369"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["0dcf8f79417865e5028d753e669fae06457e8369"],"0dcf8f79417865e5028d753e669fae06457e8369":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}