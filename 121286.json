{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","pathOld":"/dev/null","sourceNew":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n      final String text = t.text();\n      final int textLen = text.length();\n\n      for(int i=Math.max(0,newSuffixStart);i<textLen;i++) {\n        final char ch = text.charAt(i);\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+1];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = text.charAt(j);\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new String(testPrefix)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n            String seekText = t2.text();\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(seekText));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekText.charAt(j)) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","sourceNew":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n\n      final BytesRef bytes = t.bytes();\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, bytes.offset, bytes.length, termBuffer);\n\n      for(int i=Math.max(0,newSuffixStart);i<termBuffer.length;i++) {\n        final char ch = termBuffer.result[i];\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+2];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = termBuffer.result[j];\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new BytesRef(testPrefix, 0, i+1)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n\n            final BytesRef seekBytes = t2.bytes();\n            UnicodeUtil.UTF8toUTF16(seekBytes.bytes, seekBytes.offset, seekBytes.length, seekBuffer);\n\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(t2.text()));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekBuffer.result[j]) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n      final String text = t.text();\n      final int textLen = text.length();\n\n      for(int i=Math.max(0,newSuffixStart);i<textLen;i++) {\n        final char ch = text.charAt(i);\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+1];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = text.charAt(j);\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new String(testPrefix)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n            String seekText = t2.text();\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(seekText));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekText.charAt(j)) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","pathOld":"/dev/null","sourceNew":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n\n      final BytesRef bytes = t.bytes();\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, bytes.offset, bytes.length, termBuffer);\n\n      for(int i=Math.max(0,newSuffixStart);i<termBuffer.length;i++) {\n        final char ch = termBuffer.result[i];\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+2];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = termBuffer.result[j];\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new BytesRef(testPrefix, 0, i+1)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n\n            final BytesRef seekBytes = t2.bytes();\n            UnicodeUtil.UTF8toUTF16(seekBytes.bytes, seekBytes.offset, seekBytes.length, seekBuffer);\n\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(t2.text()));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekBuffer.result[j]) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","sourceNew":null,"sourceOld":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n\n      final BytesRef bytes = t.bytes();\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, bytes.offset, bytes.length, termBuffer);\n\n      for(int i=Math.max(0,newSuffixStart);i<termBuffer.length;i++) {\n        final char ch = termBuffer.result[i];\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+2];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = termBuffer.result[j];\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new BytesRef(testPrefix, 0, i+1)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n\n            final BytesRef seekBytes = t2.bytes();\n            UnicodeUtil.UTF8toUTF16(seekBytes.bytes, seekBytes.offset, seekBytes.length, seekBuffer);\n\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(t2.text()));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekBuffer.result[j]) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","sourceNew":null,"sourceOld":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n\n      final BytesRef bytes = t.bytes();\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, bytes.offset, bytes.length, termBuffer);\n\n      for(int i=Math.max(0,newSuffixStart);i<termBuffer.length;i++) {\n        final char ch = termBuffer.result[i];\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+2];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = termBuffer.result[j];\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new BytesRef(testPrefix, 0, i+1)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n\n            final BytesRef seekBytes = t2.bytes();\n            UnicodeUtil.UTF8toUTF16(seekBytes.bytes, seekBytes.offset, seekBytes.length, seekBuffer);\n\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(t2.text()));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekBuffer.result[j]) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#pushNewSurrogate().mjava","sourceNew":null,"sourceOld":"    private boolean pushNewSurrogate() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check push newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      final Term t = termEnum.term();\n      if (t == null || t.field() != fieldInfo.name) {\n        return false;\n      }\n\n      final BytesRef bytes = t.bytes();\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, bytes.offset, bytes.length, termBuffer);\n\n      for(int i=Math.max(0,newSuffixStart);i<termBuffer.length;i++) {\n        final char ch = termBuffer.result[i];\n        if (ch >= UnicodeUtil.UNI_SUR_HIGH_START && ch <= UnicodeUtil.UNI_SUR_HIGH_END && (surrogateSeekUpto == 0 || i > surrogateSeekPending[surrogateSeekUpto-1])) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found high surr 0x\" + Integer.toHexString(ch) + \" at pos=\" + i);\n          }\n\n          // the next() that we just did read in a new\n          // suffix, containing a surrogate pair\n\n          // seek forward to see if there are any terms with\n          // this same prefix, but with characters after the\n          // surrogate range; if so, we must first iterate\n          // them, then seek back to the surrogates\n\n          char[] testPrefix = new char[i+2];\n          for(int j=0;j<i;j++) {\n            testPrefix[j] = termBuffer.result[j];\n          }\n          testPrefix[i] = 1+UnicodeUtil.UNI_SUR_LOW_END;\n\n          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(new BytesRef(testPrefix, 0, i+1)));\n\n          Term t2 = seekTermEnum.term();\n          boolean isPrefix;\n          if (t2 != null && t2.field() == fieldInfo.name) {\n\n            final BytesRef seekBytes = t2.bytes();\n            UnicodeUtil.UTF8toUTF16(seekBytes.bytes, seekBytes.offset, seekBytes.length, seekBuffer);\n\n            isPrefix = true;\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      seek found \" + UnicodeUtil.toHexString(t2.text()));\n            }\n            for(int j=0;j<i;j++) {\n              if (testPrefix[j] != seekBuffer.result[j]) {\n                isPrefix = false;\n                break;\n              }\n            }\n            if (DEBUG_SURROGATES && !isPrefix) {\n              System.out.println(\"      no end terms\");\n            }\n          } else {\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      no end terms\");\n            }\n            isPrefix = false;\n          }\n\n          if (isPrefix) {\n            // we found a term, sharing the same prefix,\n            // with characters after the surrogates, so we\n            // must first enum those, and then return the\n            // the surrogates afterwards.  push that pending\n            // seek on the surrogates stack now:\n            pendingPrefix = testPrefix;\n\n            getTermsDict().seekEnum(termEnum, t2);\n\n            if (surrogateSeekUpto == surrogateSeekPending.length) {\n              surrogateSeekPending = ArrayUtil.grow(surrogateSeekPending);\n            }\n            if (surrogateSeekUpto == surrogateDidSeekBack.length) {\n              surrogateDidSeekBack = ArrayUtil.grow(surrogateDidSeekBack);\n            }\n            surrogateSeekPending[surrogateSeekUpto] = i;\n            surrogateDidSeekBack[surrogateSeekUpto] = false;\n            surrogateSeekUpto++;\n\n            if (DEBUG_SURROGATES) {\n              System.out.println(\"      do push \" + i + \"; end term=\" + UnicodeUtil.toHexString(t2.text()));\n            }\n\n            newSuffixStart = i+1;\n\n            return true;\n          } else {\n            // there are no terms after the surrogates, so\n            // we do nothing to the enum and just step\n            // through the surrogates like normal.  but we\n            // must keep iterating through the term, in case\n            // another surrogate pair appears later\n          }\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"08932c793647a36953d1816b1060121f48820d3f":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}