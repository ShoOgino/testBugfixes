{"path":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","commits":[{"id":"196a576c5807672fc9ec3fd6db6311bf919bab9c","date":1171834203,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = 1; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc8c0001d63aceba4db5451caa22039fd3a10fa","date":1177910931,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = 1; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = 1; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0398ae7345bbadabd4c035fae97ad2b8a8233d1","date":1179949443,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = 1; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d0398ae7345bbadabd4c035fae97ad2b8a8233d1"],"d0398ae7345bbadabd4c035fae97ad2b8a8233d1":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["196a576c5807672fc9ec3fd6db6311bf919bab9c"]},"commit2Childs":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d0398ae7345bbadabd4c035fae97ad2b8a8233d1":["ad94625fb8d088209f46650c8097196fec67f00c"],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["d0398ae7345bbadabd4c035fae97ad2b8a8233d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}