{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\")));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\")));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\")));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f2a0c9375087e6be436dd3fc6c87844d142fa2","date":1453159521,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a1c4d6b981fc49379247a6fa89dad542a5f4818","date":1478965496,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68bec97e83e226b5211a1ef8f80c49641cfdc9a0","date":1479075313,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82121155dc3985e206c2401ee1d66da0f4cde013","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    List<Document> documents = new ArrayList<>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new StringField(\"groupend\", \"x\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Query lastDocInBlock = new TermQuery(new Term(\"groupend\", \"x\"));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82121155dc3985e206c2401ee1d66da0f4cde013":["d6f2a0c9375087e6be436dd3fc6c87844d142fa2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"2459db523605752a3affcf444fb717d625904488":["d6f2a0c9375087e6be436dd3fc6c87844d142fa2","0a1c4d6b981fc49379247a6fa89dad542a5f4818"],"0a1c4d6b981fc49379247a6fa89dad542a5f4818":["d6f2a0c9375087e6be436dd3fc6c87844d142fa2"],"d6f2a0c9375087e6be436dd3fc6c87844d142fa2":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"c8243e301531f97de264740d6afa71de6781dd64":["2459db523605752a3affcf444fb717d625904488","d6f2a0c9375087e6be436dd3fc6c87844d142fa2"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"97d4692d0c601ff773f0a2231967312428a904e4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"68bec97e83e226b5211a1ef8f80c49641cfdc9a0":["0a1c4d6b981fc49379247a6fa89dad542a5f4818"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["97d4692d0c601ff773f0a2231967312428a904e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82121155dc3985e206c2401ee1d66da0f4cde013"]},"commit2Childs":{"82121155dc3985e206c2401ee1d66da0f4cde013":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d52e48927ca4ef3655a261f2230b968b6fdf3608"],"2459db523605752a3affcf444fb717d625904488":["c8243e301531f97de264740d6afa71de6781dd64"],"0a1c4d6b981fc49379247a6fa89dad542a5f4818":["2459db523605752a3affcf444fb717d625904488","68bec97e83e226b5211a1ef8f80c49641cfdc9a0"],"d6f2a0c9375087e6be436dd3fc6c87844d142fa2":["82121155dc3985e206c2401ee1d66da0f4cde013","2459db523605752a3affcf444fb717d625904488","0a1c4d6b981fc49379247a6fa89dad542a5f4818","c8243e301531f97de264740d6afa71de6781dd64"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["97d4692d0c601ff773f0a2231967312428a904e4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["d6f2a0c9375087e6be436dd3fc6c87844d142fa2"],"c8243e301531f97de264740d6afa71de6781dd64":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"68bec97e83e226b5211a1ef8f80c49641cfdc9a0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c8243e301531f97de264740d6afa71de6781dd64","68bec97e83e226b5211a1ef8f80c49641cfdc9a0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}