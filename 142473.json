{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo, writer));\n  }\n\n","sourceOld":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo, mergeContext));\n  }\n\n","sourceOld":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo, writer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"027bee21e09164c9ee230395405076d1e0034b30":["1d28f215464f76024caf026606f8ea51a5319c53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}