{"path":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c084e47df29de3330311d69dabf515ceaa989512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}