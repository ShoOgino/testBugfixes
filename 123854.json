{"path":"lucene/core/src/java/org/apache/lucene/util/LSBRadixSorter#sort(int,int[],int).mjava","commits":[{"id":"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","date":1461860441,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LSBRadixSorter#sort(int,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LSBRadixSorter#sort(int[],int,int).mjava","sourceNew":"  /** Sort {@code array[0:len]} in place.\n   * @param numBits how many bits are required to store any of the values in\n   *                {@code array[0:len]}. Pass {@code 32} if unknown. */\n  public void sort(int numBits, final int[] array, int len) {\n    if (len < INSERTION_SORT_THRESHOLD) {\n      insertionSort(array, 0, len);\n      return;\n    }\n\n    buffer = ArrayUtil.grow(buffer, len);\n\n    int[] arr = array;\n\n    int[] buf = buffer;\n\n    for (int shift = 0; shift < numBits; shift += 8) {\n      if (sort(arr, len, histogram, shift, buf)) {\n        // swap arrays\n        int[] tmp = arr;\n        arr = buf;\n        buf = tmp;\n      }\n    }\n\n    if (array == buf) {\n      System.arraycopy(arr, 0, array, 0, len);\n    }\n  }\n\n","sourceOld":"  public void sort(final int[] array, int off, int len) {\n    if (len < INSERTION_SORT_THRESHOLD) {\n      insertionSort(array, off, len);\n      return;\n    }\n\n    buffer = ArrayUtil.grow(buffer, len);\n\n    int[] arr = array;\n    int arrOff = off;\n\n    int[] buf = buffer;\n    int bufOff = 0;\n    \n    for (int shift = 0; shift <= 24; shift += 8) {\n      if (sort(arr, arrOff, len, histogram, shift, buf, bufOff)) {\n        // swap arrays\n        int[] tmp = arr;\n        int tmpOff = arrOff;\n        arr = buf;\n        arrOff = bufOff;\n        buf = tmp;\n        bufOff = tmpOff;\n      }\n    }\n\n    if (array == buf) {\n      System.arraycopy(arr, arrOff, array, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LSBRadixSorter#sort(int,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LSBRadixSorter#sort(int[],int,int).mjava","sourceNew":"  /** Sort {@code array[0:len]} in place.\n   * @param numBits how many bits are required to store any of the values in\n   *                {@code array[0:len]}. Pass {@code 32} if unknown. */\n  public void sort(int numBits, final int[] array, int len) {\n    if (len < INSERTION_SORT_THRESHOLD) {\n      insertionSort(array, 0, len);\n      return;\n    }\n\n    buffer = ArrayUtil.grow(buffer, len);\n\n    int[] arr = array;\n\n    int[] buf = buffer;\n\n    for (int shift = 0; shift < numBits; shift += 8) {\n      if (sort(arr, len, histogram, shift, buf)) {\n        // swap arrays\n        int[] tmp = arr;\n        arr = buf;\n        buf = tmp;\n      }\n    }\n\n    if (array == buf) {\n      System.arraycopy(arr, 0, array, 0, len);\n    }\n  }\n\n","sourceOld":"  public void sort(final int[] array, int off, int len) {\n    if (len < INSERTION_SORT_THRESHOLD) {\n      insertionSort(array, off, len);\n      return;\n    }\n\n    buffer = ArrayUtil.grow(buffer, len);\n\n    int[] arr = array;\n    int arrOff = off;\n\n    int[] buf = buffer;\n    int bufOff = 0;\n    \n    for (int shift = 0; shift <= 24; shift += 8) {\n      if (sort(arr, arrOff, len, histogram, shift, buf, bufOff)) {\n        // swap arrays\n        int[] tmp = arr;\n        int tmpOff = arrOff;\n        arr = buf;\n        arrOff = bufOff;\n        buf = tmp;\n        bufOff = tmpOff;\n      }\n    }\n\n    if (array == buf) {\n      System.arraycopy(arr, arrOff, array, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"]},"commit2Childs":{"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}