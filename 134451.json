{"path":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","commits":[{"id":"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","date":1282923617,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"/dev/null","sourceNew":" public void testStrings() throws Exception {\n    Random r = newRandom();\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(r);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","sourceNew":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":" public void testStrings() throws Exception {\n    Random r = newRandom();\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(r);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"/dev/null","sourceNew":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","sourceNew":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","sourceNew":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestJavaBinCodec#testStrings().mjava","sourceNew":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","sourceOld":" public void testStrings() throws Exception {\n    JavaBinCodec javabin = new JavaBinCodec();\n    for (int i = 0; i < 10000*RANDOM_MULTIPLIER; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      ByteArrayOutputStream os = new ByteArrayOutputStream();\n      javabin.marshal(s, os);\n      ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n      Object o = javabin.unmarshal(is);\n      assertEquals(s, o);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["1f653cfcf159baeaafe5d01682a911e95bba4012","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}