{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0261694600e2fe9786395ecd0838ed98797d2660","date":1328833321,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"  @Test\n  public void testBooleanFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1863090ece9f7d49f0d21a4711350751c6b7e5ad","date":1515268445,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"  @Test\n  public void testBooleanFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\", \"foo_tf\", \"0.00001\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n    // queries with positive scores < 1 should still evaluate to 'true' in boolean context\n    assertJQ(req(\"q\", \"id:1\", \"nested\", \"*:*^=0.00001\",\n                 \"fl\", \"a1:if(query($nested),'A','B')\", \"fl\",\"b1:if(not(query($nested)),'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n    // test fields evaluated as booleans in wrapping functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)\")\n        , \"/response/docs/[0]=={'a':true, 'b':'TT', 'c':true}\");\n    assertJQ(req(\"q\", \"id:2\", \"fl\", \"a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)\")\n        , \"/response/docs/[0]=={'a':false, 'b':'FF', 'c':false}\");\n    \n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A'), f:not(0.001)\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false, 'f':false}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":["80f6925d29ae169407185d52267ba1969126e1e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"  @Test\n  public void testBooleanFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\", \"foo_tf\", \"0.00001\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n    // queries with positive scores < 1 should still evaluate to 'true' in boolean context\n    assertJQ(req(\"q\", \"id:1\", \"nested\", \"*:*^=0.00001\",\n                 \"fl\", \"a1:if(query($nested),'A','B')\", \"fl\",\"b1:if(not(query($nested)),'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n    // test fields evaluated as booleans in wrapping functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)\")\n        , \"/response/docs/[0]=={'a':true, 'b':'TT', 'c':true}\");\n    assertJQ(req(\"q\", \"id:2\", \"fl\", \"a:not(foo_ti), b:if(foo_tf,'TT','FF'), c:and(true,foo_tf)\")\n        , \"/response/docs/[0]=={'a':false, 'b':'FF', 'c':false}\");\n    \n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A'), f:not(0.001)\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false, 'f':false}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // test weighting of functions\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:testfunc(1)\")\n          , \"/response/docs/[0]=={'a':1}\");\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A',testfunc('B'))\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(testfunc(true),true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(testfunc(true),true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(testfunc(true),true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(testfunc(false)),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,testfunc(123)), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':'1', 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["28288370235ed02234a64753cdbf0c6ec096304a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["f0141f86b1794b911ab8e3eac773bf583e5cf784","1863090ece9f7d49f0d21a4711350751c6b7e5ad"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["0261694600e2fe9786395ecd0838ed98797d2660","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0261694600e2fe9786395ecd0838ed98797d2660"],"28288370235ed02234a64753cdbf0c6ec096304a":["19275ba31e621f6da1b83bf13af75233876fd3d4","a71f63026529f3c1f03cfdd664910873ab2369ae"],"1863090ece9f7d49f0d21a4711350751c6b7e5ad":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0261694600e2fe9786395ecd0838ed98797d2660":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["19275ba31e621f6da1b83bf13af75233876fd3d4","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["b94236357aaa22b76c10629851fe4e376e0cea82","1863090ece9f7d49f0d21a4711350751c6b7e5ad"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["0261694600e2fe9786395ecd0838ed98797d2660"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"1863090ece9f7d49f0d21a4711350751c6b7e5ad":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0261694600e2fe9786395ecd0838ed98797d2660":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}