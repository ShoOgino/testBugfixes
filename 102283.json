{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, texts[0]);\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}