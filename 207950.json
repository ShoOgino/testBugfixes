{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dea241098eaf5af8a4789a62634f655d226641","date":1323618214,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (decrefOnClose[i]) {\n          subReaders[i].decRef();\n        } else {\n          subReaders[i].close();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (decrefOnClose[i]) {\n          subReaders[i].decRef();\n        } else {\n          subReaders[i].close();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (decrefOnClose[i]) {\n        subReaders[i].decRef();\n      } else {\n        subReaders[i].close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"736227dbe65dab1a95b84180019f766a321f0ef8","date":1327840766,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (closeSubReaders) {\n          subReaders[i].close();\n        } else {\n          subReaders[i].decRef();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (decrefOnClose[i]) {\n          subReaders[i].decRef();\n        } else {\n          subReaders[i].close();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (closeSubReaders) {\n          subReaders[i].close();\n        } else {\n          subReaders[i].decRef();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (decrefOnClose[i]) {\n          subReaders[i].decRef();\n        } else {\n          subReaders[i].close();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (closeSubReaders) {\n          subReaders[i].close();\n        } else {\n          subReaders[i].decRef();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      try {\n        if (closeSubReaders) {\n          subReaders[i].close();\n        } else {\n          subReaders[i].decRef();\n        }\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"736227dbe65dab1a95b84180019f766a321f0ef8":["57dea241098eaf5af8a4789a62634f655d226641"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","57dea241098eaf5af8a4789a62634f655d226641"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dea241098eaf5af8a4789a62634f655d226641":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["57dea241098eaf5af8a4789a62634f655d226641","736227dbe65dab1a95b84180019f766a321f0ef8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","57dea241098eaf5af8a4789a62634f655d226641","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"736227dbe65dab1a95b84180019f766a321f0ef8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"57dea241098eaf5af8a4789a62634f655d226641":["736227dbe65dab1a95b84180019f766a321f0ef8","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}