{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"874880417e0b2612f777ecd0afe39e0d90486752","date":1123795738,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      } catch (IOException e) {\n        t = null;\n      }\n      if (t == null) {\n        break;\n      }\n      tlist.add(t.termText());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used consumed the only token we had,\n       * and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass() + \" - token was consumed\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c042095bccf8e65c79da13541b035aba62f1b32","date":1199191784,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      } catch (IOException e) {\n        t = null;\n      }\n      if (t == null) {\n        break;\n      }\n      tlist.add(t.termText());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      } catch (IOException e) {\n        t = null;\n      }\n      if (t == null) {\n        break;\n      }\n      tlist.add(t.termText());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used consumed the only token we had,\n       * and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass() + \" - token was consumed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    final Token reusableToken = new Token();\n    Token nextToken;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      } catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null) {\n        break;\n      }\n      tlist.add(nextToken.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      } catch (IOException e) {\n        t = null;\n      }\n      if (t == null) {\n        break;\n      }\n      tlist.add(t.termText());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    final Token reusableToken = new Token();\n    Token nextToken;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      } catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null) {\n        break;\n      }\n      tlist.add(nextToken.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["1c042095bccf8e65c79da13541b035aba62f1b32"],"874880417e0b2612f777ecd0afe39e0d90486752":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"1c042095bccf8e65c79da13541b035aba62f1b32":["874880417e0b2612f777ecd0afe39e0d90486752"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"874880417e0b2612f777ecd0afe39e0d90486752":["1c042095bccf8e65c79da13541b035aba62f1b32"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["874880417e0b2612f777ecd0afe39e0d90486752"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"1c042095bccf8e65c79da13541b035aba62f1b32":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}